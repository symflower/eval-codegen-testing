package report

import (
	"io"
	"os"
	"path/filepath"
	"strconv"
	"text/template"
	"time"

	pkgerrors "github.com/pkg/errors"
	"github.com/wcharczuk/go-chart/v2"
	"github.com/zimmski/osutil/bytesutil"

	"github.com/symflower/eval-dev-quality/evaluate/metrics"
)

// Markdown holds the values for exporting a Markdown report.
type Markdown struct {
	// DateTime holds the timestamp of the evaluation.
	DateTime time.Time
	// Version holds the version of the evaluation tool.
	Version string

	// CSVPath holds the path of detailed CSV results.
	CSVPath string
	// LogPath holds the path of detailed logs.
	LogPath string
	// SVGPath holds the path of the charted results.
	// REMARK The charts will be generated automatically during the export if this path is set.
	SVGPath string

	// AssessmentPerModel holds
	AssessmentPerModel map[string]metrics.Assessments
	// TotalScore holds the total reachable score per task.
	// REMARK Used for category computation.
	TotalScore uint
}

// markdownTemplateContext holds the template for a Markdown report.
type markdownTemplateContext struct {
	Markdown

	Categories        []*metrics.AssessmentCategory
	ModelsPerCategory map[*metrics.AssessmentCategory][]string
}

// markdownTemplate holds the template for a Markdown report.
var markdownTemplate = template.Must(template.New("template-report").Parse(bytesutil.StringTrimIndentations(`
	# Evaluation from {{.DateTime.Format "2006-01-02 15:04:05"}}

	{{ with $svgPath := .SVGPath -}}
	![Bar chart that categorizes all evaluated models.]({{$svgPath}})

	{{ end -}}

	This report was generated by [DevQualityEval benchmark](https://github.com/symflower/eval-dev-quality) in ` + "`" + `version {{.Version}}` + "`" + `.

	## Results

	> Keep in mind that LLMs are nondeterministic. The following results just reflect a current snapshot.

	The results of all models have been divided into the following categories:
	{{ range $category := .Categories -}}
	- {{ $category.Name }}: {{ $category.Description }}
	{{ end }}
	The following sections list all models with their categories. The complete log of the evaluation with all outputs can be found [here]({{.LogPath}}). Detailed scoring can be found [here]({{.CSVPath}}).

	{{ range $category := .Categories -}}
	{{ with $modelNames := index $.ModelsPerCategory $category -}}
	### "{{ $category.Name }}"

	{{ $category.Description }}

	{{ range $modelName := $modelNames -}}
	- ` + "`" + `{{ $modelName }}` + "`" + `
	{{ end }}
	{{ end }}
	{{- end -}}
`)))

// barChartModelsPerCategoriesSVG generates a bar chart showing models per category and writes it out as an SVG.
func barChartModelsPerCategoriesSVG(writer io.Writer, categories []*metrics.AssessmentCategory, modelsPerCategory map[*metrics.AssessmentCategory][]string) error {
	bars := make([]chart.Value, 0, len(categories))
	maxCount := 0
	for _, category := range categories {
		count := len(modelsPerCategory[category])
		if count > maxCount {
			maxCount = count
		}
		if count == 0 {
			continue
		}

		bars = append(bars, chart.Value{
			Label: category.Name,
			Value: float64(count),
		})
	}
	ticks := make([]chart.Tick, maxCount+1)
	for i := range ticks {
		ticks[i] = chart.Tick{
			Value: float64(i),
			Label: strconv.Itoa(i),
		}
	}
	graph := chart.BarChart{
		Title: "Models per Category",
		Bars:  bars,
		YAxis: chart.YAxis{
			Ticks: ticks,
		},

		Background: chart.Style{
			Padding: chart.Box{
				Top:    60,
				Bottom: 40,
			},
		},
		Height:   300,
		Width:    (len(bars) + 2) * 60,
		BarWidth: 60,
	}

	return pkgerrors.WithStack(graph.Render(chart.SVG, writer))
}

// Format formats the markdown values in the template to the given writer.
func (m Markdown) Format(writer io.Writer) error {
	templateContext := markdownTemplateContext{
		Markdown:   m,
		Categories: metrics.AllAssessmentCategories,
	}
	templateContext.ModelsPerCategory = make(map[*metrics.AssessmentCategory][]string, len(metrics.AllAssessmentCategories))
	for model, assessment := range m.AssessmentPerModel {
		category := assessment.Category(m.TotalScore)
		templateContext.ModelsPerCategory[category] = append(templateContext.ModelsPerCategory[category], model)
	}

	if m.SVGPath == "" {
		return pkgerrors.WithStack(markdownTemplate.Execute(writer, templateContext))

	}

	svgFile, err := os.Create(m.SVGPath)
	if err != nil {
		return pkgerrors.WithStack(err)
	}
	defer func() {
		if err := svgFile.Close(); err != nil {
			panic(err)
		}
	}()
	if err := barChartModelsPerCategoriesSVG(svgFile, metrics.AllAssessmentCategories, templateContext.ModelsPerCategory); err != nil {
		return pkgerrors.WithStack(err)
	}

	return pkgerrors.WithStack(markdownTemplate.Execute(writer, templateContext))
}

// WriteToFile writes the Markdown values in the template to the given file.
func (t Markdown) WriteToFile(path string) (err error) {
	t.CSVPath, err = filepath.Abs(t.CSVPath)
	if err != nil {
		return err
	}
	t.LogPath, err = filepath.Abs(t.LogPath)
	if err != nil {
		return err
	}
	if t.SVGPath != "" {
		t.SVGPath, err = filepath.Abs(t.SVGPath)
		if err != nil {
			return err
		}
	}

	if err = os.MkdirAll(filepath.Base(path), 0755); err != nil {
		return pkgerrors.WithStack(err)
	}
	file, err := os.Create(path)
	if err != nil {
		return pkgerrors.WithStack(err)
	}

	return pkgerrors.WithStack(t.Format(file))
}

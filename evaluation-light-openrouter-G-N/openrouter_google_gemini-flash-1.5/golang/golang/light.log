2024/06/06 11:01:06 Evaluating model "openrouter/google/gemini-flash-1.5" using language "golang" and repository "golang/light"
2024/06/06 11:01:06 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "balancedBrackets.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func hasBalancedBrackets(charArray string) bool {
		brackets := 0
		for _, ch := range charArray {
			if ch == '[' {
				brackets++
			} else if ch == ']' {
				brackets--
			} else {
				return false // Non-bracket characters.
			}
		}

		if brackets < 0 { // Closing bracket before opening bracket.
			return false
		}

		return brackets == 0
	}
	```
2024/06/06 11:01:11 Model "openrouter/google/gemini-flash-1.5" responded (5121 ms) with:
	```golang
	package light

	import "testing"

	func TestHasBalancedBrackets(t *testing.T) {
		type args struct {
			charArray string
		}
		tests := []struct {
			name string
			args args
			want bool
		}{
			{
				name: "Balanced brackets",
				args: args{charArray: "[][][]"},
				want: true,
			},
			{
				name: "Unbalanced brackets - Closing before opening",
				args: args{charArray: "][]"},
				want: false,
			},
			{
				name: "Unbalanced brackets - More opening than closing",
				args: args{charArray: "[[["},
				want: false,
			},
			{
				name: "Empty string",
				args: args{charArray: ""},
				want: true,
			},
			{
				name: "Non-bracket characters",
				args: args{charArray: "abc"},
				want: false,
			},
			{
				name: "Mixed characters with balanced brackets",
				args: args{charArray: "a[b]c"},
				want: true,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := hasBalancedBrackets(tt.args.charArray); got != tt.want {
					t.Errorf("hasBalancedBrackets() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:01:11 $ go mod tidy
2024/06/06 11:01:11 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestHasBalancedBrackets
=== RUN   TestHasBalancedBrackets/Balanced_brackets
=== RUN   TestHasBalancedBrackets/Unbalanced_brackets_-_Closing_before_opening
=== RUN   TestHasBalancedBrackets/Unbalanced_brackets_-_More_opening_than_closing
=== RUN   TestHasBalancedBrackets/Empty_string
=== RUN   TestHasBalancedBrackets/Non-bracket_characters
=== RUN   TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets
    balancedBrackets_test.go:48: hasBalancedBrackets() = false, want true
--- FAIL: TestHasBalancedBrackets (0.00s)
    --- PASS: TestHasBalancedBrackets/Balanced_brackets (0.00s)
    --- PASS: TestHasBalancedBrackets/Unbalanced_brackets_-_Closing_before_opening (0.00s)
    --- PASS: TestHasBalancedBrackets/Unbalanced_brackets_-_More_opening_than_closing (0.00s)
    --- PASS: TestHasBalancedBrackets/Empty_string (0.00s)
    --- PASS: TestHasBalancedBrackets/Non-bracket_characters (0.00s)
    --- FAIL: TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets (0.00s)
FAIL
coverage: 4.7% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets (0.00s)
    balancedBrackets_test.go:48: hasBalancedBrackets() = false, want true
    --- FAIL: TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets (0.00s)

=== FAIL: . TestHasBalancedBrackets (0.00s)

DONE 7 tests, 2 failures in 0.321s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:01:11 Executes tests with 5 coverage objects
2024/06/06 11:01:11 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "binarySearch.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func binarySearch(a []int, x int) int {
		index := -1

		min := 0
		max := len(a) - 1

		for index == -1 && min <= max {
			m := (min + max) / 2

			if x == a[m] {
				index = m
			} else if x < a[m] {
				max = m - 1
			} else {
				min = m + 1
			}
		}

		return index
	}
	```
2024/06/06 11:01:16 Model "openrouter/google/gemini-flash-1.5" responded (4728 ms) with:
	```golang
	package light

	import "testing"

	func TestBinarySearch(t *testing.T) {
		t.Run("empty_array", func(t *testing.T) {
			got := binarySearch([]int{}, 5)
			want := -1
			if got != want {
				t.Errorf("got %d, want %d", got, want)
			}
		})

		t.Run("not_found", func(t *testing.T) {
			got := binarySearch([]int{1, 3, 5, 7, 9}, 2)
			want := -1
			if got != want {
				t.Errorf("got %d, want %d", got, want)
			}
		})

		t.Run("found_at_start", func(t *testing.T) {
			got := binarySearch([]int{1, 3, 5, 7, 9}, 1)
			want := 0
			if got != want {
				t.Errorf("got %d, want %d", got, want)
			}
		})

		t.Run("found_at_end", func(t *testing.T) {
			got := binarySearch([]int{1, 3, 5, 7, 9}, 9)
			want := 4
			if got != want {
				t.Errorf("got %d, want %d", got, want)
			}
		})

		t.Run("found_in_middle", func(t *testing.T) {
			got := binarySearch([]int{1, 3, 5, 7, 9}, 5)
			want := 2
			if got != want {
				t.Errorf("got %d, want %d", got, want)
			}
		})
	}
	```
2024/06/06 11:01:16 $ go mod tidy
2024/06/06 11:01:16 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestBinarySearch
=== RUN   TestBinarySearch/empty_array
=== RUN   TestBinarySearch/not_found
=== RUN   TestBinarySearch/found_at_start
=== RUN   TestBinarySearch/found_at_end
=== RUN   TestBinarySearch/found_in_middle
--- PASS: TestBinarySearch (0.00s)
    --- PASS: TestBinarySearch/empty_array (0.00s)
    --- PASS: TestBinarySearch/not_found (0.00s)
    --- PASS: TestBinarySearch/found_at_start (0.00s)
    --- PASS: TestBinarySearch/found_at_end (0.00s)
    --- PASS: TestBinarySearch/found_in_middle (0.00s)
PASS
coverage: 5.2% of statements
ok  	light	0.005s	coverage: 5.2% of statements

DONE 6 tests in 0.359s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 11:01:17 Executes tests with 4 coverage objects
2024/06/06 11:01:17 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "callLoopConditionsOftenEnough.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func callLoopConditionsOftenEnough(x, y int) int {
		if x < 10 || x > 20 {
			return 0
		}

		for i := 0; i < y; i++ {
			if i > 20 {
				x++ // This needs to be executed more than 10 times
			}
		}

		if x > 20 { // This block needs to be reached for full coverage
			x = x / 2
		}

		return x
	}
	```
2024/06/06 11:01:23 Model "openrouter/google/gemini-flash-1.5" responded (5950 ms) with:
	```golang
	package light

	import "testing"

	func TestCallLoopConditionsOftenEnough(t *testing.T) {
		t.Run("xLessThan10", func(t *testing.T) {
			got := callLoopConditionsOftenEnough(5, 10)
			want := 0
			if got != want {
				t.Errorf("callLoopConditionsOftenEnough(%d, %d) = %d, want %d", 5, 10, got, want)
			}
		})
		t.Run("xGreaterThan20", func(t *testing.T) {
			got := callLoopConditionsOftenEnough(25, 10)
			want := 0
			if got != want {
				t.Errorf("callLoopConditionsOftenEnough(%d, %d) = %d, want %d", 25, 10, got, want)
			}
		})
		t.Run("xWithinRange_yLessThan20", func(t *testing.T) {
			got := callLoopConditionsOftenEnough(15, 10)
			want := 15
			if got != want {
				t.Errorf("callLoopConditionsOftenEnough(%d, %d) = %d, want %d", 15, 10, got, want)
			}
		})
		t.Run("xWithinRange_yGreaterThan20", func(t *testing.T) {
			got := callLoopConditionsOftenEnough(15, 30)
			want := 22
			if got != want {
				t.Errorf("callLoopConditionsOftenEnough(%d, %d) = %d, want %d", 15, 30, got, want)
			}
		})
		t.Run("xGreaterThan20AfterLoop", func(t *testing.T) {
			got := callLoopConditionsOftenEnough(21, 30)
			want := 10
			if got != want {
				t.Errorf("callLoopConditionsOftenEnough(%d, %d) = %d, want %d", 21, 30, got, want)
			}
		})
	}
	```
2024/06/06 11:01:23 $ go mod tidy
2024/06/06 11:01:23 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestCallLoopConditionsOftenEnough
=== RUN   TestCallLoopConditionsOftenEnough/xLessThan10
=== RUN   TestCallLoopConditionsOftenEnough/xGreaterThan20
=== RUN   TestCallLoopConditionsOftenEnough/xWithinRange_yLessThan20
=== RUN   TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20
    callLoopConditionsOftenEnough_test.go:31: callLoopConditionsOftenEnough(15, 30) = 12, want 22
=== RUN   TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop
    callLoopConditionsOftenEnough_test.go:38: callLoopConditionsOftenEnough(21, 30) = 0, want 10
--- FAIL: TestCallLoopConditionsOftenEnough (0.00s)
    --- PASS: TestCallLoopConditionsOftenEnough/xLessThan10 (0.00s)
    --- PASS: TestCallLoopConditionsOftenEnough/xGreaterThan20 (0.00s)
    --- PASS: TestCallLoopConditionsOftenEnough/xWithinRange_yLessThan20 (0.00s)
    --- FAIL: TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20 (0.00s)
    --- FAIL: TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop (0.00s)
FAIL
coverage: 3.8% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20 (0.00s)
    callLoopConditionsOftenEnough_test.go:31: callLoopConditionsOftenEnough(15, 30) = 12, want 22
    --- FAIL: TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20 (0.00s)

=== FAIL: . TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop (0.00s)
    callLoopConditionsOftenEnough_test.go:38: callLoopConditionsOftenEnough(21, 30) = 0, want 10
    --- FAIL: TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop (0.00s)

=== FAIL: . TestCallLoopConditionsOftenEnough (0.00s)

DONE 6 tests, 3 failures in 0.367s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:01:23 Executes tests with 4 coverage objects
2024/06/06 11:01:23 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "cascadingIfElse.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func cascadingIfElse(i int) int {
		if i == 1 {
			return 2
		} else if i == 3 {
			return 4
		} else {
			return 5
		}
	}
	```
2024/06/06 11:01:27 Model "openrouter/google/gemini-flash-1.5" responded (4064 ms) with:
	```golang
	package light

	import "testing"

	func TestCascadingIfElse(t *testing.T) {
		type args struct {
			i int
		}
		tests := []struct {
			name string
			args args
			want int
		}{
			{
				name: "case 1",
				args: args{i: 1},
				want: 2,
			},
			{
				name: "case 3",
				args: args{i: 3},
				want: 4,
			},
			{
				name: "case other",
				args: args{i: 5},
				want: 5,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := cascadingIfElse(tt.args.i); got != tt.want {
					t.Errorf("cascadingIfElse() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:01:27 $ go mod tidy
2024/06/06 11:01:27 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestCascadingIfElse
=== RUN   TestCascadingIfElse/case_1
=== RUN   TestCascadingIfElse/case_3
=== RUN   TestCascadingIfElse/case_other
--- PASS: TestCascadingIfElse (0.00s)
    --- PASS: TestCascadingIfElse/case_1 (0.00s)
    --- PASS: TestCascadingIfElse/case_3 (0.00s)
    --- PASS: TestCascadingIfElse/case_other (0.00s)
PASS
coverage: 2.4% of statements
ok  	light	0.005s	coverage: 2.4% of statements

DONE 4 tests in 0.347s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 11:01:28 Executes tests with 3 coverage objects
2024/06/06 11:01:28 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "collatzCalculator.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func computeStepCount(start int) (int, error) {
		if start <= 0 {
			return 0, errors.New("Only positive integers are allowed")
		}
		if start == 1 {
			return 0, nil
		}
		var next int

		if start%2 == 0 {
			next = start / 2
		} else {
			next = 3*start + 1
		}

		n, err := computeStepCount(next)
		if err != nil {
			return 0, err
		}

		return 1 + n, nil
	}
	```
2024/06/06 11:01:32 Model "openrouter/google/gemini-flash-1.5" responded (4415 ms) with:
	```golang
	package light

	import (
		"errors"
		"testing"
	)

	func TestComputeStepCount(t *testing.T) {
		t.Run("Zero", func(t *testing.T) {
			_, err := computeStepCount(0)
			if err == nil {
				t.Error("Expected error for zero input")
			}
		})

		t.Run("Negative", func(t *testing.T) {
			_, err := computeStepCount(-1)
			if err == nil {
				t.Error("Expected error for negative input")
			}
		})

		t.Run("One", func(t *testing.T) {
			steps, err := computeStepCount(1)
			if err != nil {
				t.Errorf("Unexpected error: %v", err)
			}
			if steps != 0 {
				t.Errorf("Expected step count of 0 for 1, got %d", steps)
			}
		})

		t.Run("Even", func(t *testing.T) {
			steps, err := computeStepCount(4)
			if err != nil {
				t.Errorf("Unexpected error: %v", err)
			}
			if steps != 2 {
				t.Errorf("Expected step count of 2 for 4, got %d", steps)
			}
		})

		t.Run("Odd", func(t *testing.T) {
			steps, err := computeStepCount(5)
			if err != nil {
				t.Errorf("Unexpected error: %v", err)
			}
			if steps != 5 {
				t.Errorf("Expected step count of 5 for 5, got %d", steps)
			}
		})
	}
	```
2024/06/06 11:01:32 $ go mod tidy
2024/06/06 11:01:32 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
# light [light.test]
./collatzCalculator_test.go:4:2: "errors" imported and not used
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./collatzCalculator_test.go:4:2: "errors" imported and not used

DONE 0 tests, 1 error in 0.145s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:01:33 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "conditionsAnd.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func conditionsAnd(x rune, y rune) bool {
		if x == 'A' && y == 'B' {
			return true
		}

		return false
	}
	```
2024/06/06 11:01:35 Model "openrouter/google/gemini-flash-1.5" responded (2857 ms) with:
	```golang
	package light

	import "testing"

	func TestConditionsAnd(t *testing.T) {
		type args struct {
			x rune
			y rune
		}
		tests := []struct {
			name string
			args args
			want bool
		}{
			{"A and B", args{'A', 'B'}, true},
			{"A and C", args{'A', 'C'}, false},
			{"C and B", args{'C', 'B'}, false},
			{"C and C", args{'C', 'C'}, false},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := conditionsAnd(tt.args.x, tt.args.y); got != tt.want {
					t.Errorf("conditionsAnd() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:01:35 $ go mod tidy
2024/06/06 11:01:35 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestConditionsAnd
=== RUN   TestConditionsAnd/A_and_B
=== RUN   TestConditionsAnd/A_and_C
=== RUN   TestConditionsAnd/C_and_B
=== RUN   TestConditionsAnd/C_and_C
--- PASS: TestConditionsAnd (0.00s)
    --- PASS: TestConditionsAnd/A_and_B (0.00s)
    --- PASS: TestConditionsAnd/A_and_C (0.00s)
    --- PASS: TestConditionsAnd/C_and_B (0.00s)
    --- PASS: TestConditionsAnd/C_and_C (0.00s)
PASS
coverage: 1.4% of statements
ok  	light	0.005s	coverage: 1.4% of statements

DONE 5 tests in 0.355s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 11:01:36 Executes tests with 2 coverage objects
2024/06/06 11:01:36 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "equilibriumIndices.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "strconv"

	func equilibriumIndices(sequence []int) (indexList string) {
		// Determine total sum.
		var totalSum int
		for _, n := range sequence {
			totalSum += n
		}
		// Compare running sum to remaining sum to find equilibrium indices.
		var runningSum int
		for i, n := range sequence {
			if totalSum-runningSum-n == runningSum {
				indexList += strconv.Itoa(i) + ";"
			}
			runningSum += n
		}

		return indexList
	}
	```
2024/06/06 11:01:42 Model "openrouter/google/gemini-flash-1.5" responded (5761 ms) with:
	```golang
	package light

	import (
		"reflect"
		"testing"
	)

	func TestEquilibriumIndices(t *testing.T) {
		type args struct {
			sequence []int
		}
		tests := []struct {
			name string
			args args
			want string
		}{
			{
				name: "Empty slice",
				args: args{
					sequence: []int{},
				},
				want: "",
			},
			{
				name: "Single element slice",
				args: args{
					sequence: []int{1},
				},
				want: "",
			},
			{
				name: "No equilibrium indices",
				args: args{
					sequence: []int{1, 2, 3, 4, 5},
				},
				want: "",
			},
			{
				name: "One equilibrium index",
				args: args{
					sequence: []int{-1, 3, -4, 5, 1, -6, 2, 1},
				},
				want: "3;",
			},
			{
				name: "Multiple equilibrium indices",
				args: args{
					sequence: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
				},
				want: "4;5;",
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := equilibriumIndices(tt.args.sequence); got != tt.want {
					t.Errorf("equilibriumIndices() = %v, want %v", got, tt.want)
				}
			})
		}
	}

	func TestEquilibriumIndices_CodeCoverage(t *testing.T) {
		// Test case to cover the branch for adding an index to the result string
		sequence := []int{-1, 3, -4, 5, 1, -6, 2, 1}
		result := equilibriumIndices(sequence)
		if !reflect.DeepEqual(result, "3;") {
			t.Errorf("equilibriumIndices() = %v, want %v", result, "3;")
		}
		// Test case where the result string is empty
		emptySequence := []int{1, 2, 3, 4, 5}
		result = equilibriumIndices(emptySequence)
		if !reflect.DeepEqual(result, "") {
			t.Errorf("equilibriumIndices() = %v, want %v", result, "")
		}
	}
	```
2024/06/06 11:01:42 $ go mod tidy
2024/06/06 11:01:42 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestEquilibriumIndices
=== RUN   TestEquilibriumIndices/Empty_slice
=== RUN   TestEquilibriumIndices/Single_element_slice
    equilibriumIndices_test.go:56: equilibriumIndices() = 0;, want 
=== RUN   TestEquilibriumIndices/No_equilibrium_indices
=== RUN   TestEquilibriumIndices/One_equilibrium_index
    equilibriumIndices_test.go:56: equilibriumIndices() = 1;3;7;, want 3;
=== RUN   TestEquilibriumIndices/Multiple_equilibrium_indices
    equilibriumIndices_test.go:56: equilibriumIndices() = , want 4;5;
--- FAIL: TestEquilibriumIndices (0.00s)
    --- PASS: TestEquilibriumIndices/Empty_slice (0.00s)
    --- FAIL: TestEquilibriumIndices/Single_element_slice (0.00s)
    --- PASS: TestEquilibriumIndices/No_equilibrium_indices (0.00s)
    --- FAIL: TestEquilibriumIndices/One_equilibrium_index (0.00s)
    --- FAIL: TestEquilibriumIndices/Multiple_equilibrium_indices (0.00s)
=== RUN   TestEquilibriumIndices_CodeCoverage
    equilibriumIndices_test.go:67: equilibriumIndices() = 1;3;7;, want 3;
--- FAIL: TestEquilibriumIndices_CodeCoverage (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestEquilibriumIndices/Single_element_slice (0.00s)
    equilibriumIndices_test.go:56: equilibriumIndices() = 0;, want 
    --- FAIL: TestEquilibriumIndices/Single_element_slice (0.00s)

=== FAIL: . TestEquilibriumIndices/One_equilibrium_index (0.00s)
    equilibriumIndices_test.go:56: equilibriumIndices() = 1;3;7;, want 3;
    --- FAIL: TestEquilibriumIndices/One_equilibrium_index (0.00s)

=== FAIL: . TestEquilibriumIndices/Multiple_equilibrium_indices (0.00s)
    equilibriumIndices_test.go:56: equilibriumIndices() = , want 4;5;
    --- FAIL: TestEquilibriumIndices/Multiple_equilibrium_indices (0.00s)

=== FAIL: . TestEquilibriumIndices (0.00s)

=== FAIL: . TestEquilibriumIndices_CodeCoverage (0.00s)
    equilibriumIndices_test.go:67: equilibriumIndices() = 1;3;7;, want 3;

DONE 7 tests, 5 failures in 0.354s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:01:42 Executes tests with 4 coverage objects
2024/06/06 11:01:42 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "forLoop.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func forLoop(s int) int {
		sum := 0
		for i := 0; i < s; i++ {
			sum = sum + i
		}
		for i := 0; i < s; i++ {
			sum = sum + i
		}

		return sum
	}
	```
2024/06/06 11:01:45 Model "openrouter/google/gemini-flash-1.5" responded (2662 ms) with:
	```golang
	package light

	import "testing"

	func TestForLoop(t *testing.T) {
		type args struct {
			s int
		}
		tests := []struct {
			name string
			args args
			want int
		}{
			{"Zero", args{0}, 0},
			{"One", args{1}, 1},
			{"Two", args{2}, 6},
			{"Five", args{5}, 30},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := forLoop(tt.args.s); got != tt.want {
					t.Errorf("forLoop() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:01:45 $ go mod tidy
2024/06/06 11:01:45 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestForLoop
=== RUN   TestForLoop/Zero
=== RUN   TestForLoop/One
    forLoop_test.go:22: forLoop() = 0, want 1
=== RUN   TestForLoop/Two
    forLoop_test.go:22: forLoop() = 2, want 6
=== RUN   TestForLoop/Five
    forLoop_test.go:22: forLoop() = 20, want 30
--- FAIL: TestForLoop (0.00s)
    --- PASS: TestForLoop/Zero (0.00s)
    --- FAIL: TestForLoop/One (0.00s)
    --- FAIL: TestForLoop/Two (0.00s)
    --- FAIL: TestForLoop/Five (0.00s)
FAIL
coverage: 2.8% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestForLoop/One (0.00s)
    forLoop_test.go:22: forLoop() = 0, want 1
    --- FAIL: TestForLoop/One (0.00s)

=== FAIL: . TestForLoop/Two (0.00s)
    forLoop_test.go:22: forLoop() = 2, want 6
    --- FAIL: TestForLoop/Two (0.00s)

=== FAIL: . TestForLoop/Five (0.00s)
    forLoop_test.go:22: forLoop() = 20, want 30
    --- FAIL: TestForLoop/Five (0.00s)

=== FAIL: . TestForLoop (0.00s)

DONE 5 tests, 4 failures in 0.342s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:01:45 Executes tests with 3 coverage objects
2024/06/06 11:01:45 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "jacobiSymbol.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import (
		"fmt"
	)

	func jacobiSymbol(k, n uint64) (int, error) {
		if k < 0 || n%2 == 0 {
			return 0, fmt.Errorf("Invalid value. k = %d, n = %d", k, n)
		}
		k %= n
		jacobi := 1
		for k > 0 {
			for k%2 == 0 {
				k /= 2
				r := n % 8
				if r == 3 || r == 5 {
					jacobi = -jacobi
				}
			}
			temp := n
			n = k
			k = temp
			if k%4 == 3 && n%4 == 3 {
				jacobi = -jacobi
			}
			k %= n
		}
		if n == 1 {
			return jacobi, nil
		}
		return 0, nil
	}
	```
2024/06/06 11:01:50 Model "openrouter/google/gemini-flash-1.5" responded (4328 ms) with:
	```golang
	package light

	import (
		"testing"
	)

	func TestJacobiSymbol(t *testing.T) {
		type args struct {
			k uint64
			n uint64
		}
		tests := []struct {
			name    string
			args    args
			want    int
			wantErr bool
		}{
			{"ValidInput1", args{1, 7}, 1, false},
			{"ValidInput2", args{2, 7}, 1, false},
			{"ValidInput3", args{3, 7}, 6, false},
			{"ValidInput4", args{5, 7}, 5, false},
			{"ValidInput5", args{6, 7}, 2, false},
			{"ValidInput6", args{10, 7}, 2, false},
			{"InvalidInput1", args{-1, 7}, 0, true},
			{"InvalidInput2", args{1, 8}, 0, true},
			{"InvalidInput3", args{1, 0}, 0, true},
			{"ZeroInput", args{0, 7}, 0, true},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				got, err := jacobiSymbol(tt.args.k, tt.args.n)
				if (err != nil) != tt.wantErr {
					t.Errorf("jacobiSymbol() error = %v, wantErr %v", err, tt.wantErr)
					return
				}
				if got != tt.want {
					t.Errorf("jacobiSymbol() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:01:50 $ go mod tidy
2024/06/06 11:01:50 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
# light [light.test]
./jacobiSymbol_test.go:24:26: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./jacobiSymbol_test.go:24:26: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)

DONE 0 tests, 1 error in 0.181s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:01:50 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "klarnerRadoSequence.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "math"

	func initialiseKlarnerRadoSequence(limit int) []int {
		result := make([]int, limit+1)
		i2, i3 := 1, 1
		m2, m3 := 1, 1

		for i := 1; i <= limit; i++ {
			minimum := int(math.Min(float64(m2), float64(m3)))
			result[i] = minimum
			if m2 == minimum {
				m2 = result[i2]*2 + 1
				i2 += 1
			}
			if m3 == minimum {
				m3 = result[i3]*3 + 1
				i3 += 1
			}
		}

		return result
	}
	```
2024/06/06 11:01:55 Model "openrouter/google/gemini-flash-1.5" responded (4713 ms) with:
	```golang
	package light

	import "testing"

	func TestInitialiseKlarnerRadoSequence(t *testing.T) {
		t.Run("TestInitialiseKlarnerRadoSequence_Empty", func(t *testing.T) {
			result := initialiseKlarnerRadoSequence(0)
			expected := []int{0}
			if !compareSlices(result, expected) {
				t.Errorf("Expected: %v, Got: %v", expected, result)
			}
		})

		t.Run("TestInitialiseKlarnerRadoSequence_Small", func(t *testing.T) {
			result := initialiseKlarnerRadoSequence(5)
			expected := []int{0, 1, 1, 2, 1, 2}
			if !compareSlices(result, expected) {
				t.Errorf("Expected: %v, Got: %v", expected, result)
			}
		})

		t.Run("TestInitialiseKlarnerRadoSequence_Large", func(t *testing.T) {
			result := initialiseKlarnerRadoSequence(20)
			expected := []int{0, 1, 1, 2, 1, 2, 1, 3, 2, 1, 2, 3, 1, 2, 1, 4, 2, 1, 2, 3}
			if !compareSlices(result, expected) {
				t.Errorf("Expected: %v, Got: %v", expected, result)
			}
		})
	}

	func compareSlices(a, b []int) bool {
		if len(a) != len(b) {
			return false
		}
		for i := range a {
			if a[i] != b[i] {
				return false
			}
		}
		return true
	}
	```
2024/06/06 11:01:55 $ go mod tidy
2024/06/06 11:01:55 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestInitialiseKlarnerRadoSequence
=== RUN   TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Empty
=== RUN   TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small
    klarnerRadoSequence_test.go:18: Expected: [0 1 1 2 1 2], Got: [0 1 3 4 7 9]
=== RUN   TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large
    klarnerRadoSequence_test.go:26: Expected: [0 1 1 2 1 2 1 3 2 1 2 3 1 2 1 4 2 1 2 3], Got: [0 1 3 4 7 9 10 13 15 19 21 22 27 28 31 39 40 43 45 46 55]
--- FAIL: TestInitialiseKlarnerRadoSequence (0.00s)
    --- PASS: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Empty (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large (0.00s)
FAIL
coverage: 6.2% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small (0.00s)
    klarnerRadoSequence_test.go:18: Expected: [0 1 1 2 1 2], Got: [0 1 3 4 7 9]
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small (0.00s)

=== FAIL: . TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large (0.00s)
    klarnerRadoSequence_test.go:26: Expected: [0 1 1 2 1 2 1 3 2 1 2 3 1 2 1 4 2 1 2 3], Got: [0 1 3 4 7 9 10 13 15 19 21 22 27 28 31 39 40 43 45 46 55]
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large (0.00s)

=== FAIL: . TestInitialiseKlarnerRadoSequence (0.00s)

DONE 4 tests, 3 failures in 0.347s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:01:56 Executes tests with 3 coverage objects
2024/06/06 11:01:56 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "knapsack.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "math"

	type Item struct {
		weight int
		value  int
	}

	func maximumValue(maximumWeight int, items []Item) int {
		knapsack := make([][]int, len(items)+1)
		for item := range knapsack {
			knapsack[item] = make([]int, maximumWeight+1)
			for weight := range knapsack[item] {
				knapsack[item][weight] = 0 // Return 0 if not filled
			}
		}

		for item := 0; item <= len(items); item++ {
			for weight := 0; weight <= maximumWeight; weight++ {
				if item == 0 || weight == 0 {
					knapsack[item][weight] = 0
				} else if items[item-1].weight > weight {
					knapsack[item][weight] = knapsack[item-1][weight]
				} else {
					itemValue := items[item-1].value
					itemWeight := items[item-1].weight
					knapsack[item][weight] = int(math.Max(float64(itemValue+knapsack[item-1][weight-itemWeight]), float64(knapsack[item-1][weight])))
				}
			}
		}

		return knapsack[len(items)][maximumWeight]
	}
	```
2024/06/06 11:02:01 Model "openrouter/google/gemini-flash-1.5" responded (5502 ms) with:
	```golang
	package light

	import "testing"

	func TestMaximumValue(t *testing.T) {
		type args struct {
			maximumWeight int
			items        []Item
		}
		tests := []struct {
			name string
			args args
			want int
		}{
			{
				name: "Empty input",
				args: args{
					maximumWeight: 10,
					items:        []Item{},
				},
				want: 0,
			},
			{
				name: "Single item fits",
				args: args{
					maximumWeight: 10,
					items:        []Item{{weight: 5, value: 10}},
				},
				want: 10,
			},
			{
				name: "Single item doesn't fit",
				args: args{
					maximumWeight: 5,
					items:        []Item{{weight: 10, value: 10}},
				},
				want: 0,
			},
			{
				name: "Multiple items, some fit",
				args: args{
					maximumWeight: 10,
					items:        []Item{{weight: 3, value: 6}, {weight: 4, value: 10}, {weight: 5, value: 12}},
				},
				want: 22,
			},
			{
				name: "Multiple items, all fit",
				args: args{
					maximumWeight: 10,
					items:        []Item{{weight: 3, value: 6}, {weight: 4, value: 10}, {weight: 5, value: 12}, {weight: 1, value: 2}},
				},
				want: 28,
			},
			{
				name: "Multiple items, some don't fit",
				args: args{
					maximumWeight: 10,
					items:        []Item{{weight: 15, value: 20}, {weight: 8, value: 12}, {weight: 6, value: 15}},
				},
				want: 15,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := maximumValue(tt.args.maximumWeight, tt.args.items); got != tt.want {
					t.Errorf("maximumValue() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:02:01 $ go mod tidy
2024/06/06 11:02:01 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestMaximumValue
=== RUN   TestMaximumValue/Empty_input
=== RUN   TestMaximumValue/Single_item_fits
=== RUN   TestMaximumValue/Single_item_doesn't_fit
=== RUN   TestMaximumValue/Multiple_items,_some_fit
=== RUN   TestMaximumValue/Multiple_items,_all_fit
    knapsack_test.go:67: maximumValue() = 24, want 28
=== RUN   TestMaximumValue/Multiple_items,_some_don't_fit
--- FAIL: TestMaximumValue (0.00s)
    --- PASS: TestMaximumValue/Empty_input (0.00s)
    --- PASS: TestMaximumValue/Single_item_fits (0.00s)
    --- PASS: TestMaximumValue/Single_item_doesn't_fit (0.00s)
    --- PASS: TestMaximumValue/Multiple_items,_some_fit (0.00s)
    --- FAIL: TestMaximumValue/Multiple_items,_all_fit (0.00s)
    --- PASS: TestMaximumValue/Multiple_items,_some_don't_fit (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestMaximumValue/Multiple_items,_all_fit (0.00s)
    knapsack_test.go:67: maximumValue() = 24, want 28
    --- FAIL: TestMaximumValue/Multiple_items,_all_fit (0.00s)

=== FAIL: . TestMaximumValue (0.00s)

DONE 7 tests, 2 failures in 0.355s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:02:02 Executes tests with 5 coverage objects
2024/06/06 11:02:02 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "largestProperDivisor.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "fmt"

	func largestProperDivisor(aNumber int) (int, error) {
		if aNumber < 1 {
			return 0, fmt.Errorf("Argument must be >= 1: %d", aNumber)
		}

		if (aNumber & 1) == 0 {
			return aNumber >> 1, nil
		}

		for p := 3; p*p <= aNumber; p += 2 {
			if aNumber%p == 0 {
				return aNumber / p, nil
			}
		}

		return 1, nil
	}
	```
2024/06/06 11:02:06 Model "openrouter/google/gemini-flash-1.5" responded (4568 ms) with:
	```golang
	package light

	import (
		"testing"
	)

	func TestLargestProperDivisor(t *testing.T) {
		t.Run("Error case - zero input", func(t *testing.T) {
			_, err := largestProperDivisor(0)
			if err == nil {
				t.Error("Expected error, got nil")
			}
		})

		t.Run("Error case - negative input", func(t *testing.T) {
			_, err := largestProperDivisor(-1)
			if err == nil {
				t.Error("Expected error, got nil")
			}
		})

		t.Run("Even number input - should return half", func(t *testing.T) {
			result, err := largestProperDivisor(12)
			if err != nil {
				t.Errorf("Unexpected error: %v", err)
			}
			if result != 6 {
				t.Errorf("Expected 6, got %d", result)
			}
		})

		t.Run("Odd number input - should return the largest proper divisor", func(t *testing.T) {
			result, err := largestProperDivisor(21)
			if err != nil {
				t.Errorf("Unexpected error: %v", err)
			}
			if result != 7 {
				t.Errorf("Expected 7, got %d", result)
			}
		})

		t.Run("Prime number input", func(t *testing.T) {
			result, err := largestProperDivisor(17)
			if err != nil {
				t.Errorf("Unexpected error: %v", err)
			}
			if result != 1 {
				t.Errorf("Expected 1, got %d", result)
			}
		})
	}

	```
2024/06/06 11:02:06 $ go mod tidy
2024/06/06 11:02:06 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestLargestProperDivisor
=== RUN   TestLargestProperDivisor/Error_case_-_zero_input
=== RUN   TestLargestProperDivisor/Error_case_-_negative_input
=== RUN   TestLargestProperDivisor/Even_number_input_-_should_return_half
=== RUN   TestLargestProperDivisor/Odd_number_input_-_should_return_the_largest_proper_divisor
=== RUN   TestLargestProperDivisor/Prime_number_input
--- PASS: TestLargestProperDivisor (0.00s)
    --- PASS: TestLargestProperDivisor/Error_case_-_zero_input (0.00s)
    --- PASS: TestLargestProperDivisor/Error_case_-_negative_input (0.00s)
    --- PASS: TestLargestProperDivisor/Even_number_input_-_should_return_half (0.00s)
    --- PASS: TestLargestProperDivisor/Odd_number_input_-_should_return_the_largest_proper_divisor (0.00s)
    --- PASS: TestLargestProperDivisor/Prime_number_input (0.00s)
PASS
coverage: 3.8% of statements
ok  	light	0.005s	coverage: 3.8% of statements

DONE 6 tests in 0.350s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 11:02:07 Executes tests with 4 coverage objects
2024/06/06 11:02:07 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "magicSquareOdd.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func magicSquareOdd(base int) ([][]int, error) {
		if base%2 == 0 || base < 3 {
			return nil, errors.New("base must be odd and > 2")
		}

		grid := make([][]int, base)
		for i := range grid {
			grid[i] = make([]int, base)
		}
		r, number := 0, 0
		size := base * base

		c := base / 2
		for number < size {
			number++
			grid[r][c] = number
			if r == 0 {
				if c == base-1 {
					r++
				} else {
					r = base - 1
					c++
				}
			} else {
				if c == base-1 {
					r--
					c = 0
				} else {
					if grid[r-1][c+1] == 0 {
						r--
						c++
					} else {
						r++
					}
				}
			}
		}

		return grid, nil
	}
	```
2024/06/06 11:02:11 Model "openrouter/google/gemini-flash-1.5" responded (4252 ms) with:
	```golang
	package light

	import (
		"testing"
	)

	func TestMagicSquareOdd(t *testing.T) {
		t.Run("ValidOddBase", func(t *testing.T) {
			grid, err := magicSquareOdd(3)
			if err != nil {
				t.Errorf("Unexpected error: %v", err)
			}
			if len(grid) != 3 || len(grid[0]) != 3 {
				t.Errorf("Invalid grid size: %v", grid)
			}
			expectedSum := 15
			for i := 0; i < 3; i++ {
				rowSum := 0
				colSum := 0
				for j := 0; j < 3; j++ {
					rowSum += grid[i][j]
					colSum += grid[j][i]
				}
				if rowSum != expectedSum || colSum != expectedSum {
					t.Errorf("Row or Column Sum mismatch: %v", grid)
				}
			}
			diagSum1 := 0
			diagSum2 := 0
			for i := 0; i < 3; i++ {
				diagSum1 += grid[i][i]
				diagSum2 += grid[i][2-i]
			}
			if diagSum1 != expectedSum || diagSum2 != expectedSum {
				t.Errorf("Diagonal Sum mismatch: %v", grid)
			}
		})

		t.Run("EvenBase", func(t *testing.T) {
			_, err := magicSquareOdd(4)
			if err == nil {
				t.Error("Expected error for even base, got nil")
			}
		})

		t.Run("BaseLessThan3", func(t *testing.T) {
			_, err := magicSquareOdd(2)
			if err == nil {
				t.Error("Expected error for base less than 3, got nil")
			}
		})
	}
	```
2024/06/06 11:02:11 $ go mod tidy
2024/06/06 11:02:11 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestMagicSquareOdd
=== RUN   TestMagicSquareOdd/ValidOddBase
=== RUN   TestMagicSquareOdd/EvenBase
=== RUN   TestMagicSquareOdd/BaseLessThan3
--- PASS: TestMagicSquareOdd (0.00s)
    --- PASS: TestMagicSquareOdd/ValidOddBase (0.00s)
    --- PASS: TestMagicSquareOdd/EvenBase (0.00s)
    --- PASS: TestMagicSquareOdd/BaseLessThan3 (0.00s)
PASS
coverage: 11.4% of statements
ok  	light	0.005s	coverage: 11.4% of statements

DONE 4 tests in 0.357s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 11:02:12 Executes tests with 8 coverage objects
2024/06/06 11:02:12 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "matchBytes.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func matchBytes(s1 []byte, s2 []byte) bool {
		for i := 0; i < len(s1); i++ {
			c1 := s1[i]
			c2 := s2[i]

			if c1 != c2 {
				c1 |= 'a' - 'A'
				c2 |= 'a' - 'A'

				if c1 != c2 || c1 < 'a' || c1 > 'z' {
					return false
				}
			}
		}

		return true
	}
	```
2024/06/06 11:02:16 Model "openrouter/google/gemini-flash-1.5" responded (4751 ms) with:
	```golang
	package light

	import "testing"

	func TestMatchBytes(t *testing.T) {
		type args struct {
			s1 []byte
			s2 []byte
		}
		tests := []struct {
			name string
			args args
			want bool
		}{
			{
				name: "Equal",
				args: args{
					s1: []byte("abc"),
					s2: []byte("abc"),
				},
				want: true,
			},
			{
				name: "EqualCaseInsensitive",
				args: args{
					s1: []byte("AbC"),
					s2: []byte("abc"),
				},
				want: true,
			},
			{
				name: "Different",
				args: args{
					s1: []byte("abc"),
					s2: []byte("abd"),
				},
				want: false,
			},
			{
				name: "DifferentCaseInsensitive",
				args: args{
					s1: []byte("AbC"),
					s2: []byte("aBd"),
				},
				want: false,
			},
			{
				name: "DifferentLength",
				args: args{
					s1: []byte("abc"),
					s2: []byte("abcd"),
				},
				want: false,
			},
			{
				name: "Empty",
				args: args{
					s1: []byte(""),
					s2: []byte(""),
				},
				want: true,
			},
			{
				name: "OneEmpty",
				args: args{
					s1: []byte(""),
					s2: []byte("abc"),
				},
				want: false,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := matchBytes(tt.args.s1, tt.args.s2); got != tt.want {
					t.Errorf("matchBytes() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:02:16 $ go mod tidy
2024/06/06 11:02:16 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestMatchBytes
=== RUN   TestMatchBytes/Equal
=== RUN   TestMatchBytes/EqualCaseInsensitive
=== RUN   TestMatchBytes/Different
=== RUN   TestMatchBytes/DifferentCaseInsensitive
=== RUN   TestMatchBytes/DifferentLength
    matchBytes_test.go:75: matchBytes() = true, want false
=== RUN   TestMatchBytes/Empty
=== RUN   TestMatchBytes/OneEmpty
    matchBytes_test.go:75: matchBytes() = true, want false
--- FAIL: TestMatchBytes (0.00s)
    --- PASS: TestMatchBytes/Equal (0.00s)
    --- PASS: TestMatchBytes/EqualCaseInsensitive (0.00s)
    --- PASS: TestMatchBytes/Different (0.00s)
    --- PASS: TestMatchBytes/DifferentCaseInsensitive (0.00s)
    --- FAIL: TestMatchBytes/DifferentLength (0.00s)
    --- PASS: TestMatchBytes/Empty (0.00s)
    --- FAIL: TestMatchBytes/OneEmpty (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestMatchBytes/DifferentLength (0.00s)
    matchBytes_test.go:75: matchBytes() = true, want false
    --- FAIL: TestMatchBytes/DifferentLength (0.00s)

=== FAIL: . TestMatchBytes/OneEmpty (0.00s)
    matchBytes_test.go:75: matchBytes() = true, want false
    --- FAIL: TestMatchBytes/OneEmpty (0.00s)

=== FAIL: . TestMatchBytes (0.00s)

DONE 8 tests, 3 failures in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:02:17 Executes tests with 2 coverage objects
2024/06/06 11:02:17 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "pascalsTriangle.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func pascalsTriangle(rows int) ([][]int, error) {
		if rows < 0 {
			return nil, errors.New("Rows can't be negative!")
		}

		triangle := make([][]int, rows)

		for i := 0; i < rows; i++ {
			triangle[i] = make([]int, i+1)
			triangle[i][0] = 1
			for j := 1; j < i; j++ {
				triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j]
			}
			triangle[i][i] = 1
		}
		return triangle, nil
	}
	```
2024/06/06 11:02:23 Model "openrouter/google/gemini-flash-1.5" responded (5779 ms) with:
	```golang
	package light

	import (
		"testing"
	)

	func TestPascalsTriangle(t *testing.T) {
		t.Run("Valid Rows", func(t *testing.T) {
			triangle, err := pascalsTriangle(5)
			if err != nil {
				t.Errorf("Error creating triangle: %v", err)
			}
			expected := [][]int{
				{1},
				{1, 1},
				{1, 2, 1},
				{1, 3, 3, 1},
				{1, 4, 6, 4, 1},
			}
			if !compareTriangles(triangle, expected) {
				t.Errorf("Expected %v, got %v", expected, triangle)
			}
		})
		t.Run("Invalid Rows", func(t *testing.T) {
			triangle, err := pascalsTriangle(-1)
			if err == nil {
				t.Errorf("Expected error for negative rows, got nil")
			}
			if triangle != nil {
				t.Errorf("Expected nil for negative rows, got %v", triangle)
			}
		})
	}

	func compareTriangles(t1, t2 [][]int) bool {
		if len(t1) != len(t2) {
			return false
		}
		for i := 0; i < len(t1); i++ {
			if len(t1[i]) != len(t2[i]) {
				return false
			}
			for j := 0; j < len(t1[i]); j++ {
				if t1[i][j] != t2[i][j] {
					return false
				}
			}
		}
		return true
	}

	```
2024/06/06 11:02:23 $ go mod tidy
2024/06/06 11:02:23 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestPascalsTriangle
=== RUN   TestPascalsTriangle/Valid_Rows
=== RUN   TestPascalsTriangle/Invalid_Rows
--- PASS: TestPascalsTriangle (0.00s)
    --- PASS: TestPascalsTriangle/Valid_Rows (0.00s)
    --- PASS: TestPascalsTriangle/Invalid_Rows (0.00s)
PASS
coverage: 4.7% of statements
ok  	light	0.005s	coverage: 4.7% of statements

DONE 3 tests in 0.349s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 11:02:23 Executes tests with 4 coverage objects
2024/06/06 11:02:23 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "phoneNumber.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func extractDigits(dirtyNumber string) (cleanNumber string, err error) {
		for _, c := range dirtyNumber {
			if c == ' ' || c == '.' || c == '(' || c == ')' || c == '-' || c == '+' {
				// Remove spaces, dots, parentheses, hyphens and pluses.
				continue
			}
			if c == '-' || c == '@' || c == ':' || c == '!' {
				return "", errors.New("punctuations not permitted")
			}
			if c < '0' || c > '9' {
				return "", errors.New("letters not permitted")
			}
			cleanNumber += string(c)
		}

		return cleanNumber, nil
	}
	```
2024/06/06 11:02:33 Model "openrouter/google/gemini-flash-1.5" responded (9638 ms) with:
	```golang
	package light

	import (
		"testing"
	)

	func TestExtractDigits(t *testing.T) {
		type args struct {
			dirtyNumber string
		}
		tests := []struct {
			name    string
			args    args
			want    string
			wantErr bool
		}{
			{
				name:    "empty string",
				args:    args{dirtyNumber: ""},
				want:    "",
				wantErr: false,
			},
			{
				name:    "only digits",
				args:    args{dirtyNumber: "1234567890"},
				want:    "1234567890",
				wantErr: false,
			},
			{
				name:    "digits with spaces",
				args:    args{dirtyNumber: "123 456 7890"},
				want:    "1234567890",
				wantErr: false,
			},
			{
				name:    "digits with dots",
				args:    args{dirtyNumber: "123.456.7890"},
				want:    "1234567890",
				wantErr: false,
			},
			{
				name:    "digits with parentheses",
				args:    args{dirtyNumber: "(123) 456 7890"},
				want:    "1234567890",
				wantErr: false,
			},
			{
				name:    "digits with hyphens",
				args:    args{dirtyNumber: "123-456-7890"},
				want:    "1234567890",
				wantErr: false,
			},
			{
				name:    "digits with pluses",
				args:    args{dirtyNumber: "+1234567890"},
				want:    "1234567890",
				wantErr: false,
			},
			{
				name:    "digits with hyphens and pluses",
				args:    args{dirtyNumber: "+123-456-7890"},
				want:    "1234567890",
				wantErr: false,
			},
			{
				name:    "digits with hyphen",
				args:    args{dirtyNumber: "12-34567890"},
				want:    "",
				wantErr: true,
			},
			{
				name:    "digits with @",
				args:    args{dirtyNumber: "123@4567890"},
				want:    "",
				wantErr: true,
			},
			{
				name:    "digits with :",
				args:    args{dirtyNumber: "123:4567890"},
				want:    "",
				wantErr: true,
			},
			{
				name:    "digits with !",
				args:    args{dirtyNumber: "123!4567890"},
				want:    "",
				wantErr: true,
			},
			{
				name:    "digits with letters",
				args:    args{dirtyNumber: "123a4567890"},
				want:    "",
				wantErr: true,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				got, err := extractDigits(tt.args.dirtyNumber)
				if (err != nil) != tt.wantErr {
					t.Errorf("extractDigits() error = %v, wantErr %v", err, tt.wantErr)
					return
				}
				if got != tt.want {
					t.Errorf("extractDigits() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:02:33 $ go mod tidy
2024/06/06 11:02:33 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestExtractDigits
=== RUN   TestExtractDigits/empty_string
=== RUN   TestExtractDigits/only_digits
=== RUN   TestExtractDigits/digits_with_spaces
=== RUN   TestExtractDigits/digits_with_dots
=== RUN   TestExtractDigits/digits_with_parentheses
=== RUN   TestExtractDigits/digits_with_hyphens
=== RUN   TestExtractDigits/digits_with_pluses
=== RUN   TestExtractDigits/digits_with_hyphens_and_pluses
=== RUN   TestExtractDigits/digits_with_hyphen
    phoneNumber_test.go:100: extractDigits() error = <nil>, wantErr true
=== RUN   TestExtractDigits/digits_with_@
=== RUN   TestExtractDigits/digits_with_:
=== RUN   TestExtractDigits/digits_with_!
=== RUN   TestExtractDigits/digits_with_letters
--- FAIL: TestExtractDigits (0.00s)
    --- PASS: TestExtractDigits/empty_string (0.00s)
    --- PASS: TestExtractDigits/only_digits (0.00s)
    --- PASS: TestExtractDigits/digits_with_spaces (0.00s)
    --- PASS: TestExtractDigits/digits_with_dots (0.00s)
    --- PASS: TestExtractDigits/digits_with_parentheses (0.00s)
    --- PASS: TestExtractDigits/digits_with_hyphens (0.00s)
    --- PASS: TestExtractDigits/digits_with_pluses (0.00s)
    --- PASS: TestExtractDigits/digits_with_hyphens_and_pluses (0.00s)
    --- FAIL: TestExtractDigits/digits_with_hyphen (0.00s)
    --- PASS: TestExtractDigits/digits_with_@ (0.00s)
    --- PASS: TestExtractDigits/digits_with_: (0.00s)
    --- PASS: TestExtractDigits/digits_with_! (0.00s)
    --- PASS: TestExtractDigits/digits_with_letters (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestExtractDigits/digits_with_hyphen (0.00s)
    phoneNumber_test.go:100: extractDigits() error = <nil>, wantErr true
    --- FAIL: TestExtractDigits/digits_with_hyphen (0.00s)

=== FAIL: . TestExtractDigits (0.00s)

DONE 14 tests, 2 failures in 0.340s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:02:34 Executes tests with 5 coverage objects
2024/06/06 11:02:34 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "simpleIfElse.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func simpleIfElse(i int) int {
		if i == 1 {
			return 0
		} else {
			return 1
		}
	}
	```
2024/06/06 11:02:37 Model "openrouter/google/gemini-flash-1.5" responded (3251 ms) with:
	```golang
	package light

	import "testing"

	func TestSimpleIfElse(t *testing.T) {
		type args struct {
			i int
		}
		tests := []struct {
			name string
			args args
			want int
		}{
			{
				name: "i equals 1",
				args: args{i: 1},
				want: 0,
			},
			{
				name: "i not equals 1",
				args: args{i: 2},
				want: 1,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := simpleIfElse(tt.args.i); got != tt.want {
					t.Errorf("simpleIfElse() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:02:37 $ go mod tidy
2024/06/06 11:02:37 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestSimpleIfElse
=== RUN   TestSimpleIfElse/i_equals_1
=== RUN   TestSimpleIfElse/i_not_equals_1
--- PASS: TestSimpleIfElse (0.00s)
    --- PASS: TestSimpleIfElse/i_equals_1 (0.00s)
    --- PASS: TestSimpleIfElse/i_not_equals_1 (0.00s)
PASS
coverage: 1.4% of statements
ok  	light	0.005s	coverage: 1.4% of statements

DONE 3 tests in 0.352s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 11:02:38 Executes tests with 2 coverage objects
2024/06/06 11:02:38 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "simpleSwitchWithReturn.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func simpleSwitchWithReturn(i int) int {
		switch i {
		case 1:
			return 0
		default:
			return 1
		}
	}
	```
2024/06/06 11:02:41 Model "openrouter/google/gemini-flash-1.5" responded (3254 ms) with:
	```golang
	package light

	import "testing"

	func TestSimpleSwitchWithReturn(t *testing.T) {
		type args struct {
			i int
		}
		tests := []struct {
			name string
			args args
			want int
		}{
			{
				name: "case 1",
				args: args{i: 1},
				want: 0,
			},
			{
				name: "default case",
				args: args{i: 2},
				want: 1,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := simpleSwitchWithReturn(tt.args.i); got != tt.want {
					t.Errorf("simpleSwitchWithReturn() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:02:41 $ go mod tidy
2024/06/06 11:02:41 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestSimpleSwitchWithReturn
=== RUN   TestSimpleSwitchWithReturn/case_1
=== RUN   TestSimpleSwitchWithReturn/default_case
--- PASS: TestSimpleSwitchWithReturn (0.00s)
    --- PASS: TestSimpleSwitchWithReturn/case_1 (0.00s)
    --- PASS: TestSimpleSwitchWithReturn/default_case (0.00s)
PASS
coverage: 1.4% of statements
ok  	light	0.005s	coverage: 1.4% of statements

DONE 3 tests in 0.345s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 11:02:41 Executes tests with 3 coverage objects
2024/06/06 11:02:41 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "sort.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func isSorted(a []int) bool {
		i := 0
		for i < len(a)-1 && a[i] <= a[i+1] {
			i++
		}

		return i == len(a)-1
	}
	```
2024/06/06 11:02:46 Model "openrouter/google/gemini-flash-1.5" responded (4300 ms) with:
	```golang
	package light

	import "testing"

	func TestIsSorted(t *testing.T) {
		type args struct {
			a []int
		}
		tests := []struct {
			name string
			args args
			want bool
		}{
			{
				name: "empty",
				args: args{
					a: []int{},
				},
				want: true,
			},
			{
				name: "one element",
				args: args{
					a: []int{1},
				},
				want: true,
			},
			{
				name: "sorted",
				args: args{
					a: []int{1, 2, 3, 4, 5},
				},
				want: true,
			},
			{
				name: "not sorted",
				args: args{
					a: []int{1, 3, 2, 4, 5},
				},
				want: false,
			},
			{
				name: "unsorted with duplicates",
				args: args{
					a: []int{1, 3, 2, 4, 2},
				},
				want: false,
			},
			{
				name: "sorted with duplicates",
				args: args{
					a: []int{1, 2, 2, 3, 4},
				},
				want: true,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := isSorted(tt.args.a); got != tt.want {
					t.Errorf("isSorted() = %v, want %v", got, tt.want)
				}
			})
		}
	}

	```
2024/06/06 11:02:46 $ go mod tidy
2024/06/06 11:02:46 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestIsSorted
=== RUN   TestIsSorted/empty
    sort_test.go:60: isSorted() = false, want true
=== RUN   TestIsSorted/one_element
=== RUN   TestIsSorted/sorted
=== RUN   TestIsSorted/not_sorted
=== RUN   TestIsSorted/unsorted_with_duplicates
=== RUN   TestIsSorted/sorted_with_duplicates
--- FAIL: TestIsSorted (0.00s)
    --- FAIL: TestIsSorted/empty (0.00s)
    --- PASS: TestIsSorted/one_element (0.00s)
    --- PASS: TestIsSorted/sorted (0.00s)
    --- PASS: TestIsSorted/not_sorted (0.00s)
    --- PASS: TestIsSorted/unsorted_with_duplicates (0.00s)
    --- PASS: TestIsSorted/sorted_with_duplicates (0.00s)
FAIL
coverage: 1.9% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestIsSorted/empty (0.00s)
    sort_test.go:60: isSorted() = false, want true
    --- FAIL: TestIsSorted/empty (0.00s)

=== FAIL: . TestIsSorted (0.00s)

DONE 7 tests, 2 failures in 0.327s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:02:46 Executes tests with 2 coverage objects
2024/06/06 11:02:46 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "typeArrayAccess.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func typeArrayAccess(x []int) int {
		if x[0] == 123 {
			return x[0]
		}

		return 3
	}
	```
2024/06/06 11:02:50 Model "openrouter/google/gemini-flash-1.5" responded (3114 ms) with:
	```golang
	package light

	import "testing"

	func TestTypeArrayAccess(t *testing.T) {
		type args struct {
			x []int
		}
		tests := []struct {
			name string
			args args
			want int
		}{
			{
				name: "First element is 123",
				args: args{x: []int{123, 4, 5}},
				want: 123,
			},
			{
				name: "First element is not 123",
				args: args{x: []int{1, 2, 3}},
				want: 3,
			},
			{
				name: "Empty array",
				args: args{x: []int{}},
				want: 3,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := typeArrayAccess(tt.args.x); got != tt.want {
					t.Errorf("typeArrayAccess() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:02:50 $ go mod tidy
2024/06/06 11:02:50 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestTypeArrayAccess
=== RUN   TestTypeArrayAccess/First_element_is_123
=== RUN   TestTypeArrayAccess/First_element_is_not_123
=== RUN   TestTypeArrayAccess/Empty_array
--- FAIL: TestTypeArrayAccess (0.00s)
    --- PASS: TestTypeArrayAccess/First_element_is_123 (0.00s)
    --- PASS: TestTypeArrayAccess/First_element_is_not_123 (0.00s)
    --- FAIL: TestTypeArrayAccess/Empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 21 [running]:
testing.tRunner.func1.2({0x56b480, 0xc000158060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b480?, 0xc000158060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc000103040?)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess_test.go:32 +0xfa
testing.tRunner(0xc0001031e0, 0xc00010e310)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 18
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayAccess/Empty_array (0.00s)
    --- FAIL: TestTypeArrayAccess/Empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 21 [running]:
testing.tRunner.func1.2({0x56b480, 0xc000158060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b480?, 0xc000158060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc000103040?)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess_test.go:32 +0xfa
testing.tRunner(0xc0001031e0, 0xc00010e310)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 18
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayAccess (0.00s)

DONE 4 tests, 2 failures in 0.347s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:02:50 Executes tests with 0 coverage objects
2024/06/06 11:02:50 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "typeArrayConsecutiveAccess.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func typeArrayConsecutiveAccess(input []int) int {
		cnt := 0
		if input[0] == 0 {
			cnt++
		}
		if input[1] == 8 {
			cnt++
		}
		return cnt
	}
	```
2024/06/06 11:02:53 Model "openrouter/google/gemini-flash-1.5" responded (3491 ms) with:
	```golang
	package light

	import "testing"

	func TestTypeArrayConsecutiveAccess(t *testing.T) {
		type args struct {
			input []int
		}
		tests := []struct {
			name string
			args args
			want int
		}{
			{
				name: "Case 1: Both conditions met",
				args: args{input: []int{0, 8}},
				want: 2,
			},
			{
				name: "Case 2: First condition met",
				args: args{input: []int{0, 7}},
				want: 1,
			},
			{
				name: "Case 3: Second condition met",
				args: args{input: []int{1, 8}},
				want: 1,
			},
			{
				name: "Case 4: No conditions met",
				args: args{input: []int{1, 7}},
				want: 0,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := typeArrayConsecutiveAccess(tt.args.input); got != tt.want {
					t.Errorf("typeArrayConsecutiveAccess() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:02:53 $ go mod tidy
2024/06/06 11:02:53 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestTypeArrayConsecutiveAccess
=== RUN   TestTypeArrayConsecutiveAccess/Case_1:_Both_conditions_met
=== RUN   TestTypeArrayConsecutiveAccess/Case_2:_First_condition_met
=== RUN   TestTypeArrayConsecutiveAccess/Case_3:_Second_condition_met
=== RUN   TestTypeArrayConsecutiveAccess/Case_4:_No_conditions_met
--- PASS: TestTypeArrayConsecutiveAccess (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/Case_1:_Both_conditions_met (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/Case_2:_First_condition_met (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/Case_3:_Second_condition_met (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/Case_4:_No_conditions_met (0.00s)
PASS
coverage: 2.8% of statements
ok  	light	0.003s	coverage: 2.8% of statements

DONE 5 tests in 0.384s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 11:02:54 Executes tests with 3 coverage objects
2024/06/06 11:02:54 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "typeArrayMultidimensionalArrayLength.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func typeArrayMultidimensionalArrayLength(x [][]int) int {
		if len(x) == 2 {
			if len(x[0]) == 2 {
				return 2
			}

			return 1
		}

		return 0
	}
	```
2024/06/06 11:02:58 Model "openrouter/google/gemini-flash-1.5" responded (4249 ms) with:
	```golang
	package light

	import "testing"

	func TestTypeArrayMultidimensionalArrayLength(t *testing.T) {
		type args struct {
			x [][]int
		}
		tests := []struct {
			name string
			args args
			want int
		}{
			{
				name: "Len 2 by 2",
				args: args{
					x: [][]int{
						{1, 2},
						{3, 4},
					},
				},
				want: 2,
			},
			{
				name: "Len 2 by 1",
				args: args{
					x: [][]int{
						{1},
						{2},
					},
				},
				want: 1,
			},
			{
				name: "Len 1",
				args: args{
					x: [][]int{
						{1, 2, 3},
					},
				},
				want: 0,
			},
			{
				name: "Len 0",
				args: args{
					x: [][]int{},
				},
				want: 0,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := typeArrayMultidimensionalArrayLength(tt.args.x); got != tt.want {
					t.Errorf("typeArrayMultidimensionalArrayLength() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:02:58 $ go mod tidy
2024/06/06 11:02:58 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestTypeArrayMultidimensionalArrayLength
=== RUN   TestTypeArrayMultidimensionalArrayLength/Len_2_by_2
=== RUN   TestTypeArrayMultidimensionalArrayLength/Len_2_by_1
=== RUN   TestTypeArrayMultidimensionalArrayLength/Len_1
=== RUN   TestTypeArrayMultidimensionalArrayLength/Len_0
--- PASS: TestTypeArrayMultidimensionalArrayLength (0.00s)
    --- PASS: TestTypeArrayMultidimensionalArrayLength/Len_2_by_2 (0.00s)
    --- PASS: TestTypeArrayMultidimensionalArrayLength/Len_2_by_1 (0.00s)
    --- PASS: TestTypeArrayMultidimensionalArrayLength/Len_1 (0.00s)
    --- PASS: TestTypeArrayMultidimensionalArrayLength/Len_0 (0.00s)
PASS
coverage: 2.4% of statements
ok  	light	0.005s	coverage: 2.4% of statements

DONE 5 tests in 0.330s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 11:02:59 Executes tests with 3 coverage objects
2024/06/06 11:02:59 Querying model "openrouter/google/gemini-flash-1.5" with:
	Given the following Go code file "validateDate.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func validDate(day int, month int, year int) bool {
		monthDays := []int{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}

		if year < 1583 {
			return false
		}
		if month < 1 || month > 12 {
			return false
		}
		if day < 1 {
			return false
		}
		if month == 2 {
			if (year%400) != 0 && (year%4) == 0 {
				if day > 29 {
					return false
				}
			} else {
				if day > 28 {
					return false
				}
			}
		} else {
			if day > monthDays[month-1] {
				return false
			}
		}

		return true
	}
	```
2024/06/06 11:03:04 Model "openrouter/google/gemini-flash-1.5" responded (4653 ms) with:
	```golang
	package light

	import "testing"

	func TestValidDate(t *testing.T) {
		type args struct {
			day   int
			month int
			year  int
		}
		tests := []struct {
			name string
			args args
			want bool
		}{
			// Valid dates
			{"Valid date 1", args{1, 1, 2023}, true},
			{"Valid date 2", args{29, 2, 2000}, true},
			{"Valid date 3", args{31, 12, 1999}, true},
			{"Valid date 4", args{30, 4, 1600}, true},
			// Invalid dates
			{"Invalid date 1", args{32, 12, 2023}, false},
			{"Invalid date 2", args{30, 2, 2023}, false},
			{"Invalid date 3", args{29, 2, 1900}, false},
			{"Invalid date 4", args{0, 1, 2023}, false},
			{"Invalid date 5", args{1, 13, 2023}, false},
			{"Invalid date 6", args{1, 1, 1582}, false},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := validDate(tt.args.day, tt.args.month, tt.args.year); got != tt.want {
					t.Errorf("validDate() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 11:03:04 $ go mod tidy
2024/06/06 11:03:04 $ symflower test --language golang --workspace /tmp/eval-dev-quality3149083375/light --coverage-file /tmp/eval-dev-quality3149083375/light/coverage.json
=== RUN   TestValidDate
=== RUN   TestValidDate/Valid_date_1
=== RUN   TestValidDate/Valid_date_2
    validateDate_test.go:32: validDate() = false, want true
=== RUN   TestValidDate/Valid_date_3
=== RUN   TestValidDate/Valid_date_4
=== RUN   TestValidDate/Invalid_date_1
=== RUN   TestValidDate/Invalid_date_2
=== RUN   TestValidDate/Invalid_date_3
    validateDate_test.go:32: validDate() = true, want false
=== RUN   TestValidDate/Invalid_date_4
=== RUN   TestValidDate/Invalid_date_5
=== RUN   TestValidDate/Invalid_date_6
--- FAIL: TestValidDate (0.00s)
    --- PASS: TestValidDate/Valid_date_1 (0.00s)
    --- FAIL: TestValidDate/Valid_date_2 (0.00s)
    --- PASS: TestValidDate/Valid_date_3 (0.00s)
    --- PASS: TestValidDate/Valid_date_4 (0.00s)
    --- PASS: TestValidDate/Invalid_date_1 (0.00s)
    --- PASS: TestValidDate/Invalid_date_2 (0.00s)
    --- FAIL: TestValidDate/Invalid_date_3 (0.00s)
    --- PASS: TestValidDate/Invalid_date_4 (0.00s)
    --- PASS: TestValidDate/Invalid_date_5 (0.00s)
    --- PASS: TestValidDate/Invalid_date_6 (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestValidDate/Valid_date_2 (0.00s)
    validateDate_test.go:32: validDate() = false, want true
    --- FAIL: TestValidDate/Valid_date_2 (0.00s)

=== FAIL: . TestValidDate/Invalid_date_3 (0.00s)
    validateDate_test.go:32: validDate() = true, want false
    --- FAIL: TestValidDate/Invalid_date_3 (0.00s)

=== FAIL: . TestValidDate (0.00s)

DONE 11 tests, 3 failures in 0.340s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 11:03:04 Executes tests with 7 coverage objects
2024/06/06 11:03:04 Evaluated model "openrouter/google/gemini-flash-1.5" using language "golang" and repository "golang/light": encountered 13 problems: [exit status 1
=== RUN   TestHasBalancedBrackets
=== RUN   TestHasBalancedBrackets/Balanced_brackets
=== RUN   TestHasBalancedBrackets/Unbalanced_brackets_-_Closing_before_opening
=== RUN   TestHasBalancedBrackets/Unbalanced_brackets_-_More_opening_than_closing
=== RUN   TestHasBalancedBrackets/Empty_string
=== RUN   TestHasBalancedBrackets/Non-bracket_characters
=== RUN   TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets
    balancedBrackets_test.go:48: hasBalancedBrackets() = false, want true
--- FAIL: TestHasBalancedBrackets (0.00s)
    --- PASS: TestHasBalancedBrackets/Balanced_brackets (0.00s)
    --- PASS: TestHasBalancedBrackets/Unbalanced_brackets_-_Closing_before_opening (0.00s)
    --- PASS: TestHasBalancedBrackets/Unbalanced_brackets_-_More_opening_than_closing (0.00s)
    --- PASS: TestHasBalancedBrackets/Empty_string (0.00s)
    --- PASS: TestHasBalancedBrackets/Non-bracket_characters (0.00s)
    --- FAIL: TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets (0.00s)
FAIL
coverage: 4.7% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets (0.00s)
    balancedBrackets_test.go:48: hasBalancedBrackets() = false, want true
    --- FAIL: TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets (0.00s)

=== FAIL: . TestHasBalancedBrackets (0.00s)

DONE 7 tests, 2 failures in 0.321s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestHasBalancedBrackets
=== RUN   TestHasBalancedBrackets/Balanced_brackets
=== RUN   TestHasBalancedBrackets/Unbalanced_brackets_-_Closing_before_opening
=== RUN   TestHasBalancedBrackets/Unbalanced_brackets_-_More_opening_than_closing
=== RUN   TestHasBalancedBrackets/Empty_string
=== RUN   TestHasBalancedBrackets/Non-bracket_characters
=== RUN   TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets
    balancedBrackets_test.go:48: hasBalancedBrackets() = false, want true
--- FAIL: TestHasBalancedBrackets (0.00s)
    --- PASS: TestHasBalancedBrackets/Balanced_brackets (0.00s)
    --- PASS: TestHasBalancedBrackets/Unbalanced_brackets_-_Closing_before_opening (0.00s)
    --- PASS: TestHasBalancedBrackets/Unbalanced_brackets_-_More_opening_than_closing (0.00s)
    --- PASS: TestHasBalancedBrackets/Empty_string (0.00s)
    --- PASS: TestHasBalancedBrackets/Non-bracket_characters (0.00s)
    --- FAIL: TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets (0.00s)
FAIL
coverage: 4.7% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets (0.00s)
    balancedBrackets_test.go:48: hasBalancedBrackets() = false, want true
    --- FAIL: TestHasBalancedBrackets/Mixed_characters_with_balanced_brackets (0.00s)

=== FAIL: . TestHasBalancedBrackets (0.00s)

DONE 7 tests, 2 failures in 0.321s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestCallLoopConditionsOftenEnough
=== RUN   TestCallLoopConditionsOftenEnough/xLessThan10
=== RUN   TestCallLoopConditionsOftenEnough/xGreaterThan20
=== RUN   TestCallLoopConditionsOftenEnough/xWithinRange_yLessThan20
=== RUN   TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20
    callLoopConditionsOftenEnough_test.go:31: callLoopConditionsOftenEnough(15, 30) = 12, want 22
=== RUN   TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop
    callLoopConditionsOftenEnough_test.go:38: callLoopConditionsOftenEnough(21, 30) = 0, want 10
--- FAIL: TestCallLoopConditionsOftenEnough (0.00s)
    --- PASS: TestCallLoopConditionsOftenEnough/xLessThan10 (0.00s)
    --- PASS: TestCallLoopConditionsOftenEnough/xGreaterThan20 (0.00s)
    --- PASS: TestCallLoopConditionsOftenEnough/xWithinRange_yLessThan20 (0.00s)
    --- FAIL: TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20 (0.00s)
    --- FAIL: TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop (0.00s)
FAIL
coverage: 3.8% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20 (0.00s)
    callLoopConditionsOftenEnough_test.go:31: callLoopConditionsOftenEnough(15, 30) = 12, want 22
    --- FAIL: TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20 (0.00s)

=== FAIL: . TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop (0.00s)
    callLoopConditionsOftenEnough_test.go:38: callLoopConditionsOftenEnough(21, 30) = 0, want 10
    --- FAIL: TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop (0.00s)

=== FAIL: . TestCallLoopConditionsOftenEnough (0.00s)

DONE 6 tests, 3 failures in 0.367s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestCallLoopConditionsOftenEnough
=== RUN   TestCallLoopConditionsOftenEnough/xLessThan10
=== RUN   TestCallLoopConditionsOftenEnough/xGreaterThan20
=== RUN   TestCallLoopConditionsOftenEnough/xWithinRange_yLessThan20
=== RUN   TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20
    callLoopConditionsOftenEnough_test.go:31: callLoopConditionsOftenEnough(15, 30) = 12, want 22
=== RUN   TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop
    callLoopConditionsOftenEnough_test.go:38: callLoopConditionsOftenEnough(21, 30) = 0, want 10
--- FAIL: TestCallLoopConditionsOftenEnough (0.00s)
    --- PASS: TestCallLoopConditionsOftenEnough/xLessThan10 (0.00s)
    --- PASS: TestCallLoopConditionsOftenEnough/xGreaterThan20 (0.00s)
    --- PASS: TestCallLoopConditionsOftenEnough/xWithinRange_yLessThan20 (0.00s)
    --- FAIL: TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20 (0.00s)
    --- FAIL: TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop (0.00s)
FAIL
coverage: 3.8% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20 (0.00s)
    callLoopConditionsOftenEnough_test.go:31: callLoopConditionsOftenEnough(15, 30) = 12, want 22
    --- FAIL: TestCallLoopConditionsOftenEnough/xWithinRange_yGreaterThan20 (0.00s)

=== FAIL: . TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop (0.00s)
    callLoopConditionsOftenEnough_test.go:38: callLoopConditionsOftenEnough(21, 30) = 0, want 10
    --- FAIL: TestCallLoopConditionsOftenEnough/xGreaterThan20AfterLoop (0.00s)

=== FAIL: . TestCallLoopConditionsOftenEnough (0.00s)

DONE 6 tests, 3 failures in 0.367s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
# light [light.test]
./collatzCalculator_test.go:4:2: "errors" imported and not used
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./collatzCalculator_test.go:4:2: "errors" imported and not used

DONE 0 tests, 1 error in 0.145s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:116
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
# light [light.test]
./collatzCalculator_test.go:4:2: "errors" imported and not used
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./collatzCalculator_test.go:4:2: "errors" imported and not used

DONE 0 tests, 1 error in 0.145s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

collatzCalculator.go exit status 1
=== RUN   TestEquilibriumIndices
=== RUN   TestEquilibriumIndices/Empty_slice
=== RUN   TestEquilibriumIndices/Single_element_slice
    equilibriumIndices_test.go:56: equilibriumIndices() = 0;, want 
=== RUN   TestEquilibriumIndices/No_equilibrium_indices
=== RUN   TestEquilibriumIndices/One_equilibrium_index
    equilibriumIndices_test.go:56: equilibriumIndices() = 1;3;7;, want 3;
=== RUN   TestEquilibriumIndices/Multiple_equilibrium_indices
    equilibriumIndices_test.go:56: equilibriumIndices() = , want 4;5;
--- FAIL: TestEquilibriumIndices (0.00s)
    --- PASS: TestEquilibriumIndices/Empty_slice (0.00s)
    --- FAIL: TestEquilibriumIndices/Single_element_slice (0.00s)
    --- PASS: TestEquilibriumIndices/No_equilibrium_indices (0.00s)
    --- FAIL: TestEquilibriumIndices/One_equilibrium_index (0.00s)
    --- FAIL: TestEquilibriumIndices/Multiple_equilibrium_indices (0.00s)
=== RUN   TestEquilibriumIndices_CodeCoverage
    equilibriumIndices_test.go:67: equilibriumIndices() = 1;3;7;, want 3;
--- FAIL: TestEquilibriumIndices_CodeCoverage (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestEquilibriumIndices/Single_element_slice (0.00s)
    equilibriumIndices_test.go:56: equilibriumIndices() = 0;, want 
    --- FAIL: TestEquilibriumIndices/Single_element_slice (0.00s)

=== FAIL: . TestEquilibriumIndices/One_equilibrium_index (0.00s)
    equilibriumIndices_test.go:56: equilibriumIndices() = 1;3;7;, want 3;
    --- FAIL: TestEquilibriumIndices/One_equilibrium_index (0.00s)

=== FAIL: . TestEquilibriumIndices/Multiple_equilibrium_indices (0.00s)
    equilibriumIndices_test.go:56: equilibriumIndices() = , want 4;5;
    --- FAIL: TestEquilibriumIndices/Multiple_equilibrium_indices (0.00s)

=== FAIL: . TestEquilibriumIndices (0.00s)

=== FAIL: . TestEquilibriumIndices_CodeCoverage (0.00s)
    equilibriumIndices_test.go:67: equilibriumIndices() = 1;3;7;, want 3;

DONE 7 tests, 5 failures in 0.354s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestEquilibriumIndices
=== RUN   TestEquilibriumIndices/Empty_slice
=== RUN   TestEquilibriumIndices/Single_element_slice
    equilibriumIndices_test.go:56: equilibriumIndices() = 0;, want 
=== RUN   TestEquilibriumIndices/No_equilibrium_indices
=== RUN   TestEquilibriumIndices/One_equilibrium_index
    equilibriumIndices_test.go:56: equilibriumIndices() = 1;3;7;, want 3;
=== RUN   TestEquilibriumIndices/Multiple_equilibrium_indices
    equilibriumIndices_test.go:56: equilibriumIndices() = , want 4;5;
--- FAIL: TestEquilibriumIndices (0.00s)
    --- PASS: TestEquilibriumIndices/Empty_slice (0.00s)
    --- FAIL: TestEquilibriumIndices/Single_element_slice (0.00s)
    --- PASS: TestEquilibriumIndices/No_equilibrium_indices (0.00s)
    --- FAIL: TestEquilibriumIndices/One_equilibrium_index (0.00s)
    --- FAIL: TestEquilibriumIndices/Multiple_equilibrium_indices (0.00s)
=== RUN   TestEquilibriumIndices_CodeCoverage
    equilibriumIndices_test.go:67: equilibriumIndices() = 1;3;7;, want 3;
--- FAIL: TestEquilibriumIndices_CodeCoverage (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestEquilibriumIndices/Single_element_slice (0.00s)
    equilibriumIndices_test.go:56: equilibriumIndices() = 0;, want 
    --- FAIL: TestEquilibriumIndices/Single_element_slice (0.00s)

=== FAIL: . TestEquilibriumIndices/One_equilibrium_index (0.00s)
    equilibriumIndices_test.go:56: equilibriumIndices() = 1;3;7;, want 3;
    --- FAIL: TestEquilibriumIndices/One_equilibrium_index (0.00s)

=== FAIL: . TestEquilibriumIndices/Multiple_equilibrium_indices (0.00s)
    equilibriumIndices_test.go:56: equilibriumIndices() = , want 4;5;
    --- FAIL: TestEquilibriumIndices/Multiple_equilibrium_indices (0.00s)

=== FAIL: . TestEquilibriumIndices (0.00s)

=== FAIL: . TestEquilibriumIndices_CodeCoverage (0.00s)
    equilibriumIndices_test.go:67: equilibriumIndices() = 1;3;7;, want 3;

DONE 7 tests, 5 failures in 0.354s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestForLoop
=== RUN   TestForLoop/Zero
=== RUN   TestForLoop/One
    forLoop_test.go:22: forLoop() = 0, want 1
=== RUN   TestForLoop/Two
    forLoop_test.go:22: forLoop() = 2, want 6
=== RUN   TestForLoop/Five
    forLoop_test.go:22: forLoop() = 20, want 30
--- FAIL: TestForLoop (0.00s)
    --- PASS: TestForLoop/Zero (0.00s)
    --- FAIL: TestForLoop/One (0.00s)
    --- FAIL: TestForLoop/Two (0.00s)
    --- FAIL: TestForLoop/Five (0.00s)
FAIL
coverage: 2.8% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestForLoop/One (0.00s)
    forLoop_test.go:22: forLoop() = 0, want 1
    --- FAIL: TestForLoop/One (0.00s)

=== FAIL: . TestForLoop/Two (0.00s)
    forLoop_test.go:22: forLoop() = 2, want 6
    --- FAIL: TestForLoop/Two (0.00s)

=== FAIL: . TestForLoop/Five (0.00s)
    forLoop_test.go:22: forLoop() = 20, want 30
    --- FAIL: TestForLoop/Five (0.00s)

=== FAIL: . TestForLoop (0.00s)

DONE 5 tests, 4 failures in 0.342s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestForLoop
=== RUN   TestForLoop/Zero
=== RUN   TestForLoop/One
    forLoop_test.go:22: forLoop() = 0, want 1
=== RUN   TestForLoop/Two
    forLoop_test.go:22: forLoop() = 2, want 6
=== RUN   TestForLoop/Five
    forLoop_test.go:22: forLoop() = 20, want 30
--- FAIL: TestForLoop (0.00s)
    --- PASS: TestForLoop/Zero (0.00s)
    --- FAIL: TestForLoop/One (0.00s)
    --- FAIL: TestForLoop/Two (0.00s)
    --- FAIL: TestForLoop/Five (0.00s)
FAIL
coverage: 2.8% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestForLoop/One (0.00s)
    forLoop_test.go:22: forLoop() = 0, want 1
    --- FAIL: TestForLoop/One (0.00s)

=== FAIL: . TestForLoop/Two (0.00s)
    forLoop_test.go:22: forLoop() = 2, want 6
    --- FAIL: TestForLoop/Two (0.00s)

=== FAIL: . TestForLoop/Five (0.00s)
    forLoop_test.go:22: forLoop() = 20, want 30
    --- FAIL: TestForLoop/Five (0.00s)

=== FAIL: . TestForLoop (0.00s)

DONE 5 tests, 4 failures in 0.342s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
# light [light.test]
./jacobiSymbol_test.go:24:26: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./jacobiSymbol_test.go:24:26: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)

DONE 0 tests, 1 error in 0.181s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:116
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
# light [light.test]
./jacobiSymbol_test.go:24:26: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./jacobiSymbol_test.go:24:26: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)

DONE 0 tests, 1 error in 0.181s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

jacobiSymbol.go exit status 1
=== RUN   TestInitialiseKlarnerRadoSequence
=== RUN   TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Empty
=== RUN   TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small
    klarnerRadoSequence_test.go:18: Expected: [0 1 1 2 1 2], Got: [0 1 3 4 7 9]
=== RUN   TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large
    klarnerRadoSequence_test.go:26: Expected: [0 1 1 2 1 2 1 3 2 1 2 3 1 2 1 4 2 1 2 3], Got: [0 1 3 4 7 9 10 13 15 19 21 22 27 28 31 39 40 43 45 46 55]
--- FAIL: TestInitialiseKlarnerRadoSequence (0.00s)
    --- PASS: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Empty (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large (0.00s)
FAIL
coverage: 6.2% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small (0.00s)
    klarnerRadoSequence_test.go:18: Expected: [0 1 1 2 1 2], Got: [0 1 3 4 7 9]
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small (0.00s)

=== FAIL: . TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large (0.00s)
    klarnerRadoSequence_test.go:26: Expected: [0 1 1 2 1 2 1 3 2 1 2 3 1 2 1 4 2 1 2 3], Got: [0 1 3 4 7 9 10 13 15 19 21 22 27 28 31 39 40 43 45 46 55]
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large (0.00s)

=== FAIL: . TestInitialiseKlarnerRadoSequence (0.00s)

DONE 4 tests, 3 failures in 0.347s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestInitialiseKlarnerRadoSequence
=== RUN   TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Empty
=== RUN   TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small
    klarnerRadoSequence_test.go:18: Expected: [0 1 1 2 1 2], Got: [0 1 3 4 7 9]
=== RUN   TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large
    klarnerRadoSequence_test.go:26: Expected: [0 1 1 2 1 2 1 3 2 1 2 3 1 2 1 4 2 1 2 3], Got: [0 1 3 4 7 9 10 13 15 19 21 22 27 28 31 39 40 43 45 46 55]
--- FAIL: TestInitialiseKlarnerRadoSequence (0.00s)
    --- PASS: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Empty (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large (0.00s)
FAIL
coverage: 6.2% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small (0.00s)
    klarnerRadoSequence_test.go:18: Expected: [0 1 1 2 1 2], Got: [0 1 3 4 7 9]
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Small (0.00s)

=== FAIL: . TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large (0.00s)
    klarnerRadoSequence_test.go:26: Expected: [0 1 1 2 1 2 1 3 2 1 2 3 1 2 1 4 2 1 2 3], Got: [0 1 3 4 7 9 10 13 15 19 21 22 27 28 31 39 40 43 45 46 55]
    --- FAIL: TestInitialiseKlarnerRadoSequence/TestInitialiseKlarnerRadoSequence_Large (0.00s)

=== FAIL: . TestInitialiseKlarnerRadoSequence (0.00s)

DONE 4 tests, 3 failures in 0.347s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestMaximumValue
=== RUN   TestMaximumValue/Empty_input
=== RUN   TestMaximumValue/Single_item_fits
=== RUN   TestMaximumValue/Single_item_doesn't_fit
=== RUN   TestMaximumValue/Multiple_items,_some_fit
=== RUN   TestMaximumValue/Multiple_items,_all_fit
    knapsack_test.go:67: maximumValue() = 24, want 28
=== RUN   TestMaximumValue/Multiple_items,_some_don't_fit
--- FAIL: TestMaximumValue (0.00s)
    --- PASS: TestMaximumValue/Empty_input (0.00s)
    --- PASS: TestMaximumValue/Single_item_fits (0.00s)
    --- PASS: TestMaximumValue/Single_item_doesn't_fit (0.00s)
    --- PASS: TestMaximumValue/Multiple_items,_some_fit (0.00s)
    --- FAIL: TestMaximumValue/Multiple_items,_all_fit (0.00s)
    --- PASS: TestMaximumValue/Multiple_items,_some_don't_fit (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestMaximumValue/Multiple_items,_all_fit (0.00s)
    knapsack_test.go:67: maximumValue() = 24, want 28
    --- FAIL: TestMaximumValue/Multiple_items,_all_fit (0.00s)

=== FAIL: . TestMaximumValue (0.00s)

DONE 7 tests, 2 failures in 0.355s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestMaximumValue
=== RUN   TestMaximumValue/Empty_input
=== RUN   TestMaximumValue/Single_item_fits
=== RUN   TestMaximumValue/Single_item_doesn't_fit
=== RUN   TestMaximumValue/Multiple_items,_some_fit
=== RUN   TestMaximumValue/Multiple_items,_all_fit
    knapsack_test.go:67: maximumValue() = 24, want 28
=== RUN   TestMaximumValue/Multiple_items,_some_don't_fit
--- FAIL: TestMaximumValue (0.00s)
    --- PASS: TestMaximumValue/Empty_input (0.00s)
    --- PASS: TestMaximumValue/Single_item_fits (0.00s)
    --- PASS: TestMaximumValue/Single_item_doesn't_fit (0.00s)
    --- PASS: TestMaximumValue/Multiple_items,_some_fit (0.00s)
    --- FAIL: TestMaximumValue/Multiple_items,_all_fit (0.00s)
    --- PASS: TestMaximumValue/Multiple_items,_some_don't_fit (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestMaximumValue/Multiple_items,_all_fit (0.00s)
    knapsack_test.go:67: maximumValue() = 24, want 28
    --- FAIL: TestMaximumValue/Multiple_items,_all_fit (0.00s)

=== FAIL: . TestMaximumValue (0.00s)

DONE 7 tests, 2 failures in 0.355s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestMatchBytes
=== RUN   TestMatchBytes/Equal
=== RUN   TestMatchBytes/EqualCaseInsensitive
=== RUN   TestMatchBytes/Different
=== RUN   TestMatchBytes/DifferentCaseInsensitive
=== RUN   TestMatchBytes/DifferentLength
    matchBytes_test.go:75: matchBytes() = true, want false
=== RUN   TestMatchBytes/Empty
=== RUN   TestMatchBytes/OneEmpty
    matchBytes_test.go:75: matchBytes() = true, want false
--- FAIL: TestMatchBytes (0.00s)
    --- PASS: TestMatchBytes/Equal (0.00s)
    --- PASS: TestMatchBytes/EqualCaseInsensitive (0.00s)
    --- PASS: TestMatchBytes/Different (0.00s)
    --- PASS: TestMatchBytes/DifferentCaseInsensitive (0.00s)
    --- FAIL: TestMatchBytes/DifferentLength (0.00s)
    --- PASS: TestMatchBytes/Empty (0.00s)
    --- FAIL: TestMatchBytes/OneEmpty (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestMatchBytes/DifferentLength (0.00s)
    matchBytes_test.go:75: matchBytes() = true, want false
    --- FAIL: TestMatchBytes/DifferentLength (0.00s)

=== FAIL: . TestMatchBytes/OneEmpty (0.00s)
    matchBytes_test.go:75: matchBytes() = true, want false
    --- FAIL: TestMatchBytes/OneEmpty (0.00s)

=== FAIL: . TestMatchBytes (0.00s)

DONE 8 tests, 3 failures in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestMatchBytes
=== RUN   TestMatchBytes/Equal
=== RUN   TestMatchBytes/EqualCaseInsensitive
=== RUN   TestMatchBytes/Different
=== RUN   TestMatchBytes/DifferentCaseInsensitive
=== RUN   TestMatchBytes/DifferentLength
    matchBytes_test.go:75: matchBytes() = true, want false
=== RUN   TestMatchBytes/Empty
=== RUN   TestMatchBytes/OneEmpty
    matchBytes_test.go:75: matchBytes() = true, want false
--- FAIL: TestMatchBytes (0.00s)
    --- PASS: TestMatchBytes/Equal (0.00s)
    --- PASS: TestMatchBytes/EqualCaseInsensitive (0.00s)
    --- PASS: TestMatchBytes/Different (0.00s)
    --- PASS: TestMatchBytes/DifferentCaseInsensitive (0.00s)
    --- FAIL: TestMatchBytes/DifferentLength (0.00s)
    --- PASS: TestMatchBytes/Empty (0.00s)
    --- FAIL: TestMatchBytes/OneEmpty (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestMatchBytes/DifferentLength (0.00s)
    matchBytes_test.go:75: matchBytes() = true, want false
    --- FAIL: TestMatchBytes/DifferentLength (0.00s)

=== FAIL: . TestMatchBytes/OneEmpty (0.00s)
    matchBytes_test.go:75: matchBytes() = true, want false
    --- FAIL: TestMatchBytes/OneEmpty (0.00s)

=== FAIL: . TestMatchBytes (0.00s)

DONE 8 tests, 3 failures in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestExtractDigits
=== RUN   TestExtractDigits/empty_string
=== RUN   TestExtractDigits/only_digits
=== RUN   TestExtractDigits/digits_with_spaces
=== RUN   TestExtractDigits/digits_with_dots
=== RUN   TestExtractDigits/digits_with_parentheses
=== RUN   TestExtractDigits/digits_with_hyphens
=== RUN   TestExtractDigits/digits_with_pluses
=== RUN   TestExtractDigits/digits_with_hyphens_and_pluses
=== RUN   TestExtractDigits/digits_with_hyphen
    phoneNumber_test.go:100: extractDigits() error = <nil>, wantErr true
=== RUN   TestExtractDigits/digits_with_@
=== RUN   TestExtractDigits/digits_with_:
=== RUN   TestExtractDigits/digits_with_!
=== RUN   TestExtractDigits/digits_with_letters
--- FAIL: TestExtractDigits (0.00s)
    --- PASS: TestExtractDigits/empty_string (0.00s)
    --- PASS: TestExtractDigits/only_digits (0.00s)
    --- PASS: TestExtractDigits/digits_with_spaces (0.00s)
    --- PASS: TestExtractDigits/digits_with_dots (0.00s)
    --- PASS: TestExtractDigits/digits_with_parentheses (0.00s)
    --- PASS: TestExtractDigits/digits_with_hyphens (0.00s)
    --- PASS: TestExtractDigits/digits_with_pluses (0.00s)
    --- PASS: TestExtractDigits/digits_with_hyphens_and_pluses (0.00s)
    --- FAIL: TestExtractDigits/digits_with_hyphen (0.00s)
    --- PASS: TestExtractDigits/digits_with_@ (0.00s)
    --- PASS: TestExtractDigits/digits_with_: (0.00s)
    --- PASS: TestExtractDigits/digits_with_! (0.00s)
    --- PASS: TestExtractDigits/digits_with_letters (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestExtractDigits/digits_with_hyphen (0.00s)
    phoneNumber_test.go:100: extractDigits() error = <nil>, wantErr true
    --- FAIL: TestExtractDigits/digits_with_hyphen (0.00s)

=== FAIL: . TestExtractDigits (0.00s)

DONE 14 tests, 2 failures in 0.340s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestExtractDigits
=== RUN   TestExtractDigits/empty_string
=== RUN   TestExtractDigits/only_digits
=== RUN   TestExtractDigits/digits_with_spaces
=== RUN   TestExtractDigits/digits_with_dots
=== RUN   TestExtractDigits/digits_with_parentheses
=== RUN   TestExtractDigits/digits_with_hyphens
=== RUN   TestExtractDigits/digits_with_pluses
=== RUN   TestExtractDigits/digits_with_hyphens_and_pluses
=== RUN   TestExtractDigits/digits_with_hyphen
    phoneNumber_test.go:100: extractDigits() error = <nil>, wantErr true
=== RUN   TestExtractDigits/digits_with_@
=== RUN   TestExtractDigits/digits_with_:
=== RUN   TestExtractDigits/digits_with_!
=== RUN   TestExtractDigits/digits_with_letters
--- FAIL: TestExtractDigits (0.00s)
    --- PASS: TestExtractDigits/empty_string (0.00s)
    --- PASS: TestExtractDigits/only_digits (0.00s)
    --- PASS: TestExtractDigits/digits_with_spaces (0.00s)
    --- PASS: TestExtractDigits/digits_with_dots (0.00s)
    --- PASS: TestExtractDigits/digits_with_parentheses (0.00s)
    --- PASS: TestExtractDigits/digits_with_hyphens (0.00s)
    --- PASS: TestExtractDigits/digits_with_pluses (0.00s)
    --- PASS: TestExtractDigits/digits_with_hyphens_and_pluses (0.00s)
    --- FAIL: TestExtractDigits/digits_with_hyphen (0.00s)
    --- PASS: TestExtractDigits/digits_with_@ (0.00s)
    --- PASS: TestExtractDigits/digits_with_: (0.00s)
    --- PASS: TestExtractDigits/digits_with_! (0.00s)
    --- PASS: TestExtractDigits/digits_with_letters (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestExtractDigits/digits_with_hyphen (0.00s)
    phoneNumber_test.go:100: extractDigits() error = <nil>, wantErr true
    --- FAIL: TestExtractDigits/digits_with_hyphen (0.00s)

=== FAIL: . TestExtractDigits (0.00s)

DONE 14 tests, 2 failures in 0.340s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestIsSorted
=== RUN   TestIsSorted/empty
    sort_test.go:60: isSorted() = false, want true
=== RUN   TestIsSorted/one_element
=== RUN   TestIsSorted/sorted
=== RUN   TestIsSorted/not_sorted
=== RUN   TestIsSorted/unsorted_with_duplicates
=== RUN   TestIsSorted/sorted_with_duplicates
--- FAIL: TestIsSorted (0.00s)
    --- FAIL: TestIsSorted/empty (0.00s)
    --- PASS: TestIsSorted/one_element (0.00s)
    --- PASS: TestIsSorted/sorted (0.00s)
    --- PASS: TestIsSorted/not_sorted (0.00s)
    --- PASS: TestIsSorted/unsorted_with_duplicates (0.00s)
    --- PASS: TestIsSorted/sorted_with_duplicates (0.00s)
FAIL
coverage: 1.9% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestIsSorted/empty (0.00s)
    sort_test.go:60: isSorted() = false, want true
    --- FAIL: TestIsSorted/empty (0.00s)

=== FAIL: . TestIsSorted (0.00s)

DONE 7 tests, 2 failures in 0.327s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestIsSorted
=== RUN   TestIsSorted/empty
    sort_test.go:60: isSorted() = false, want true
=== RUN   TestIsSorted/one_element
=== RUN   TestIsSorted/sorted
=== RUN   TestIsSorted/not_sorted
=== RUN   TestIsSorted/unsorted_with_duplicates
=== RUN   TestIsSorted/sorted_with_duplicates
--- FAIL: TestIsSorted (0.00s)
    --- FAIL: TestIsSorted/empty (0.00s)
    --- PASS: TestIsSorted/one_element (0.00s)
    --- PASS: TestIsSorted/sorted (0.00s)
    --- PASS: TestIsSorted/not_sorted (0.00s)
    --- PASS: TestIsSorted/unsorted_with_duplicates (0.00s)
    --- PASS: TestIsSorted/sorted_with_duplicates (0.00s)
FAIL
coverage: 1.9% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestIsSorted/empty (0.00s)
    sort_test.go:60: isSorted() = false, want true
    --- FAIL: TestIsSorted/empty (0.00s)

=== FAIL: . TestIsSorted (0.00s)

DONE 7 tests, 2 failures in 0.327s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestTypeArrayAccess
=== RUN   TestTypeArrayAccess/First_element_is_123
=== RUN   TestTypeArrayAccess/First_element_is_not_123
=== RUN   TestTypeArrayAccess/Empty_array
--- FAIL: TestTypeArrayAccess (0.00s)
    --- PASS: TestTypeArrayAccess/First_element_is_123 (0.00s)
    --- PASS: TestTypeArrayAccess/First_element_is_not_123 (0.00s)
    --- FAIL: TestTypeArrayAccess/Empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 21 [running]:
testing.tRunner.func1.2({0x56b480, 0xc000158060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b480?, 0xc000158060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc000103040?)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess_test.go:32 +0xfa
testing.tRunner(0xc0001031e0, 0xc00010e310)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 18
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayAccess/Empty_array (0.00s)
    --- FAIL: TestTypeArrayAccess/Empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 21 [running]:
testing.tRunner.func1.2({0x56b480, 0xc000158060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b480?, 0xc000158060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc000103040?)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess_test.go:32 +0xfa
testing.tRunner(0xc0001031e0, 0xc00010e310)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 18
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayAccess (0.00s)

DONE 4 tests, 2 failures in 0.347s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestTypeArrayAccess
=== RUN   TestTypeArrayAccess/First_element_is_123
=== RUN   TestTypeArrayAccess/First_element_is_not_123
=== RUN   TestTypeArrayAccess/Empty_array
--- FAIL: TestTypeArrayAccess (0.00s)
    --- PASS: TestTypeArrayAccess/First_element_is_123 (0.00s)
    --- PASS: TestTypeArrayAccess/First_element_is_not_123 (0.00s)
    --- FAIL: TestTypeArrayAccess/Empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 21 [running]:
testing.tRunner.func1.2({0x56b480, 0xc000158060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b480?, 0xc000158060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc000103040?)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess_test.go:32 +0xfa
testing.tRunner(0xc0001031e0, 0xc00010e310)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 18
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayAccess/Empty_array (0.00s)
    --- FAIL: TestTypeArrayAccess/Empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 21 [running]:
testing.tRunner.func1.2({0x56b480, 0xc000158060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b480?, 0xc000158060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc000103040?)
	/tmp/eval-dev-quality3149083375/light/typeArrayAccess_test.go:32 +0xfa
testing.tRunner(0xc0001031e0, 0xc00010e310)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 18
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayAccess (0.00s)

DONE 4 tests, 2 failures in 0.347s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestValidDate
=== RUN   TestValidDate/Valid_date_1
=== RUN   TestValidDate/Valid_date_2
    validateDate_test.go:32: validDate() = false, want true
=== RUN   TestValidDate/Valid_date_3
=== RUN   TestValidDate/Valid_date_4
=== RUN   TestValidDate/Invalid_date_1
=== RUN   TestValidDate/Invalid_date_2
=== RUN   TestValidDate/Invalid_date_3
    validateDate_test.go:32: validDate() = true, want false
=== RUN   TestValidDate/Invalid_date_4
=== RUN   TestValidDate/Invalid_date_5
=== RUN   TestValidDate/Invalid_date_6
--- FAIL: TestValidDate (0.00s)
    --- PASS: TestValidDate/Valid_date_1 (0.00s)
    --- FAIL: TestValidDate/Valid_date_2 (0.00s)
    --- PASS: TestValidDate/Valid_date_3 (0.00s)
    --- PASS: TestValidDate/Valid_date_4 (0.00s)
    --- PASS: TestValidDate/Invalid_date_1 (0.00s)
    --- PASS: TestValidDate/Invalid_date_2 (0.00s)
    --- FAIL: TestValidDate/Invalid_date_3 (0.00s)
    --- PASS: TestValidDate/Invalid_date_4 (0.00s)
    --- PASS: TestValidDate/Invalid_date_5 (0.00s)
    --- PASS: TestValidDate/Invalid_date_6 (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestValidDate/Valid_date_2 (0.00s)
    validateDate_test.go:32: validDate() = false, want true
    --- FAIL: TestValidDate/Valid_date_2 (0.00s)

=== FAIL: . TestValidDate/Invalid_date_3 (0.00s)
    validateDate_test.go:32: validDate() = true, want false
    --- FAIL: TestValidDate/Invalid_date_3 (0.00s)

=== FAIL: . TestValidDate (0.00s)

DONE 11 tests, 3 failures in 0.340s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestValidDate
=== RUN   TestValidDate/Valid_date_1
=== RUN   TestValidDate/Valid_date_2
    validateDate_test.go:32: validDate() = false, want true
=== RUN   TestValidDate/Valid_date_3
=== RUN   TestValidDate/Valid_date_4
=== RUN   TestValidDate/Invalid_date_1
=== RUN   TestValidDate/Invalid_date_2
=== RUN   TestValidDate/Invalid_date_3
    validateDate_test.go:32: validDate() = true, want false
=== RUN   TestValidDate/Invalid_date_4
=== RUN   TestValidDate/Invalid_date_5
=== RUN   TestValidDate/Invalid_date_6
--- FAIL: TestValidDate (0.00s)
    --- PASS: TestValidDate/Valid_date_1 (0.00s)
    --- FAIL: TestValidDate/Valid_date_2 (0.00s)
    --- PASS: TestValidDate/Valid_date_3 (0.00s)
    --- PASS: TestValidDate/Valid_date_4 (0.00s)
    --- PASS: TestValidDate/Invalid_date_1 (0.00s)
    --- PASS: TestValidDate/Invalid_date_2 (0.00s)
    --- FAIL: TestValidDate/Invalid_date_3 (0.00s)
    --- PASS: TestValidDate/Invalid_date_4 (0.00s)
    --- PASS: TestValidDate/Invalid_date_5 (0.00s)
    --- PASS: TestValidDate/Invalid_date_6 (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestValidDate/Valid_date_2 (0.00s)
    validateDate_test.go:32: validDate() = false, want true
    --- FAIL: TestValidDate/Valid_date_2 (0.00s)

=== FAIL: . TestValidDate/Invalid_date_3 (0.00s)
    validateDate_test.go:32: validDate() = true, want false
    --- FAIL: TestValidDate/Invalid_date_3 (0.00s)

=== FAIL: . TestValidDate (0.00s)

DONE 11 tests, 3 failures in 0.340s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
]

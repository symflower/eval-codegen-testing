2024/06/06 12:19:17 Evaluating model "openrouter/perplexity/llama-3-sonar-large-32k-chat" using language "golang" and repository "golang/light"
2024/06/06 12:19:17 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "balancedBrackets.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func hasBalancedBrackets(charArray string) bool {
		brackets := 0
		for _, ch := range charArray {
			if ch == '[' {
				brackets++
			} else if ch == ']' {
				brackets--
			} else {
				return false // Non-bracket characters.
			}
		}

		if brackets < 0 { // Closing bracket before opening bracket.
			return false
		}

		return brackets == 0
	}
	```
2024/06/06 12:19:22 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (5330 ms) with:
	```golang
	package light

	import "testing"

	func TestHasBalancedBrackets(t *testing.T) {
		tests := []struct {
			charArray string
			want      bool
		}{
			{"[]", true},
			{"[][]", true},
			{"[[]]", true},
			{"[[[]]]", true},
			{"", true},
			{"abc", false},
			{"][],", false},
			{"[]]", false},
			{"[", false},
			{"]", false},
			{"[[][]", false},
			{"][][]", false},
		}

		for _, tt := range tests {
			if got := hasBalancedBrackets(tt.charArray); got != tt.want {
				t.Errorf("hasBalancedBrackets(%q) = %v, want %v", tt.charArray, got, tt.want)
			}
		}
	}
	```
2024/06/06 12:19:22 $ go mod tidy
2024/06/06 12:19:22 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestHasBalancedBrackets
--- PASS: TestHasBalancedBrackets (0.00s)
PASS
coverage: 4.7% of statements
ok  	light	0.004s	coverage: 4.7% of statements

DONE 1 tests in 182.447s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:22:25 Executes tests with 5 coverage objects
2024/06/06 12:22:25 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "binarySearch.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func binarySearch(a []int, x int) int {
		index := -1

		min := 0
		max := len(a) - 1

		for index == -1 && min <= max {
			m := (min + max) / 2

			if x == a[m] {
				index = m
			} else if x < a[m] {
				max = m - 1
			} else {
				min = m + 1
			}
		}

		return index
	}
	```
2024/06/06 12:22:34 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (9029 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestBinarySearch(t *testing.T) {
		tests := []struct {
			name string
			a    []int
			x    int
			want int
		}{
			{"found in middle", []int{1, 2, 3, 4, 5}, 3, 2},
			{"found at start", []int{1, 2, 3, 4, 5}, 1, 0},
			{"found at end", []int{1, 2, 3, 4, 5}, 5, 4},
			{"not found", []int{1, 2, 3, 4, 5}, 6, -1},
			{"empty slice", []int{}, 1, -1},
			{"single element found", []int{1}, 1, 0},
			{"single element not found", []int{1}, 2, -1},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := binarySearch(tt.a, tt.x); got != tt.want {
					t.Errorf("binarySearch(%v, %d) = %d, want %d", tt.a, tt.x, got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 12:22:34 $ go mod tidy
2024/06/06 12:22:34 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestBinarySearch
=== RUN   TestBinarySearch/found_in_middle
=== RUN   TestBinarySearch/found_at_start
=== RUN   TestBinarySearch/found_at_end
=== RUN   TestBinarySearch/not_found
=== RUN   TestBinarySearch/empty_slice
=== RUN   TestBinarySearch/single_element_found
=== RUN   TestBinarySearch/single_element_not_found
--- PASS: TestBinarySearch (0.00s)
    --- PASS: TestBinarySearch/found_in_middle (0.00s)
    --- PASS: TestBinarySearch/found_at_start (0.00s)
    --- PASS: TestBinarySearch/found_at_end (0.00s)
    --- PASS: TestBinarySearch/not_found (0.00s)
    --- PASS: TestBinarySearch/empty_slice (0.00s)
    --- PASS: TestBinarySearch/single_element_found (0.00s)
    --- PASS: TestBinarySearch/single_element_not_found (0.00s)
PASS
coverage: 5.2% of statements
ok  	light	0.003s	coverage: 5.2% of statements

DONE 8 tests in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:22:35 Executes tests with 4 coverage objects
2024/06/06 12:22:35 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "callLoopConditionsOftenEnough.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func callLoopConditionsOftenEnough(x, y int) int {
		if x < 10 || x > 20 {
			return 0
		}

		for i := 0; i < y; i++ {
			if i > 20 {
				x++ // This needs to be executed more than 10 times
			}
		}

		if x > 20 { // This block needs to be reached for full coverage
			x = x / 2
		}

		return x
	}
	```
2024/06/06 12:22:40 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (5158 ms) with:
	```go
	package light

	import "testing"

	func TestCallLoopConditionsOftenEnough(t *testing.T) {
		tests := []struct {
			x, y int
			want  int
		}{
			{5, 30, 3},
			{25, 30, 12},
			{10, 5, 10},
			{15, 30, 15},
			{21, 30, 0},
			{9, 30, 0},
		}

		for _, tt := range tests {
			if got := callLoopConditionsOftenEnough(tt.x, tt.y); got != tt.want {
				t.Errorf("callLoopConditionsOftenEnough(%d, %d) = %d, want %d", tt.x, tt.y, got, tt.want)
			}
		}
	}
	```
2024/06/06 12:22:40 $ go mod tidy
2024/06/06 12:22:40 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestCallLoopConditionsOftenEnough
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(5, 30) = 0, want 3
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(25, 30) = 0, want 12
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(15, 30) = 12, want 15
--- FAIL: TestCallLoopConditionsOftenEnough (0.00s)
FAIL
coverage: 3.8% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestCallLoopConditionsOftenEnough (0.00s)
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(5, 30) = 0, want 3
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(25, 30) = 0, want 12
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(15, 30) = 12, want 15

DONE 1 tests, 1 failure in 0.328s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:22:40 Executes tests with 4 coverage objects
2024/06/06 12:22:40 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "cascadingIfElse.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func cascadingIfElse(i int) int {
		if i == 1 {
			return 2
		} else if i == 3 {
			return 4
		} else {
			return 5
		}
	}
	```
2024/06/06 12:22:47 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (7031 ms) with:
	```go
	package light

	import "testing"

	func TestCascadingIfElse(t *testing.T) {
		if got, want := cascadingIfElse(1), 2; got != want {
			t.Errorf("cascadingIfElse(1) = %d, want %d", got, want)
		}
		if got, want := cascadingIfElse(3), 4; got != want {
			t.Errorf("cascadingIfElse(3) = %d, want %d", got, want)
		}
		if got, want := cascadingIfElse(2), 5; got != want {
			t.Errorf("cascadingIfElse(2) = %d, want %d", got, want)
		}
		if got, want := cascadingIfElse(4), 5; got != want {
			t.Errorf("cascadingIfElse(4) = %d, want %d", got, want)
		}
	}
	```
2024/06/06 12:22:47 $ go mod tidy
2024/06/06 12:22:47 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestCascadingIfElse
--- PASS: TestCascadingIfElse (0.00s)
PASS
coverage: 2.4% of statements
ok  	light	0.004s	coverage: 2.4% of statements

DONE 1 tests in 0.331s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:22:48 Executes tests with 3 coverage objects
2024/06/06 12:22:48 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "collatzCalculator.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func computeStepCount(start int) (int, error) {
		if start <= 0 {
			return 0, errors.New("Only positive integers are allowed")
		}
		if start == 1 {
			return 0, nil
		}
		var next int

		if start%2 == 0 {
			next = start / 2
		} else {
			next = 3*start + 1
		}

		n, err := computeStepCount(next)
		if err != nil {
			return 0, err
		}

		return 1 + n, nil
	}
	```
2024/06/06 12:22:54 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (6199 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestComputeStepCount(t *testing.T) {
		tests := []struct {
			name    string
			start   int
			want    int
			wantErr bool
		}{
			{"positive even", 4, 2, false},
			{"positive odd", 3, 7, false},
			{"one", 1, 0, false},
			{"zero", 0, 0, true},
			{"negative", -1, 0, true},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				got, err := computeStepCount(tt.start)
				if (err != nil) != tt.wantErr {
					t.Errorf("computeStepCount() error = %v, wantErr %v", err, tt.wantErr)
					return
				}
				if got != tt.want {
					t.Errorf("computeStepCount() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 12:22:54 $ go mod tidy
2024/06/06 12:22:54 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestComputeStepCount
=== RUN   TestComputeStepCount/positive_even
=== RUN   TestComputeStepCount/positive_odd
=== RUN   TestComputeStepCount/one
=== RUN   TestComputeStepCount/zero
=== RUN   TestComputeStepCount/negative
--- PASS: TestComputeStepCount (0.00s)
    --- PASS: TestComputeStepCount/positive_even (0.00s)
    --- PASS: TestComputeStepCount/positive_odd (0.00s)
    --- PASS: TestComputeStepCount/one (0.00s)
    --- PASS: TestComputeStepCount/zero (0.00s)
    --- PASS: TestComputeStepCount/negative (0.00s)
PASS
coverage: 5.2% of statements
ok  	light	0.004s	coverage: 5.2% of statements

DONE 6 tests in 0.313s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:22:54 Executes tests with 6 coverage objects
2024/06/06 12:22:54 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "conditionsAnd.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func conditionsAnd(x rune, y rune) bool {
		if x == 'A' && y == 'B' {
			return true
		}

		return false
	}
	```
2024/06/06 12:22:58 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (3804 ms) with:
	```go
	package light

	import "testing"

	func TestConditionsAnd(t *testing.T) {
		tests := []struct {
			x rune
			y rune
			want bool
		}{
			{'A', 'B', true},
			{'A', 'C', false},
			{'D', 'B', false},
			{'D', 'C', false},
		}

		for _, tt := range tests {
			if got := conditionsAnd(tt.x, tt.y); got != tt.want {
				t.Errorf("conditionsAnd(%c, %c) = %v, want %v", tt.x, tt.y, got, tt.want)
			}
		}
	}
	```
2024/06/06 12:22:58 $ go mod tidy
2024/06/06 12:22:58 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestConditionsAnd
--- PASS: TestConditionsAnd (0.00s)
PASS
coverage: 1.4% of statements
ok  	light	0.003s	coverage: 1.4% of statements

DONE 1 tests in 0.338s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:22:58 Executes tests with 2 coverage objects
2024/06/06 12:22:58 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "equilibriumIndices.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "strconv"

	func equilibriumIndices(sequence []int) (indexList string) {
		// Determine total sum.
		var totalSum int
		for _, n := range sequence {
			totalSum += n
		}
		// Compare running sum to remaining sum to find equilibrium indices.
		var runningSum int
		for i, n := range sequence {
			if totalSum-runningSum-n == runningSum {
				indexList += strconv.Itoa(i) + ";"
			}
			runningSum += n
		}

		return indexList
	}
	```
2024/06/06 12:23:06 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (7076 ms) with:
	Here is the test file "equilibriumIndices_test.go" for the given code:

	```go
	package light

	import (
		"testing"
	)

	func TestEquilibriumIndices(t *testing.T) {
		tests := []struct {
			name     string
			sequence []int
			want     string
		}{
			{"empty slice", []int{}, ""},
			{"single element", []int{1}, "0;"},
			{"no equilibrium", []int{1, 2, 3}, ""},
			{"one equilibrium", []int{1, 2, -3, 4}, "2;"},
			{"multiple equilibriums", []int{-7, 1, 5, 2, -4, 3, 0}, "3;6;"},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := equilibriumIndices(tt.sequence); got != tt.want {
					t.Errorf("equilibriumIndices() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 12:23:06 $ go mod tidy
2024/06/06 12:23:06 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestEquilibriumIndices
=== RUN   TestEquilibriumIndices/empty_slice
=== RUN   TestEquilibriumIndices/single_element
=== RUN   TestEquilibriumIndices/no_equilibrium
=== RUN   TestEquilibriumIndices/one_equilibrium
    equilibriumIndices_test.go:22: equilibriumIndices() = 1;3;, want 2;
=== RUN   TestEquilibriumIndices/multiple_equilibriums
--- FAIL: TestEquilibriumIndices (0.00s)
    --- PASS: TestEquilibriumIndices/empty_slice (0.00s)
    --- PASS: TestEquilibriumIndices/single_element (0.00s)
    --- PASS: TestEquilibriumIndices/no_equilibrium (0.00s)
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)
    --- PASS: TestEquilibriumIndices/multiple_equilibriums (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestEquilibriumIndices/one_equilibrium (0.00s)
    equilibriumIndices_test.go:22: equilibriumIndices() = 1;3;, want 2;
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)

=== FAIL: . TestEquilibriumIndices (0.00s)

DONE 6 tests, 2 failures in 0.337s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:23:06 Executes tests with 4 coverage objects
2024/06/06 12:23:06 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "forLoop.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func forLoop(s int) int {
		sum := 0
		for i := 0; i < s; i++ {
			sum = sum + i
		}
		for i := 0; i < s; i++ {
			sum = sum + i
		}

		return sum
	}
	```
2024/06/06 12:23:12 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (5541 ms) with:
	```go
	package light

	import "testing"

	func TestForLoop(t *testing.T) {
		tests := []struct {
			name string
			s    int
			want int
		}{
			{"zero", 0, 0},
			{"one", 1, 1},
			{"two", 2, 4},
			{"three", 3, 9},
			{"ten", 10, 180},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := forLoop(tt.s); got != tt.want {
					t.Errorf("forLoop() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 12:23:12 $ go mod tidy
2024/06/06 12:23:12 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestForLoop
=== RUN   TestForLoop/zero
=== RUN   TestForLoop/one
    forLoop_test.go:20: forLoop() = 0, want 1
=== RUN   TestForLoop/two
    forLoop_test.go:20: forLoop() = 2, want 4
=== RUN   TestForLoop/three
    forLoop_test.go:20: forLoop() = 6, want 9
=== RUN   TestForLoop/ten
    forLoop_test.go:20: forLoop() = 90, want 180
--- FAIL: TestForLoop (0.00s)
    --- PASS: TestForLoop/zero (0.00s)
    --- FAIL: TestForLoop/one (0.00s)
    --- FAIL: TestForLoop/two (0.00s)
    --- FAIL: TestForLoop/three (0.00s)
    --- FAIL: TestForLoop/ten (0.00s)
FAIL
coverage: 2.8% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestForLoop/one (0.00s)
    forLoop_test.go:20: forLoop() = 0, want 1
    --- FAIL: TestForLoop/one (0.00s)

=== FAIL: . TestForLoop/two (0.00s)
    forLoop_test.go:20: forLoop() = 2, want 4
    --- FAIL: TestForLoop/two (0.00s)

=== FAIL: . TestForLoop/three (0.00s)
    forLoop_test.go:20: forLoop() = 6, want 9
    --- FAIL: TestForLoop/three (0.00s)

=== FAIL: . TestForLoop/ten (0.00s)
    forLoop_test.go:20: forLoop() = 90, want 180
    --- FAIL: TestForLoop/ten (0.00s)

=== FAIL: . TestForLoop (0.00s)

DONE 6 tests, 5 failures in 0.333s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:23:12 Executes tests with 3 coverage objects
2024/06/06 12:23:12 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "jacobiSymbol.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import (
		"fmt"
	)

	func jacobiSymbol(k, n uint64) (int, error) {
		if k < 0 || n%2 == 0 {
			return 0, fmt.Errorf("Invalid value. k = %d, n = %d", k, n)
		}
		k %= n
		jacobi := 1
		for k > 0 {
			for k%2 == 0 {
				k /= 2
				r := n % 8
				if r == 3 || r == 5 {
					jacobi = -jacobi
				}
			}
			temp := n
			n = k
			k = temp
			if k%4 == 3 && n%4 == 3 {
				jacobi = -jacobi
			}
			k %= n
		}
		if n == 1 {
			return jacobi, nil
		}
		return 0, nil
	}
	```
2024/06/06 12:23:23 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (10378 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestJacobiSymbol(t *testing.T) {
		tests := []struct {
			k    uint64
			n    uint64
			want int
			err  string
		}{
			{1, 3, 1, ""},
			{2, 3, 0, "Invalid value. k = 2, n = 3"},
			{3, 5, -1, ""},
			{5, 7, -1, ""},
			{7, 11, 1, ""},
			{-1, 3, 0, "Invalid value. k = 18446744073709551615, n = 3"},
			{1, 2, 0, "Invalid value. k = 1, n = 2"},
		}

		for _, tt := range tests {
			got, err := jacobiSymbol(tt.k, tt.n)
			if tt.err != "" {
				if err == nil || err.Error() != tt.err {
					t.Errorf("jacobiSymbol(%d, %d) error = %v, want %v", tt.k, tt.n, err, tt.err)
				}
			} else {
				if err != nil {
					t.Errorf("jacobiSymbol(%d, %d) error = %v, want nil", tt.k, tt.n, err)
				}
				if got != tt.want {
					t.Errorf("jacobiSymbol(%d, %d) = %d, want %d", tt.k, tt.n, got, tt.want)
				}
			}
		}
	}
	```
2024/06/06 12:23:23 $ go mod tidy
2024/06/06 12:23:23 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
# light [light.test]
./jacobiSymbol_test.go:19:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./jacobiSymbol_test.go:19:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)

DONE 0 tests, 1 error in 0.127s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:23:23 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "klarnerRadoSequence.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "math"

	func initialiseKlarnerRadoSequence(limit int) []int {
		result := make([]int, limit+1)
		i2, i3 := 1, 1
		m2, m3 := 1, 1

		for i := 1; i <= limit; i++ {
			minimum := int(math.Min(float64(m2), float64(m3)))
			result[i] = minimum
			if m2 == minimum {
				m2 = result[i2]*2 + 1
				i2 += 1
			}
			if m3 == minimum {
				m3 = result[i3]*3 + 1
				i3 += 1
			}
		}

		return result
	}
	```
2024/06/06 12:23:29 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (6378 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestInitialiseKlarnerRadoSequence(t *testing.T) {
		tests := []struct {
			name string
			limit int
			want  []int
		}{
			{"limit 0", 0, []int{}},
			{"limit 1", 1, []int{1}},
			{"limit 2", 2, []int{1, 2}},
			{"limit 3", 3, []int{1, 2, 3}},
			{"limit 10", 10, []int{1, 2, 3, 5, 7, 10, 13, 17, 21, 26}},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				got := initialiseKlarnerRadoSequence(tt.limit)
				for i, v := range got {
					if v != tt.want[i] {
						t.Errorf("initialiseKlarnerRadoSequence(%d)[%d] = %d, want %d", tt.limit, i, v, tt.want[i])
					}
				}
			})
		}
	}
	```
2024/06/06 12:23:29 $ go mod tidy
2024/06/06 12:23:29 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestInitialiseKlarnerRadoSequence
=== RUN   TestInitialiseKlarnerRadoSequence/limit_0
--- FAIL: TestInitialiseKlarnerRadoSequence (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/limit_0 (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 7 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.TestInitialiseKlarnerRadoSequence.func1(0xc000007ba0)
	/tmp/eval-dev-quality744030985/light/klarnerRadoSequence_test.go:24 +0x190
testing.tRunner(0xc000007ba0, 0xc000026240)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestInitialiseKlarnerRadoSequence/limit_0 (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/limit_0 (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 7 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.TestInitialiseKlarnerRadoSequence.func1(0xc000007ba0)
	/tmp/eval-dev-quality744030985/light/klarnerRadoSequence_test.go:24 +0x190
testing.tRunner(0xc000007ba0, 0xc000026240)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestInitialiseKlarnerRadoSequence (0.00s)

DONE 2 tests, 2 failures in 0.333s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:23:30 Executes tests with 0 coverage objects
2024/06/06 12:23:30 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "knapsack.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "math"

	type Item struct {
		weight int
		value  int
	}

	func maximumValue(maximumWeight int, items []Item) int {
		knapsack := make([][]int, len(items)+1)
		for item := range knapsack {
			knapsack[item] = make([]int, maximumWeight+1)
			for weight := range knapsack[item] {
				knapsack[item][weight] = 0 // Return 0 if not filled
			}
		}

		for item := 0; item <= len(items); item++ {
			for weight := 0; weight <= maximumWeight; weight++ {
				if item == 0 || weight == 0 {
					knapsack[item][weight] = 0
				} else if items[item-1].weight > weight {
					knapsack[item][weight] = knapsack[item-1][weight]
				} else {
					itemValue := items[item-1].value
					itemWeight := items[item-1].weight
					knapsack[item][weight] = int(math.Max(float64(itemValue+knapsack[item-1][weight-itemWeight]), float64(knapsack[item-1][weight])))
				}
			}
		}

		return knapsack[len(items)][maximumWeight]
	}
	```
2024/06/06 12:23:38 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (8282 ms) with:
	```go
	package light

	import (
		"math"
		"testing"
	)

	func TestMaximumValue(t *testing.T) {
		tests := []struct {
			maximumWeight int
			items         []Item
			expected      int
		}{
			{10, []Item{{5, 60}, {3, 50}, {4, 70}, {5, 80}}, 130},
			{7, []Item{{1, 1}, {3, 4}, {4, 5}, {5, 7}}, 9},
			{5, []Item{{2, 10}, {3, 20}, {4, 30}}, 30},
			{10, []Item{{5, 60}, {5, 50}, {5, 70}, {5, 80}}, 130},
			{0, []Item{{5, 60}, {3, 50}, {4, 70}, {5, 80}}, 0},
			{10, []Item{}, 0},
			{10, []Item{{10, 100}}, 100},
			{10, []Item{{5, 50}, {5, 60}}, 110},
		}

		for _, test := range tests {
			actual := maximumValue(test.maximumWeight, test.items)
			if actual != test.expected {
				t.Errorf("maximumValue(%d, %+v) = %d, expected %d", test.maximumWeight, test.items, actual, test.expected)
			}
		}
	}
	```
2024/06/06 12:23:38 $ go mod tidy
2024/06/06 12:23:38 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
# light [light.test]
./knapsack_test.go:4:2: "math" imported and not used
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./knapsack_test.go:4:2: "math" imported and not used

DONE 0 tests, 1 error in 0.132s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:23:38 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "largestProperDivisor.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "fmt"

	func largestProperDivisor(aNumber int) (int, error) {
		if aNumber < 1 {
			return 0, fmt.Errorf("Argument must be >= 1: %d", aNumber)
		}

		if (aNumber & 1) == 0 {
			return aNumber >> 1, nil
		}

		for p := 3; p*p <= aNumber; p += 2 {
			if aNumber%p == 0 {
				return aNumber / p, nil
			}
		}

		return 1, nil
	}
	```
2024/06/06 12:23:45 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (6499 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestLargestProperDivisor(t *testing.T) {
		tests := []struct {
			name    string
			aNumber int
			want    int
			wantErr bool
		}{
			{"zero", 0, 0, true},
			{"one", 1, 1, false},
			{"even", 2, 1, false},
			{"odd", 3, 1, false},
			{"multiple", 6, 3, false},
			{"prime", 7, 1, false},
			{"large", 13195, 2639, false},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				got, err := largestProperDivisor(tt.aNumber)
				if (err != nil) != tt.wantErr {
					t.Errorf("largestProperDivisor() error = %v, wantErr %v", err, tt.wantErr)
					return
				}
				if got != tt.want {
					t.Errorf("largestProperDivisor() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 12:23:45 $ go mod tidy
2024/06/06 12:23:45 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestLargestProperDivisor
=== RUN   TestLargestProperDivisor/zero
=== RUN   TestLargestProperDivisor/one
=== RUN   TestLargestProperDivisor/even
=== RUN   TestLargestProperDivisor/odd
=== RUN   TestLargestProperDivisor/multiple
=== RUN   TestLargestProperDivisor/prime
=== RUN   TestLargestProperDivisor/large
--- PASS: TestLargestProperDivisor (0.00s)
    --- PASS: TestLargestProperDivisor/zero (0.00s)
    --- PASS: TestLargestProperDivisor/one (0.00s)
    --- PASS: TestLargestProperDivisor/even (0.00s)
    --- PASS: TestLargestProperDivisor/odd (0.00s)
    --- PASS: TestLargestProperDivisor/multiple (0.00s)
    --- PASS: TestLargestProperDivisor/prime (0.00s)
    --- PASS: TestLargestProperDivisor/large (0.00s)
PASS
coverage: 3.8% of statements
ok  	light	0.004s	coverage: 3.8% of statements

DONE 8 tests in 0.319s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:23:45 Executes tests with 4 coverage objects
2024/06/06 12:23:45 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "magicSquareOdd.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func magicSquareOdd(base int) ([][]int, error) {
		if base%2 == 0 || base < 3 {
			return nil, errors.New("base must be odd and > 2")
		}

		grid := make([][]int, base)
		for i := range grid {
			grid[i] = make([]int, base)
		}
		r, number := 0, 0
		size := base * base

		c := base / 2
		for number < size {
			number++
			grid[r][c] = number
			if r == 0 {
				if c == base-1 {
					r++
				} else {
					r = base - 1
					c++
				}
			} else {
				if c == base-1 {
					r--
					c = 0
				} else {
					if grid[r-1][c+1] == 0 {
						r--
						c++
					} else {
						r++
					}
				}
			}
		}

		return grid, nil
	}
	```
2024/06/06 12:23:50 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (5136 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestMagicSquareOdd(t *testing.T) {
		// Test case 1: base is odd and > 2
		grid, err := magicSquareOdd(3)
		if err != nil {
			t.Errorf("Expected nil error, but got %v", err)
		}
		if len(grid) != 3 || len(grid[0]) != 3 {
			t.Errorf("Expected 3x3 grid, but got %dx%d", len(grid), len(grid[0]))
		}

		// Test case 2: base is even
		_, err = magicSquareOdd(4)
		if err == nil {
			t.Errorf("Expected error, but got nil")
		}

		// Test case 3: base is < 3
		_, err = magicSquareOdd(2)
		if err == nil {
			t.Errorf("Expected error, but got nil")
		}
	}
	```
2024/06/06 12:23:50 $ go mod tidy
2024/06/06 12:23:50 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestMagicSquareOdd
--- PASS: TestMagicSquareOdd (0.00s)
PASS
coverage: 11.4% of statements
ok  	light	0.004s	coverage: 11.4% of statements

DONE 1 tests in 0.344s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:23:51 Executes tests with 8 coverage objects
2024/06/06 12:23:51 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "matchBytes.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func matchBytes(s1 []byte, s2 []byte) bool {
		for i := 0; i < len(s1); i++ {
			c1 := s1[i]
			c2 := s2[i]

			if c1 != c2 {
				c1 |= 'a' - 'A'
				c2 |= 'a' - 'A'

				if c1 != c2 || c1 < 'a' || c1 > 'z' {
					return false
				}
			}
		}

		return true
	}
	```
2024/06/06 12:24:05 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (14289 ms) with:
	```golang
	package light

	import (
		"testing"
	)

	func TestMatchBytes(t *testing.T) {
		tests := []struct {
			s1  []byte
			s2  []byte
			want bool
		}{
			{[]byte("Hello"), []byte("Hello"), true},
			{[]byte("Hello"), []byte("hello"), true},
			{[]byte("Hello"), []byte("hello1"), false},
			{[]byte("Hello"), []byte("hello "), false},
			{[]byte("Hello"), []byte("hello\n"), false},
			{[]byte("Hello"), []byte("hello\r"), false},
			{[]byte("Hello"), []byte("hello\t"), false},
			{[]byte("Hello"), []byte("hello\f"), false},
			{[]byte("Hello"), []byte("hello\v"), false},
			{[]byte("Hello"), []byte("hello\b"), false},
			{[]byte("Hello"), []byte("hello\a"), false},
			{[]byte("Hello"), []byte("hello\\"), false},
			{[]byte(""), []byte(""), true},
			{[]byte("a"), []byte("A"), true},
			{[]byte("A"), []byte("a"), true},
		}

		for _, tt := range tests {
			if got := matchBytes(tt.s1, tt.s2); got != tt.want {
				t.Errorf("matchBytes(%q, %q) = %v, want %v", tt.s1, tt.s2, got, tt.want)
			}
		}
	}
	```
2024/06/06 12:24:05 $ go mod tidy
2024/06/06 12:24:05 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestMatchBytes
    matchBytes_test.go:32: matchBytes("Hello", "hello1") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\n") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\r") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\t") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\f") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\v") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\b") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\a") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\\") = true, want false
--- FAIL: TestMatchBytes (0.00s)
FAIL
coverage: 3.8% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestMatchBytes (0.00s)
    matchBytes_test.go:32: matchBytes("Hello", "hello1") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\n") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\r") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\t") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\f") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\v") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\b") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\a") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\\") = true, want false

DONE 1 tests, 1 failure in 0.313s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:24:06 Executes tests with 2 coverage objects
2024/06/06 12:24:06 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "pascalsTriangle.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func pascalsTriangle(rows int) ([][]int, error) {
		if rows < 0 {
			return nil, errors.New("Rows can't be negative!")
		}

		triangle := make([][]int, rows)

		for i := 0; i < rows; i++ {
			triangle[i] = make([]int, i+1)
			triangle[i][0] = 1
			for j := 1; j < i; j++ {
				triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j]
			}
			triangle[i][i] = 1
		}
		return triangle, nil
	}
	```
2024/06/06 12:24:21 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (14838 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestPascalsTriangle(t *testing.T) {
		_, err := pascalsTriangle(-5)
		if err == nil {
			t.Errorf("Expected error for negative rows, but got nil")
		}

		triangle, err := pascalsTriangle(0)
		if err != nil {
			t.Errorf("Expected no error for 0 rows, but got %v", err)
		}
		if len(triangle) != 0 {
			t.Errorf("Expected empty triangle for 0 rows, but got %v", triangle)
		}

		triangle, err = pascalsTriangle(1)
		if err != nil {
			t.Errorf("Expected no error for 1 row, but got %v", err)
		}
		if len(triangle) != 1 || len(triangle[0]) != 1 || triangle[0][0] != 1 {
			t.Errorf("Expected [[1]] for 1 row, but got %v", triangle)
		}

		triangle, err = pascalsTriangle(5)
		if err != nil {
			t.Errorf("Expected no error for 5 rows, but got %v", err)
		}
		if len(triangle) != 5 ||
			len(triangle[0]) != 1 || triangle[0][0] != 1 ||
			len(triangle[1]) != 2 || triangle[1][0] != 1 || triangle[1][1] != 1 ||
			len(triangle[2]) != 3 || triangle[2][0] != 1 || triangle[2][1] != 2 || triangle[2][2] != 1 ||
			len(triangle[3]) != 4 || triangle[3][0] != 1 || triangle[3][1] != 3 || triangle[3][2] != 3 || triangle[3][3] != 1 ||
			len(triangle[4]) != 5 || triangle[4][0] != 1 || triangle[4][1] != 4 || triangle[4][2] != 6 || triangle[4][3] != 4 || triangle[4][4] != 1 {
			t.Errorf("Expected correct Pascal's triangle for 5 rows, but got %v", triangle)
		}
	}
	```
2024/06/06 12:24:21 $ go mod tidy
2024/06/06 12:24:21 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestPascalsTriangle
--- PASS: TestPascalsTriangle (0.00s)
PASS
coverage: 4.7% of statements
ok  	light	0.004s	coverage: 4.7% of statements

DONE 1 tests in 0.312s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:24:21 Executes tests with 4 coverage objects
2024/06/06 12:24:21 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "phoneNumber.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func extractDigits(dirtyNumber string) (cleanNumber string, err error) {
		for _, c := range dirtyNumber {
			if c == ' ' || c == '.' || c == '(' || c == ')' || c == '-' || c == '+' {
				// Remove spaces, dots, parentheses, hyphens and pluses.
				continue
			}
			if c == '-' || c == '@' || c == ':' || c == '!' {
				return "", errors.New("punctuations not permitted")
			}
			if c < '0' || c > '9' {
				return "", errors.New("letters not permitted")
			}
			cleanNumber += string(c)
		}

		return cleanNumber, nil
	}
	```
2024/06/06 12:24:34 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (12550 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestExtractDigits(t *testing.T) {
		tests := []struct {
			name    string
			dirty   string
			want    string
			wantErr bool
		}{
			{"simple", "1234567890", "1234567890", false},
			{"with spaces", "123 456 7890", "1234567890", false},
			{"with dots", "123.456.7890", "1234567890", false},
			{"with parentheses", "(123) 456-7890", "1234567890", false},
			{"with plus", "+1 123 456 7890", "11234567890", false},
			{"with hyphen", "123-456-7890", "1234567890", false},
			{"with punctuation", "123@456:7890", "", true},
			{"with letters", "123abc4567890", "", true},
			{"empty", "", "", false},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				got, err := extractDigits(tt.dirty)
				if (err != nil) != tt.wantErr {
					t.Errorf("extractDigits() error = %v, wantErr %v", err, tt.wantErr)
					return
				}
				if got != tt.want {
					t.Errorf("extractDigits() = %q, want %q", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 12:24:34 $ go mod tidy
2024/06/06 12:24:34 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestExtractDigits
=== RUN   TestExtractDigits/simple
=== RUN   TestExtractDigits/with_spaces
=== RUN   TestExtractDigits/with_dots
=== RUN   TestExtractDigits/with_parentheses
=== RUN   TestExtractDigits/with_plus
=== RUN   TestExtractDigits/with_hyphen
=== RUN   TestExtractDigits/with_punctuation
=== RUN   TestExtractDigits/with_letters
=== RUN   TestExtractDigits/empty
--- PASS: TestExtractDigits (0.00s)
    --- PASS: TestExtractDigits/simple (0.00s)
    --- PASS: TestExtractDigits/with_spaces (0.00s)
    --- PASS: TestExtractDigits/with_dots (0.00s)
    --- PASS: TestExtractDigits/with_parentheses (0.00s)
    --- PASS: TestExtractDigits/with_plus (0.00s)
    --- PASS: TestExtractDigits/with_hyphen (0.00s)
    --- PASS: TestExtractDigits/with_punctuation (0.00s)
    --- PASS: TestExtractDigits/with_letters (0.00s)
    --- PASS: TestExtractDigits/empty (0.00s)
PASS
coverage: 4.3% of statements
ok  	light	0.004s	coverage: 4.3% of statements

DONE 10 tests in 0.327s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:24:34 Executes tests with 5 coverage objects
2024/06/06 12:24:34 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "simpleIfElse.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func simpleIfElse(i int) int {
		if i == 1 {
			return 0
		} else {
			return 1
		}
	}
	```
2024/06/06 12:24:42 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (7542 ms) with:
	```go
	package light

	import "testing"

	func TestSimpleIfElse(t *testing.T) {
		if got, want := simpleIfElse(1), 0; got != want {
			t.Errorf("simpleIfElse(1) = %d, want %d", got, want)
		}
		if got, want := simpleIfElse(2), 1; got != want {
			t.Errorf("simpleIfElse(2) = %d, want %d", got, want)
		}
		if got, want := simpleIfElse(-1), 1; got != want {
			t.Errorf("simpleIfElse(-1) = %d, want %d", got, want)
		}
	}
	```
2024/06/06 12:24:42 $ go mod tidy
2024/06/06 12:24:42 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestSimpleIfElse
--- PASS: TestSimpleIfElse (0.00s)
PASS
coverage: 1.4% of statements
ok  	light	0.004s	coverage: 1.4% of statements

DONE 1 tests in 0.320s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:24:42 Executes tests with 2 coverage objects
2024/06/06 12:24:42 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "simpleSwitchWithReturn.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func simpleSwitchWithReturn(i int) int {
		switch i {
		case 1:
			return 0
		default:
			return 1
		}
	}
	```
2024/06/06 12:24:46 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (3810 ms) with:
	```go
	package light

	import "testing"

	func TestSimpleSwitchWithReturn(t *testing.T) {
		if got, want := simpleSwitchWithReturn(1), 0; got != want {
			t.Errorf("simpleSwitchWithReturn(1) = %d, want %d", got, want)
		}
		if got, want := simpleSwitchWithReturn(2), 1; got != want {
			t.Errorf("simpleSwitchWithReturn(2) = %d, want %d", got, want)
		}
	}
	```
2024/06/06 12:24:46 $ go mod tidy
2024/06/06 12:24:46 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestSimpleSwitchWithReturn
--- PASS: TestSimpleSwitchWithReturn (0.00s)
PASS
coverage: 1.4% of statements
ok  	light	0.004s	coverage: 1.4% of statements

DONE 1 tests in 0.327s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 12:24:46 Executes tests with 3 coverage objects
2024/06/06 12:24:46 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "sort.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func isSorted(a []int) bool {
		i := 0
		for i < len(a)-1 && a[i] <= a[i+1] {
			i++
		}

		return i == len(a)-1
	}
	```
2024/06/06 12:24:57 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (10814 ms) with:
	```go
	package light

	import "testing"

	func TestIsSorted(t *testing.T) {
		tests := []struct {
			name string
			a    []int
			want bool
		}{
			{"already sorted", []int{1, 2, 3, 4, 5}, true},
			{"not sorted", []int{1, 3, 2, 4, 5}, false},
			{"single element", []int{5}, true},
			{"empty slice", []int{}, true},
			{"reverse sorted", []int{5, 4, 3, 2, 1}, false},
			{"same elements", []int{1, 1, 1, 1, 1}, true},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := isSorted(tt.a); got != tt.want {
					t.Errorf("isSorted() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 12:24:57 $ go mod tidy
2024/06/06 12:24:57 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestIsSorted
=== RUN   TestIsSorted/already_sorted
=== RUN   TestIsSorted/not_sorted
=== RUN   TestIsSorted/single_element
=== RUN   TestIsSorted/empty_slice
    sort_test.go:22: isSorted() = false, want true
=== RUN   TestIsSorted/reverse_sorted
=== RUN   TestIsSorted/same_elements
--- FAIL: TestIsSorted (0.00s)
    --- PASS: TestIsSorted/already_sorted (0.00s)
    --- PASS: TestIsSorted/not_sorted (0.00s)
    --- PASS: TestIsSorted/single_element (0.00s)
    --- FAIL: TestIsSorted/empty_slice (0.00s)
    --- PASS: TestIsSorted/reverse_sorted (0.00s)
    --- PASS: TestIsSorted/same_elements (0.00s)
FAIL
coverage: 1.9% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestIsSorted/empty_slice (0.00s)
    sort_test.go:22: isSorted() = false, want true
    --- FAIL: TestIsSorted/empty_slice (0.00s)

=== FAIL: . TestIsSorted (0.00s)

DONE 7 tests, 2 failures in 0.330s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:24:57 Executes tests with 2 coverage objects
2024/06/06 12:24:57 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "typeArrayAccess.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func typeArrayAccess(x []int) int {
		if x[0] == 123 {
			return x[0]
		}

		return 3
	}
	```
2024/06/06 12:25:03 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (5119 ms) with:
	```go
	package light

	import "testing"

	func TestTypeArrayAccess(t *testing.T) {
	 tests := []struct {
	  input    []int
	  expected int
	 }{
	  {[]int{123, 2, 3}, 123},
	  {[]int{1, 2, 3}, 3},
	  {[]int{}, 3},
	  {nil, 3},
	 }

	 for _, test := range tests {
	  if got, want := typeArrayAccess(test.input), test.expected; got != want {
	   t.Errorf("typeArrayAccess(%v) = %d, want %d", test.input, got, want)
	  }
	 }
	}
	```
2024/06/06 12:25:03 $ go mod tidy
2024/06/06 12:25:03 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestTypeArrayAccess
--- FAIL: TestTypeArrayAccess (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56b1c0, 0xc000018060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b1c0?, 0xc000018060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess(0xc000007860)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:17 +0x28b
testing.tRunner(0xc000007860, 0x587028)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayAccess (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56b1c0, 0xc000018060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b1c0?, 0xc000018060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess(0xc000007860)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:17 +0x28b
testing.tRunner(0xc000007860, 0x587028)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

DONE 1 tests, 1 failure in 0.322s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:25:03 Executes tests with 0 coverage objects
2024/06/06 12:25:03 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "typeArrayConsecutiveAccess.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func typeArrayConsecutiveAccess(input []int) int {
		cnt := 0
		if input[0] == 0 {
			cnt++
		}
		if input[1] == 8 {
			cnt++
		}
		return cnt
	}
	```
2024/06/06 12:25:14 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (10722 ms) with:
	Here is the test file "typeArrayConsecutiveAccess_test.go" for the given code:

	```go
	package light

	import "testing"

	func TestTypeArrayConsecutiveAccess(t *testing.T) {
		tests := []struct {
			name string
			input []int
			want int
		}{
			{"zero_at_zero", []int{0, 8, 1}, 2},
			{"not_zero_at_zero", []int{1, 8, 1}, 1},
			{"not_eight_at_one", []int{0, 1, 1}, 1},
			{"empty_array", []int{}, 0},
			{"only_one_element", []int{0}, 1},
			{"only_two_elements", []int{0, 8}, 2},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := typeArrayConsecutiveAccess(tt.input); got != tt.want {
					t.Errorf("typeArrayConsecutiveAccess() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 12:25:14 $ go mod tidy
2024/06/06 12:25:14 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestTypeArrayConsecutiveAccess
=== RUN   TestTypeArrayConsecutiveAccess/zero_at_zero
=== RUN   TestTypeArrayConsecutiveAccess/not_zero_at_zero
=== RUN   TestTypeArrayConsecutiveAccess/not_eight_at_one
=== RUN   TestTypeArrayConsecutiveAccess/empty_array
--- FAIL: TestTypeArrayConsecutiveAccess (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/zero_at_zero (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/not_zero_at_zero (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/not_eight_at_one (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 10 [running]:
testing.tRunner.func1.2({0x56b420, 0xc000018078})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b420?, 0xc000018078?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001b01a0?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:20 +0x138
testing.tRunner(0xc0001b0340, 0xc0000263e0)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayConsecutiveAccess/empty_array (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 10 [running]:
testing.tRunner.func1.2({0x56b420, 0xc000018078})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b420?, 0xc000018078?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001b01a0?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:20 +0x138
testing.tRunner(0xc0001b0340, 0xc0000263e0)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayConsecutiveAccess (0.00s)

DONE 5 tests, 2 failures in 0.315s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:25:14 Executes tests with 0 coverage objects
2024/06/06 12:25:14 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "typeArrayMultidimensionalArrayLength.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func typeArrayMultidimensionalArrayLength(x [][]int) int {
		if len(x) == 2 {
			if len(x[0]) == 2 {
				return 2
			}

			return 1
		}

		return 0
	}
	```
2024/06/06 12:25:25 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (10895 ms) with:
	```go
	package light

	import "testing"

	func TestTypeArrayMultidimensionalArrayLength(t *testing.T) {
		tests := []struct {
			name string
			x    [][]int
			want int
		}{
			{"len(x) == 2, len(x[0]) == 2", [][]int{{1, 2}, {3, 4}}, 2},
			{"len(x) == 2, len(x[0]) != 2", [][]int{{1, 2, 3}, {3, 4}}, 1},
			{"len(x) != 2", [][]int{{1, 2}, {3, 4}, {5, 6}}, 0},
			{"x is empty", [][]int{}, 0},
			{"x[0] is empty", [][]int{{}, {3, 4}}, 0},
		}

		for _, tt := range tests {
			if got := typeArrayMultidimensionalArrayLength(tt.x); got != tt.want {
				t.Errorf("%q. typeArrayMultidimensionalArrayLength() = %v, want %v", tt.name, got, tt.want)
			}
		}
	}
	```
2024/06/06 12:25:25 $ go mod tidy
2024/06/06 12:25:25 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestTypeArrayMultidimensionalArrayLength
    typeArrayMultidimensionalArrayLength_test.go:20: "x[0] is empty". typeArrayMultidimensionalArrayLength() = 1, want 0
--- FAIL: TestTypeArrayMultidimensionalArrayLength (0.00s)
FAIL
coverage: 2.4% of statements
FAIL	light	0.003s

=== Failed
=== FAIL: . TestTypeArrayMultidimensionalArrayLength (0.00s)
    typeArrayMultidimensionalArrayLength_test.go:20: "x[0] is empty". typeArrayMultidimensionalArrayLength() = 1, want 0

DONE 1 tests, 1 failure in 0.353s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:25:26 Executes tests with 3 coverage objects
2024/06/06 12:25:26 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "validateDate.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func validDate(day int, month int, year int) bool {
		monthDays := []int{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}

		if year < 1583 {
			return false
		}
		if month < 1 || month > 12 {
			return false
		}
		if day < 1 {
			return false
		}
		if month == 2 {
			if (year%400) != 0 && (year%4) == 0 {
				if day > 29 {
					return false
				}
			} else {
				if day > 28 {
					return false
				}
			}
		} else {
			if day > monthDays[month-1] {
				return false
			}
		}

		return true
	}
	```
2024/06/06 12:25:38 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (11814 ms) with:
	```golang
	package light

	import "testing"

	func TestValidDate(t *testing.T) {
		tests := []struct {
			day   int
			month int
			year  int
			want  bool
		}{
			{1, 1, 1582, false},
			{1, 1, 1583, true},
			{0, 1, 1583, false},
			{32, 1, 1583, false},
			{1, 0, 1583, false},
			{1, 13, 1583, false},
			{29, 2, 2000, true},
			{29, 2, 1900, false},
			{28, 2, 1900, true},
			{31, 4, 1583, true},
			{30, 4, 1583, true},
			{31, 5, 1583, true},
			{31, 6, 1583, false},
		}

		for _, tt := range tests {
			if got := validDate(tt.day, tt.month, tt.year); got != tt.want {
				t.Errorf("validDate(%d, %d, %d) = %v, want %v", tt.day, tt.month, tt.year, got, tt.want)
			}
		}
	}
	```
2024/06/06 12:25:38 $ go mod tidy
2024/06/06 12:25:38 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestValidDate
    validateDate_test.go:29: validDate(29, 2, 2000) = false, want true
    validateDate_test.go:29: validDate(29, 2, 1900) = true, want false
    validateDate_test.go:29: validDate(31, 4, 1583) = false, want true
--- FAIL: TestValidDate (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestValidDate (0.00s)
    validateDate_test.go:29: validDate(29, 2, 2000) = false, want true
    validateDate_test.go:29: validDate(29, 2, 1900) = true, want false
    validateDate_test.go:29: validDate(31, 4, 1583) = false, want true

DONE 1 tests, 1 failure in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 12:25:38 Executes tests with 7 coverage objects
2024/06/06 12:25:38 Evaluated model "openrouter/perplexity/llama-3-sonar-large-32k-chat" using language "golang" and repository "golang/light": encountered 12 problems: [exit status 1
=== RUN   TestCallLoopConditionsOftenEnough
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(5, 30) = 0, want 3
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(25, 30) = 0, want 12
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(15, 30) = 12, want 15
--- FAIL: TestCallLoopConditionsOftenEnough (0.00s)
FAIL
coverage: 3.8% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestCallLoopConditionsOftenEnough (0.00s)
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(5, 30) = 0, want 3
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(25, 30) = 0, want 12
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(15, 30) = 12, want 15

DONE 1 tests, 1 failure in 0.328s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestCallLoopConditionsOftenEnough
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(5, 30) = 0, want 3
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(25, 30) = 0, want 12
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(15, 30) = 12, want 15
--- FAIL: TestCallLoopConditionsOftenEnough (0.00s)
FAIL
coverage: 3.8% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestCallLoopConditionsOftenEnough (0.00s)
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(5, 30) = 0, want 3
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(25, 30) = 0, want 12
    callLoopConditionsOftenEnough_test.go:20: callLoopConditionsOftenEnough(15, 30) = 12, want 15

DONE 1 tests, 1 failure in 0.328s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestEquilibriumIndices
=== RUN   TestEquilibriumIndices/empty_slice
=== RUN   TestEquilibriumIndices/single_element
=== RUN   TestEquilibriumIndices/no_equilibrium
=== RUN   TestEquilibriumIndices/one_equilibrium
    equilibriumIndices_test.go:22: equilibriumIndices() = 1;3;, want 2;
=== RUN   TestEquilibriumIndices/multiple_equilibriums
--- FAIL: TestEquilibriumIndices (0.00s)
    --- PASS: TestEquilibriumIndices/empty_slice (0.00s)
    --- PASS: TestEquilibriumIndices/single_element (0.00s)
    --- PASS: TestEquilibriumIndices/no_equilibrium (0.00s)
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)
    --- PASS: TestEquilibriumIndices/multiple_equilibriums (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestEquilibriumIndices/one_equilibrium (0.00s)
    equilibriumIndices_test.go:22: equilibriumIndices() = 1;3;, want 2;
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)

=== FAIL: . TestEquilibriumIndices (0.00s)

DONE 6 tests, 2 failures in 0.337s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestEquilibriumIndices
=== RUN   TestEquilibriumIndices/empty_slice
=== RUN   TestEquilibriumIndices/single_element
=== RUN   TestEquilibriumIndices/no_equilibrium
=== RUN   TestEquilibriumIndices/one_equilibrium
    equilibriumIndices_test.go:22: equilibriumIndices() = 1;3;, want 2;
=== RUN   TestEquilibriumIndices/multiple_equilibriums
--- FAIL: TestEquilibriumIndices (0.00s)
    --- PASS: TestEquilibriumIndices/empty_slice (0.00s)
    --- PASS: TestEquilibriumIndices/single_element (0.00s)
    --- PASS: TestEquilibriumIndices/no_equilibrium (0.00s)
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)
    --- PASS: TestEquilibriumIndices/multiple_equilibriums (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestEquilibriumIndices/one_equilibrium (0.00s)
    equilibriumIndices_test.go:22: equilibriumIndices() = 1;3;, want 2;
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)

=== FAIL: . TestEquilibriumIndices (0.00s)

DONE 6 tests, 2 failures in 0.337s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestForLoop
=== RUN   TestForLoop/zero
=== RUN   TestForLoop/one
    forLoop_test.go:20: forLoop() = 0, want 1
=== RUN   TestForLoop/two
    forLoop_test.go:20: forLoop() = 2, want 4
=== RUN   TestForLoop/three
    forLoop_test.go:20: forLoop() = 6, want 9
=== RUN   TestForLoop/ten
    forLoop_test.go:20: forLoop() = 90, want 180
--- FAIL: TestForLoop (0.00s)
    --- PASS: TestForLoop/zero (0.00s)
    --- FAIL: TestForLoop/one (0.00s)
    --- FAIL: TestForLoop/two (0.00s)
    --- FAIL: TestForLoop/three (0.00s)
    --- FAIL: TestForLoop/ten (0.00s)
FAIL
coverage: 2.8% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestForLoop/one (0.00s)
    forLoop_test.go:20: forLoop() = 0, want 1
    --- FAIL: TestForLoop/one (0.00s)

=== FAIL: . TestForLoop/two (0.00s)
    forLoop_test.go:20: forLoop() = 2, want 4
    --- FAIL: TestForLoop/two (0.00s)

=== FAIL: . TestForLoop/three (0.00s)
    forLoop_test.go:20: forLoop() = 6, want 9
    --- FAIL: TestForLoop/three (0.00s)

=== FAIL: . TestForLoop/ten (0.00s)
    forLoop_test.go:20: forLoop() = 90, want 180
    --- FAIL: TestForLoop/ten (0.00s)

=== FAIL: . TestForLoop (0.00s)

DONE 6 tests, 5 failures in 0.333s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestForLoop
=== RUN   TestForLoop/zero
=== RUN   TestForLoop/one
    forLoop_test.go:20: forLoop() = 0, want 1
=== RUN   TestForLoop/two
    forLoop_test.go:20: forLoop() = 2, want 4
=== RUN   TestForLoop/three
    forLoop_test.go:20: forLoop() = 6, want 9
=== RUN   TestForLoop/ten
    forLoop_test.go:20: forLoop() = 90, want 180
--- FAIL: TestForLoop (0.00s)
    --- PASS: TestForLoop/zero (0.00s)
    --- FAIL: TestForLoop/one (0.00s)
    --- FAIL: TestForLoop/two (0.00s)
    --- FAIL: TestForLoop/three (0.00s)
    --- FAIL: TestForLoop/ten (0.00s)
FAIL
coverage: 2.8% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestForLoop/one (0.00s)
    forLoop_test.go:20: forLoop() = 0, want 1
    --- FAIL: TestForLoop/one (0.00s)

=== FAIL: . TestForLoop/two (0.00s)
    forLoop_test.go:20: forLoop() = 2, want 4
    --- FAIL: TestForLoop/two (0.00s)

=== FAIL: . TestForLoop/three (0.00s)
    forLoop_test.go:20: forLoop() = 6, want 9
    --- FAIL: TestForLoop/three (0.00s)

=== FAIL: . TestForLoop/ten (0.00s)
    forLoop_test.go:20: forLoop() = 90, want 180
    --- FAIL: TestForLoop/ten (0.00s)

=== FAIL: . TestForLoop (0.00s)

DONE 6 tests, 5 failures in 0.333s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
# light [light.test]
./jacobiSymbol_test.go:19:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./jacobiSymbol_test.go:19:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)

DONE 0 tests, 1 error in 0.127s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:116
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
# light [light.test]
./jacobiSymbol_test.go:19:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./jacobiSymbol_test.go:19:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)

DONE 0 tests, 1 error in 0.127s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

jacobiSymbol.go exit status 1
=== RUN   TestInitialiseKlarnerRadoSequence
=== RUN   TestInitialiseKlarnerRadoSequence/limit_0
--- FAIL: TestInitialiseKlarnerRadoSequence (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/limit_0 (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 7 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.TestInitialiseKlarnerRadoSequence.func1(0xc000007ba0)
	/tmp/eval-dev-quality744030985/light/klarnerRadoSequence_test.go:24 +0x190
testing.tRunner(0xc000007ba0, 0xc000026240)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestInitialiseKlarnerRadoSequence/limit_0 (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/limit_0 (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 7 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.TestInitialiseKlarnerRadoSequence.func1(0xc000007ba0)
	/tmp/eval-dev-quality744030985/light/klarnerRadoSequence_test.go:24 +0x190
testing.tRunner(0xc000007ba0, 0xc000026240)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestInitialiseKlarnerRadoSequence (0.00s)

DONE 2 tests, 2 failures in 0.333s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestInitialiseKlarnerRadoSequence
=== RUN   TestInitialiseKlarnerRadoSequence/limit_0
--- FAIL: TestInitialiseKlarnerRadoSequence (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/limit_0 (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 7 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.TestInitialiseKlarnerRadoSequence.func1(0xc000007ba0)
	/tmp/eval-dev-quality744030985/light/klarnerRadoSequence_test.go:24 +0x190
testing.tRunner(0xc000007ba0, 0xc000026240)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestInitialiseKlarnerRadoSequence/limit_0 (0.00s)
    --- FAIL: TestInitialiseKlarnerRadoSequence/limit_0 (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 7 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.TestInitialiseKlarnerRadoSequence.func1(0xc000007ba0)
	/tmp/eval-dev-quality744030985/light/klarnerRadoSequence_test.go:24 +0x190
testing.tRunner(0xc000007ba0, 0xc000026240)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestInitialiseKlarnerRadoSequence (0.00s)

DONE 2 tests, 2 failures in 0.333s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
# light [light.test]
./knapsack_test.go:4:2: "math" imported and not used
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./knapsack_test.go:4:2: "math" imported and not used

DONE 0 tests, 1 error in 0.132s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:116
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
# light [light.test]
./knapsack_test.go:4:2: "math" imported and not used
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./knapsack_test.go:4:2: "math" imported and not used

DONE 0 tests, 1 error in 0.132s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

knapsack.go exit status 1
=== RUN   TestMatchBytes
    matchBytes_test.go:32: matchBytes("Hello", "hello1") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\n") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\r") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\t") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\f") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\v") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\b") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\a") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\\") = true, want false
--- FAIL: TestMatchBytes (0.00s)
FAIL
coverage: 3.8% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestMatchBytes (0.00s)
    matchBytes_test.go:32: matchBytes("Hello", "hello1") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\n") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\r") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\t") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\f") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\v") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\b") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\a") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\\") = true, want false

DONE 1 tests, 1 failure in 0.313s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestMatchBytes
    matchBytes_test.go:32: matchBytes("Hello", "hello1") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\n") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\r") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\t") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\f") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\v") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\b") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\a") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\\") = true, want false
--- FAIL: TestMatchBytes (0.00s)
FAIL
coverage: 3.8% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestMatchBytes (0.00s)
    matchBytes_test.go:32: matchBytes("Hello", "hello1") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\n") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\r") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\t") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\f") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\v") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\b") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\a") = true, want false
    matchBytes_test.go:32: matchBytes("Hello", "hello\\") = true, want false

DONE 1 tests, 1 failure in 0.313s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestIsSorted
=== RUN   TestIsSorted/already_sorted
=== RUN   TestIsSorted/not_sorted
=== RUN   TestIsSorted/single_element
=== RUN   TestIsSorted/empty_slice
    sort_test.go:22: isSorted() = false, want true
=== RUN   TestIsSorted/reverse_sorted
=== RUN   TestIsSorted/same_elements
--- FAIL: TestIsSorted (0.00s)
    --- PASS: TestIsSorted/already_sorted (0.00s)
    --- PASS: TestIsSorted/not_sorted (0.00s)
    --- PASS: TestIsSorted/single_element (0.00s)
    --- FAIL: TestIsSorted/empty_slice (0.00s)
    --- PASS: TestIsSorted/reverse_sorted (0.00s)
    --- PASS: TestIsSorted/same_elements (0.00s)
FAIL
coverage: 1.9% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestIsSorted/empty_slice (0.00s)
    sort_test.go:22: isSorted() = false, want true
    --- FAIL: TestIsSorted/empty_slice (0.00s)

=== FAIL: . TestIsSorted (0.00s)

DONE 7 tests, 2 failures in 0.330s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestIsSorted
=== RUN   TestIsSorted/already_sorted
=== RUN   TestIsSorted/not_sorted
=== RUN   TestIsSorted/single_element
=== RUN   TestIsSorted/empty_slice
    sort_test.go:22: isSorted() = false, want true
=== RUN   TestIsSorted/reverse_sorted
=== RUN   TestIsSorted/same_elements
--- FAIL: TestIsSorted (0.00s)
    --- PASS: TestIsSorted/already_sorted (0.00s)
    --- PASS: TestIsSorted/not_sorted (0.00s)
    --- PASS: TestIsSorted/single_element (0.00s)
    --- FAIL: TestIsSorted/empty_slice (0.00s)
    --- PASS: TestIsSorted/reverse_sorted (0.00s)
    --- PASS: TestIsSorted/same_elements (0.00s)
FAIL
coverage: 1.9% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestIsSorted/empty_slice (0.00s)
    sort_test.go:22: isSorted() = false, want true
    --- FAIL: TestIsSorted/empty_slice (0.00s)

=== FAIL: . TestIsSorted (0.00s)

DONE 7 tests, 2 failures in 0.330s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestTypeArrayAccess
--- FAIL: TestTypeArrayAccess (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56b1c0, 0xc000018060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b1c0?, 0xc000018060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess(0xc000007860)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:17 +0x28b
testing.tRunner(0xc000007860, 0x587028)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayAccess (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56b1c0, 0xc000018060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b1c0?, 0xc000018060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess(0xc000007860)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:17 +0x28b
testing.tRunner(0xc000007860, 0x587028)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

DONE 1 tests, 1 failure in 0.322s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestTypeArrayAccess
--- FAIL: TestTypeArrayAccess (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56b1c0, 0xc000018060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b1c0?, 0xc000018060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess(0xc000007860)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:17 +0x28b
testing.tRunner(0xc000007860, 0x587028)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayAccess (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56b1c0, 0xc000018060})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b1c0?, 0xc000018060?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess(0xc000007860)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:17 +0x28b
testing.tRunner(0xc000007860, 0x587028)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

DONE 1 tests, 1 failure in 0.322s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestTypeArrayConsecutiveAccess
=== RUN   TestTypeArrayConsecutiveAccess/zero_at_zero
=== RUN   TestTypeArrayConsecutiveAccess/not_zero_at_zero
=== RUN   TestTypeArrayConsecutiveAccess/not_eight_at_one
=== RUN   TestTypeArrayConsecutiveAccess/empty_array
--- FAIL: TestTypeArrayConsecutiveAccess (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/zero_at_zero (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/not_zero_at_zero (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/not_eight_at_one (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 10 [running]:
testing.tRunner.func1.2({0x56b420, 0xc000018078})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b420?, 0xc000018078?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001b01a0?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:20 +0x138
testing.tRunner(0xc0001b0340, 0xc0000263e0)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayConsecutiveAccess/empty_array (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 10 [running]:
testing.tRunner.func1.2({0x56b420, 0xc000018078})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b420?, 0xc000018078?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001b01a0?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:20 +0x138
testing.tRunner(0xc0001b0340, 0xc0000263e0)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayConsecutiveAccess (0.00s)

DONE 5 tests, 2 failures in 0.315s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestTypeArrayConsecutiveAccess
=== RUN   TestTypeArrayConsecutiveAccess/zero_at_zero
=== RUN   TestTypeArrayConsecutiveAccess/not_zero_at_zero
=== RUN   TestTypeArrayConsecutiveAccess/not_eight_at_one
=== RUN   TestTypeArrayConsecutiveAccess/empty_array
--- FAIL: TestTypeArrayConsecutiveAccess (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/zero_at_zero (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/not_zero_at_zero (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/not_eight_at_one (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 10 [running]:
testing.tRunner.func1.2({0x56b420, 0xc000018078})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b420?, 0xc000018078?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001b01a0?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:20 +0x138
testing.tRunner(0xc0001b0340, 0xc0000263e0)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayConsecutiveAccess/empty_array (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 10 [running]:
testing.tRunner.func1.2({0x56b420, 0xc000018078})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b420?, 0xc000018078?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001b01a0?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:20 +0x138
testing.tRunner(0xc0001b0340, 0xc0000263e0)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayConsecutiveAccess (0.00s)

DONE 5 tests, 2 failures in 0.315s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestTypeArrayMultidimensionalArrayLength
    typeArrayMultidimensionalArrayLength_test.go:20: "x[0] is empty". typeArrayMultidimensionalArrayLength() = 1, want 0
--- FAIL: TestTypeArrayMultidimensionalArrayLength (0.00s)
FAIL
coverage: 2.4% of statements
FAIL	light	0.003s

=== Failed
=== FAIL: . TestTypeArrayMultidimensionalArrayLength (0.00s)
    typeArrayMultidimensionalArrayLength_test.go:20: "x[0] is empty". typeArrayMultidimensionalArrayLength() = 1, want 0

DONE 1 tests, 1 failure in 0.353s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestTypeArrayMultidimensionalArrayLength
    typeArrayMultidimensionalArrayLength_test.go:20: "x[0] is empty". typeArrayMultidimensionalArrayLength() = 1, want 0
--- FAIL: TestTypeArrayMultidimensionalArrayLength (0.00s)
FAIL
coverage: 2.4% of statements
FAIL	light	0.003s

=== Failed
=== FAIL: . TestTypeArrayMultidimensionalArrayLength (0.00s)
    typeArrayMultidimensionalArrayLength_test.go:20: "x[0] is empty". typeArrayMultidimensionalArrayLength() = 1, want 0

DONE 1 tests, 1 failure in 0.353s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestValidDate
    validateDate_test.go:29: validDate(29, 2, 2000) = false, want true
    validateDate_test.go:29: validDate(29, 2, 1900) = true, want false
    validateDate_test.go:29: validDate(31, 4, 1583) = false, want true
--- FAIL: TestValidDate (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestValidDate (0.00s)
    validateDate_test.go:29: validDate(29, 2, 2000) = false, want true
    validateDate_test.go:29: validDate(29, 2, 1900) = true, want false
    validateDate_test.go:29: validDate(31, 4, 1583) = false, want true

DONE 1 tests, 1 failure in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestValidDate
    validateDate_test.go:29: validDate(29, 2, 2000) = false, want true
    validateDate_test.go:29: validDate(29, 2, 1900) = true, want false
    validateDate_test.go:29: validDate(31, 4, 1583) = false, want true
--- FAIL: TestValidDate (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestValidDate (0.00s)
    validateDate_test.go:29: validDate(29, 2, 2000) = false, want true
    validateDate_test.go:29: validDate(29, 2, 1900) = true, want false
    validateDate_test.go:29: validDate(31, 4, 1583) = false, want true

DONE 1 tests, 1 failure in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
]
2024/06/06 16:17:28 Evaluating model "openrouter/perplexity/llama-3-sonar-large-32k-chat" using language "golang" and repository "golang/light"
2024/06/06 16:17:28 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "balancedBrackets.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func hasBalancedBrackets(charArray string) bool {
		brackets := 0
		for _, ch := range charArray {
			if ch == '[' {
				brackets++
			} else if ch == ']' {
				brackets--
			} else {
				return false // Non-bracket characters.
			}
		}

		if brackets < 0 { // Closing bracket before opening bracket.
			return false
		}

		return brackets == 0
	}
	```
2024/06/06 16:17:33 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (4160 ms) with:
	```go
	package light

	import "testing"

	func TestHasBalancedBrackets(t *testing.T) {
		tests := []struct {
			name string
			s    string
			want bool
		}{
			{"empty", "", true},
			{"single open", "[", false},
			{"single close", "]", false},
			{"balanced", "[]", true},
			{"unbalanced", "[[]]", false},
			{"unbalanced2", "][", false},
			{"unbalanced3", "[][][", false},
			{"unbalanced4", "[][]]", true},
			{"non bracket", "abc", false},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := hasBalancedBrackets(tt.s); got != tt.want {
					t.Errorf("hasBalancedBrackets(%q) = %v, want %v", tt.s, got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 16:17:33 $ go mod tidy
2024/06/06 16:17:33 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestHasBalancedBrackets
=== RUN   TestHasBalancedBrackets/empty
=== RUN   TestHasBalancedBrackets/single_open
=== RUN   TestHasBalancedBrackets/single_close
=== RUN   TestHasBalancedBrackets/balanced
=== RUN   TestHasBalancedBrackets/unbalanced
    balancedBrackets_test.go:25: hasBalancedBrackets("[[]]") = true, want false
=== RUN   TestHasBalancedBrackets/unbalanced2
    balancedBrackets_test.go:25: hasBalancedBrackets("][") = true, want false
=== RUN   TestHasBalancedBrackets/unbalanced3
=== RUN   TestHasBalancedBrackets/unbalanced4
    balancedBrackets_test.go:25: hasBalancedBrackets("[][]]") = false, want true
=== RUN   TestHasBalancedBrackets/non_bracket
--- FAIL: TestHasBalancedBrackets (0.00s)
    --- PASS: TestHasBalancedBrackets/empty (0.00s)
    --- PASS: TestHasBalancedBrackets/single_open (0.00s)
    --- PASS: TestHasBalancedBrackets/single_close (0.00s)
    --- PASS: TestHasBalancedBrackets/balanced (0.00s)
    --- FAIL: TestHasBalancedBrackets/unbalanced (0.00s)
    --- FAIL: TestHasBalancedBrackets/unbalanced2 (0.00s)
    --- PASS: TestHasBalancedBrackets/unbalanced3 (0.00s)
    --- FAIL: TestHasBalancedBrackets/unbalanced4 (0.00s)
    --- PASS: TestHasBalancedBrackets/non_bracket (0.00s)
FAIL
coverage: 4.7% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestHasBalancedBrackets/unbalanced (0.00s)
    balancedBrackets_test.go:25: hasBalancedBrackets("[[]]") = true, want false
    --- FAIL: TestHasBalancedBrackets/unbalanced (0.00s)

=== FAIL: . TestHasBalancedBrackets/unbalanced2 (0.00s)
    balancedBrackets_test.go:25: hasBalancedBrackets("][") = true, want false
    --- FAIL: TestHasBalancedBrackets/unbalanced2 (0.00s)

=== FAIL: . TestHasBalancedBrackets/unbalanced4 (0.00s)
    balancedBrackets_test.go:25: hasBalancedBrackets("[][]]") = false, want true
    --- FAIL: TestHasBalancedBrackets/unbalanced4 (0.00s)

=== FAIL: . TestHasBalancedBrackets (0.00s)

DONE 10 tests, 4 failures in 0.336s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:17:33 Executes tests with 5 coverage objects
2024/06/06 16:17:33 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "binarySearch.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func binarySearch(a []int, x int) int {
		index := -1

		min := 0
		max := len(a) - 1

		for index == -1 && min <= max {
			m := (min + max) / 2

			if x == a[m] {
				index = m
			} else if x < a[m] {
				max = m - 1
			} else {
				min = m + 1
			}
		}

		return index
	}
	```
2024/06/06 16:17:40 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (6748 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestBinarySearch(t *testing.T) {
		tests := []struct {
			name string
			a    []int
			x    int
			want int
		}{
			{"found in middle", []int{1, 2, 3, 4, 5}, 3, 2},
			{"found at start", []int{1, 2, 3, 4, 5}, 1, 0},
			{"found at end", []int{1, 2, 3, 4, 5}, 5, 4},
			{"not found", []int{1, 2, 3, 4, 5}, 6, -1},
			{"empty slice", []int{}, 1, -1},
			{"single element, found", []int{1}, 1, 0},
			{"single element, not found", []int{1}, 2, -1},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := binarySearch(tt.a, tt.x); got != tt.want {
					t.Errorf("binarySearch(%v, %d) = %d, want %d", tt.a, tt.x, got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 16:17:40 $ go mod tidy
2024/06/06 16:17:40 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestBinarySearch
=== RUN   TestBinarySearch/found_in_middle
=== RUN   TestBinarySearch/found_at_start
=== RUN   TestBinarySearch/found_at_end
=== RUN   TestBinarySearch/not_found
=== RUN   TestBinarySearch/empty_slice
=== RUN   TestBinarySearch/single_element,_found
=== RUN   TestBinarySearch/single_element,_not_found
--- PASS: TestBinarySearch (0.00s)
    --- PASS: TestBinarySearch/found_in_middle (0.00s)
    --- PASS: TestBinarySearch/found_at_start (0.00s)
    --- PASS: TestBinarySearch/found_at_end (0.00s)
    --- PASS: TestBinarySearch/not_found (0.00s)
    --- PASS: TestBinarySearch/empty_slice (0.00s)
    --- PASS: TestBinarySearch/single_element,_found (0.00s)
    --- PASS: TestBinarySearch/single_element,_not_found (0.00s)
PASS
coverage: 5.2% of statements
ok  	light	0.004s	coverage: 5.2% of statements

DONE 8 tests in 0.314s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 16:17:40 Executes tests with 4 coverage objects
2024/06/06 16:17:40 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "callLoopConditionsOftenEnough.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func callLoopConditionsOftenEnough(x, y int) int {
		if x < 10 || x > 20 {
			return 0
		}

		for i := 0; i < y; i++ {
			if i > 20 {
				x++ // This needs to be executed more than 10 times
			}
		}

		if x > 20 { // This block needs to be reached for full coverage
			x = x / 2
		}

		return x
	}
	```
2024/06/06 16:17:47 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (6463 ms) with:
	```go
	package light

	import "testing"

	func TestCallLoopConditionsOftenEnough(t *testing.T) {
		if got, want := callLoopConditionsOftenEnough(5, 30), 16; got != want {
			t.Errorf("callLoopConditionsOftenEnough(5, 30) = %v, want %v", got, want)
		}
		if got, want := callLoopConditionsOftenEnough(25, 30), 12; got != want {
			t.Errorf("callLoopConditionsOftenEnough(25, 30) = %v, want %v", got, want)
		}
		if got, want := callLoopConditionsOftenEnough(15, 5), 15; got != want {
			t.Errorf("callLoopConditionsOftenEnough(15, 5) = %v, want %v", got, want)
		}
		if got, want := callLoopConditionsOftenEnough(0, 30), 0; got != want {
			t.Errorf("callLoopConditionsOftenEnough(0, 30) = %v, want %v", got, want)
		}
		if got, want := callLoopConditionsOftenEnough(30, 30), 0; got != want {
			t.Errorf("callLoopConditionsOftenEnough(30, 30) = %v, want %v", got, want)
		}
	}
	```
2024/06/06 16:17:47 $ go mod tidy
2024/06/06 16:17:47 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestCallLoopConditionsOftenEnough
    callLoopConditionsOftenEnough_test.go:7: callLoopConditionsOftenEnough(5, 30) = 0, want 16
    callLoopConditionsOftenEnough_test.go:10: callLoopConditionsOftenEnough(25, 30) = 0, want 12
--- FAIL: TestCallLoopConditionsOftenEnough (0.00s)
FAIL
coverage: 2.8% of statements
FAIL	light	0.003s

=== Failed
=== FAIL: . TestCallLoopConditionsOftenEnough (0.00s)
    callLoopConditionsOftenEnough_test.go:7: callLoopConditionsOftenEnough(5, 30) = 0, want 16
    callLoopConditionsOftenEnough_test.go:10: callLoopConditionsOftenEnough(25, 30) = 0, want 12

DONE 1 tests, 1 failure in 0.314s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:17:47 Executes tests with 4 coverage objects
2024/06/06 16:17:47 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "cascadingIfElse.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func cascadingIfElse(i int) int {
		if i == 1 {
			return 2
		} else if i == 3 {
			return 4
		} else {
			return 5
		}
	}
	```
2024/06/06 16:17:53 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (5185 ms) with:
	```go
	package light

	import "testing"

	func TestCascadingIfElse(t *testing.T) {
		if got, want := cascadingIfElse(1), 2; got != want {
			t.Errorf("cascadingIfElse(1) = %d, want %d", got, want)
		}
		if got, want := cascadingIfElse(3), 4; got != want {
			t.Errorf("cascadingIfElse(3) = %d, want %d", got, want)
		}
		if got, want := cascadingIfElse(2), 5; got != want {
			t.Errorf("cascadingIfElse(2) = %d, want %d", got, want)
		}
		if got, want := cascadingIfElse(4), 5; got != want {
			t.Errorf("cascadingIfElse(4) = %d, want %d", got, want)
		}
	}
	```
2024/06/06 16:17:53 $ go mod tidy
2024/06/06 16:17:53 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestCascadingIfElse
--- PASS: TestCascadingIfElse (0.00s)
PASS
coverage: 2.4% of statements
ok  	light	0.004s	coverage: 2.4% of statements

DONE 1 tests in 0.258s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 16:17:53 Executes tests with 3 coverage objects
2024/06/06 16:17:53 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "collatzCalculator.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func computeStepCount(start int) (int, error) {
		if start <= 0 {
			return 0, errors.New("Only positive integers are allowed")
		}
		if start == 1 {
			return 0, nil
		}
		var next int

		if start%2 == 0 {
			next = start / 2
		} else {
			next = 3*start + 1
		}

		n, err := computeStepCount(next)
		if err != nil {
			return 0, err
		}

		return 1 + n, nil
	}
	```
2024/06/06 16:18:02 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (8784 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestComputeStepCount(t *testing.T) {
		tests := []struct {
			start int
			want  int
			err   error
		}{
			{1, 0, nil},
			{2, 1, nil},
			{3, 7, nil},
			{4, 2, nil},
			{5, 5, nil},
			{6, 8, nil},
			{7, 16, nil},
			{8, 3, nil},
			{9, 19, nil},
			{10, 6, nil},
			{-1, 0, errors.New("Only positive integers are allowed")},
			{0, 0, errors.New("Only positive integers are allowed")},
		}

		for _, tt := range tests {
			got, err := computeStepCount(tt.start)
			if err != nil && tt.err == nil {
				t.Errorf("computeStepCount(%d) returned error %v, want nil", tt.start, err)
			}
			if err == nil && tt.err != nil {
				t.Errorf("computeStepCount(%d) returned nil, want error %v", tt.start, tt.err)
			}
			if err != nil && tt.err != nil {
				if err.Error() != tt.err.Error() {
					t.Errorf("computeStepCount(%d) returned error %v, want error %v", tt.start, err, tt.err)
				}
			}
			if got != tt.want {
				t.Errorf("computeStepCount(%d) = %d, want %d", tt.start, got, tt.want)
			}
		}
	}
	```
2024/06/06 16:18:02 $ go mod tidy
2024/06/06 16:18:02 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
# light [light.test]
./collatzCalculator_test.go:23:11: undefined: errors
./collatzCalculator_test.go:24:10: undefined: errors
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./collatzCalculator_test.go:23:11: undefined: errors
./collatzCalculator_test.go:24:10: undefined: errors

DONE 0 tests, 2 errors in 0.133s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:18:02 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "conditionsAnd.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func conditionsAnd(x rune, y rune) bool {
		if x == 'A' && y == 'B' {
			return true
		}

		return false
	}
	```
2024/06/06 16:18:06 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (4303 ms) with:
	```go
	package light

	import "testing"

	func TestConditionsAnd(t *testing.T) {
		if !conditionsAnd('A', 'B') {
			t.Errorf("conditionsAnd('A', 'B') should return true, but got false")
		}

		if conditionsAnd('A', 'C') {
			t.Errorf("conditionsAnd('A', 'C') should return false, but got true")
		}

		if conditionsAnd('D', 'B') {
			t.Errorf("conditionsAnd('D', 'B') should return false, but got true")
		}

		if conditionsAnd('D', 'C') {
			t.Errorf("conditionsAnd('D', 'C') should return false, but got true")
		}
	}
	```
2024/06/06 16:18:06 $ go mod tidy
2024/06/06 16:18:06 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestConditionsAnd
--- PASS: TestConditionsAnd (0.00s)
PASS
coverage: 1.4% of statements
ok  	light	0.004s	coverage: 1.4% of statements

DONE 1 tests in 0.344s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 16:18:07 Executes tests with 2 coverage objects
2024/06/06 16:18:07 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "equilibriumIndices.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "strconv"

	func equilibriumIndices(sequence []int) (indexList string) {
		// Determine total sum.
		var totalSum int
		for _, n := range sequence {
			totalSum += n
		}
		// Compare running sum to remaining sum to find equilibrium indices.
		var runningSum int
		for i, n := range sequence {
			if totalSum-runningSum-n == runningSum {
				indexList += strconv.Itoa(i) + ";"
			}
			runningSum += n
		}

		return indexList
	}
	```
2024/06/06 16:18:12 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (5830 ms) with:
	Here is the test file "equilibriumIndices_test.go" for the given code:

	```golang
	package light

	import (
		"testing"
	)

	func TestEquilibriumIndices(t *testing.T) {
		tests := []struct {
			name     string
			sequence []int
			want     string
		}{
			{"empty sequence", []int{}, ""},
			{"single element", []int{5}, "0;"},
			{"no equilibrium", []int{1, 2, 3, 4}, ""},
			{"one equilibrium", []int{-7, 1, 5, 2, -4, 3, 0}, "3;"},
			{"multiple equilibriums", []int{-2, 5, 3, -1, 4, -3, 2}, "1;3;"},
			{"all equilibriums", []int{0, 0, 0, 0}, "0;1;2;3;"},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := equilibriumIndices(tt.sequence); got != tt.want {
					t.Errorf("equilibriumIndices() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 16:18:12 $ go mod tidy
2024/06/06 16:18:13 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestEquilibriumIndices
=== RUN   TestEquilibriumIndices/empty_sequence
=== RUN   TestEquilibriumIndices/single_element
=== RUN   TestEquilibriumIndices/no_equilibrium
=== RUN   TestEquilibriumIndices/one_equilibrium
    equilibriumIndices_test.go:24: equilibriumIndices() = 3;6;, want 3;
=== RUN   TestEquilibriumIndices/multiple_equilibriums
    equilibriumIndices_test.go:24: equilibriumIndices() = , want 1;3;
=== RUN   TestEquilibriumIndices/all_equilibriums
--- FAIL: TestEquilibriumIndices (0.00s)
    --- PASS: TestEquilibriumIndices/empty_sequence (0.00s)
    --- PASS: TestEquilibriumIndices/single_element (0.00s)
    --- PASS: TestEquilibriumIndices/no_equilibrium (0.00s)
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)
    --- FAIL: TestEquilibriumIndices/multiple_equilibriums (0.00s)
    --- PASS: TestEquilibriumIndices/all_equilibriums (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestEquilibriumIndices/one_equilibrium (0.00s)
    equilibriumIndices_test.go:24: equilibriumIndices() = 3;6;, want 3;
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)

=== FAIL: . TestEquilibriumIndices/multiple_equilibriums (0.00s)
    equilibriumIndices_test.go:24: equilibriumIndices() = , want 1;3;
    --- FAIL: TestEquilibriumIndices/multiple_equilibriums (0.00s)

=== FAIL: . TestEquilibriumIndices (0.00s)

DONE 7 tests, 3 failures in 0.328s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:18:13 Executes tests with 4 coverage objects
2024/06/06 16:18:13 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "forLoop.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func forLoop(s int) int {
		sum := 0
		for i := 0; i < s; i++ {
			sum = sum + i
		}
		for i := 0; i < s; i++ {
			sum = sum + i
		}

		return sum
	}
	```
2024/06/06 16:18:16 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (3506 ms) with:
	```go
	package light

	import "testing"

	func TestForLoop(t *testing.T) {
		type args struct {
			s int
		}
		tests := []struct {
			name string
			args args
			want int
		}{
			{"positive", args{5}, 20},
			{"zero", args{0}, 0},
			{"negative", args{-5}, 0},
			{"one", args{1}, 0},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := forLoop(tt.args.s); got != tt.want {
					t.Errorf("forLoop() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 16:18:16 $ go mod tidy
2024/06/06 16:18:16 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestForLoop
=== RUN   TestForLoop/positive
=== RUN   TestForLoop/zero
=== RUN   TestForLoop/negative
=== RUN   TestForLoop/one
--- PASS: TestForLoop (0.00s)
    --- PASS: TestForLoop/positive (0.00s)
    --- PASS: TestForLoop/zero (0.00s)
    --- PASS: TestForLoop/negative (0.00s)
    --- PASS: TestForLoop/one (0.00s)
PASS
coverage: 2.8% of statements
ok  	light	0.004s	coverage: 2.8% of statements

DONE 5 tests in 0.323s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 16:18:17 Executes tests with 3 coverage objects
2024/06/06 16:18:17 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "jacobiSymbol.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import (
		"fmt"
	)

	func jacobiSymbol(k, n uint64) (int, error) {
		if k < 0 || n%2 == 0 {
			return 0, fmt.Errorf("Invalid value. k = %d, n = %d", k, n)
		}
		k %= n
		jacobi := 1
		for k > 0 {
			for k%2 == 0 {
				k /= 2
				r := n % 8
				if r == 3 || r == 5 {
					jacobi = -jacobi
				}
			}
			temp := n
			n = k
			k = temp
			if k%4 == 3 && n%4 == 3 {
				jacobi = -jacobi
			}
			k %= n
		}
		if n == 1 {
			return jacobi, nil
		}
		return 0, nil
	}
	```
2024/06/06 16:18:29 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (11779 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestJacobiSymbol(t *testing.T) {
		tests := []struct {
			k    uint64
			n    uint64
			want int
			err  error
		}{
			{1, 3, 1, nil},
			{2, 3, 0, nil},
			{3, 3, 0, nil},
			{4, 3, 1, nil},
			{5, 3, 1, nil},
			{6, 3, 0, nil},
			{7, 3, 1, nil},
			{8, 3, 1, nil},
			{-1, 3, 0, fmt.Errorf("Invalid value. k = -1, n = 3")},
			{0, 3, 0, fmt.Errorf("Invalid value. k = 0, n = 3")},
			{1, 0, 0, fmt.Errorf("Invalid value. k = 1, n = 0")},
			{1, 2, 0, fmt.Errorf("Invalid value. k = 1, n = 2")},
		}

		for _, tt := range tests {
			got, err := jacobiSymbol(tt.k, tt.n)
			if err != nil && tt.err == nil {
				t.Errorf("jacobiSymbol(%d, %d) returned error %v, want nil", tt.k, tt.n, err)
			} else if err == nil && tt.err != nil {
				t.Errorf("jacobiSymbol(%d, %d) returned nil, want error %v", tt.k, tt.n, tt.err)
			} else if err != nil && tt.err != nil {
				if err.Error() != tt.err.Error() {
					t.Errorf("jacobiSymbol(%d, %d) returned error %v, want error %v", tt.k, tt.n, err, tt.err)
				}
			} else if got != tt.want {
				t.Errorf("jacobiSymbol(%d, %d) = %d, want %d", tt.k, tt.n, got, tt.want)
			}
		}
	}
	```
2024/06/06 16:18:29 $ go mod tidy
2024/06/06 16:18:29 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
# light [light.test]
./jacobiSymbol_test.go:22:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
./jacobiSymbol_test.go:22:14: undefined: fmt
./jacobiSymbol_test.go:23:13: undefined: fmt
./jacobiSymbol_test.go:24:13: undefined: fmt
./jacobiSymbol_test.go:25:13: undefined: fmt
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./jacobiSymbol_test.go:22:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
./jacobiSymbol_test.go:22:14: undefined: fmt
./jacobiSymbol_test.go:23:13: undefined: fmt
./jacobiSymbol_test.go:24:13: undefined: fmt
./jacobiSymbol_test.go:25:13: undefined: fmt

DONE 0 tests, 5 errors in 0.160s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:18:29 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "klarnerRadoSequence.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "math"

	func initialiseKlarnerRadoSequence(limit int) []int {
		result := make([]int, limit+1)
		i2, i3 := 1, 1
		m2, m3 := 1, 1

		for i := 1; i <= limit; i++ {
			minimum := int(math.Min(float64(m2), float64(m3)))
			result[i] = minimum
			if m2 == minimum {
				m2 = result[i2]*2 + 1
				i2 += 1
			}
			if m3 == minimum {
				m3 = result[i3]*3 + 1
				i3 += 1
			}
		}

		return result
	}
	```
2024/06/06 16:18:46 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (17384 ms) with:
	```golang
	package light

	import (
		"math"
		"testing"
	)

	func TestInitialiseKlarnerRadoSequence(t *testing.T) {
		tests := []struct {
			limit int
			want  []int
		}{
			{1, []int{0, 1}},
			{2, []int{0, 1, 2}},
			{3, []int{0, 1, 2, 3}},
			{4, []int{0, 1, 2, 3, 4}},
			{5, []int{0, 1, 2, 3, 4, 5}},
			{6, []int{0, 1, 2, 3, 4, 5, 6}},
			{7, []int{0, 1, 2, 3, 4, 5, 6, 7}},
			{8, []int{0, 1, 2, 3, 4, 5, 6, 7, 8}},
			{9, []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
			{10, []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}},
		}

		for _, tt := range tests {
			got := initialiseKlarnerRadoSequence(tt.limit)
			if len(got) != len(tt.want) {
				t.Errorf("initialiseKlarnerRadoSequence(%d) = %v, want %v", tt.limit, got, tt.want)
			}
			for i := 0; i < len(tt.want); i++ {
				if got[i] != tt.want[i] {
					t.Errorf("initialiseKlarnerRadoSequence(%d)[%d] = %v, want %v", tt.limit, i, got[i], tt.want[i])
				}
			}
		}

		// Test with a large limit to ensure the implementation is correct
		largeLimit := 100
		wantLarge := make([]int, largeLimit+1)
		i2, i3 := 1, 1
		m2, m3 := 1, 1
		for i := 1; i <= largeLimit; i++ {
			minimum := int(math.Min(float64(m2), float64(m3)))
			wantLarge[i] = minimum
			if m2 == minimum {
				m2 = wantLarge[i2]*2 + 1
				i2 += 1
			}
			if m3 == minimum {
				m3 = wantLarge[i3]*3 + 1
				i3 += 1
			}
		}

		gotLarge := initialiseKlarnerRadoSequence(largeLimit)
		if len(gotLarge) != len(wantLarge) {
			t.Errorf("initialiseKlarnerRadoSequence(%d) = %v, want %v", largeLimit, gotLarge, wantLarge)
		}
		for i := 0; i < len(wantLarge); i++ {
			if gotLarge[i] != wantLarge[i] {
				t.Errorf("initialiseKlarnerRadoSequence(%d)[%d] = %v, want %v", largeLimit, i, gotLarge[i], wantLarge[i])
			}
		}
	}
	```
2024/06/06 16:18:46 $ go mod tidy
2024/06/06 16:18:46 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestInitialiseKlarnerRadoSequence
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(2)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[10] = 21, want 10
--- FAIL: TestInitialiseKlarnerRadoSequence (0.00s)
FAIL
coverage: 6.2% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestInitialiseKlarnerRadoSequence (0.00s)
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(2)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[10] = 21, want 10

DONE 1 tests, 1 failure in 0.344s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:18:47 Executes tests with 3 coverage objects
2024/06/06 16:18:47 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "knapsack.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "math"

	type Item struct {
		weight int
		value  int
	}

	func maximumValue(maximumWeight int, items []Item) int {
		knapsack := make([][]int, len(items)+1)
		for item := range knapsack {
			knapsack[item] = make([]int, maximumWeight+1)
			for weight := range knapsack[item] {
				knapsack[item][weight] = 0 // Return 0 if not filled
			}
		}

		for item := 0; item <= len(items); item++ {
			for weight := 0; weight <= maximumWeight; weight++ {
				if item == 0 || weight == 0 {
					knapsack[item][weight] = 0
				} else if items[item-1].weight > weight {
					knapsack[item][weight] = knapsack[item-1][weight]
				} else {
					itemValue := items[item-1].value
					itemWeight := items[item-1].weight
					knapsack[item][weight] = int(math.Max(float64(itemValue+knapsack[item-1][weight-itemWeight]), float64(knapsack[item-1][weight])))
				}
			}
		}

		return knapsack[len(items)][maximumWeight]
	}
	```
2024/06/06 16:18:53 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (5666 ms) with:
	Here is the test file for the provided Go code:

	```go
	package light

	import (
		"testing"
	)

	func TestMaximumValue(t *testing.T) {
		tests := []struct {
			maximumWeight int
			items         []Item
			expected      int
		}{
			{10, []Item{{5, 60}, {3, 50}, {4, 70}, {5, 30}}, 130},
			{7, []Item{{1, 1}, {3, 4}, {4, 5}, {5, 7}}, 9},
			{5, []Item{{2, 3}, {3, 4}, {4, 8}, {5, 8}}, 7},
			{3, []Item{{1, 1}, {2, 6}, {3, 18}}, 8},
			{0, []Item{{1, 1}, {2, 6}, {3, 18}}, 0},
			{10, []Item{}, 0},
		}

		for _, test := range tests {
			if got, want := maximumValue(test.maximumWeight, test.items), test.expected; got != want {
				t.Errorf("maximumValue(%d, %v) = %d, want %d", test.maximumWeight, test.items, got, want)
			}
		}
	}
	```
2024/06/06 16:18:53 $ go mod tidy
2024/06/06 16:18:53 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestMaximumValue
    knapsack_test.go:23: maximumValue(5, [{2 3} {3 4} {4 8} {5 8}]) = 8, want 7
    knapsack_test.go:23: maximumValue(3, [{1 1} {2 6} {3 18}]) = 18, want 8
--- FAIL: TestMaximumValue (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestMaximumValue (0.00s)
    knapsack_test.go:23: maximumValue(5, [{2 3} {3 4} {4 8} {5 8}]) = 8, want 7
    knapsack_test.go:23: maximumValue(3, [{1 1} {2 6} {3 18}]) = 18, want 8

DONE 1 tests, 1 failure in 0.334s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:18:53 Executes tests with 5 coverage objects
2024/06/06 16:18:53 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "largestProperDivisor.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "fmt"

	func largestProperDivisor(aNumber int) (int, error) {
		if aNumber < 1 {
			return 0, fmt.Errorf("Argument must be >= 1: %d", aNumber)
		}

		if (aNumber & 1) == 0 {
			return aNumber >> 1, nil
		}

		for p := 3; p*p <= aNumber; p += 2 {
			if aNumber%p == 0 {
				return aNumber / p, nil
			}
		}

		return 1, nil
	}
	```
2024/06/06 16:18:59 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (5741 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestLargestProperDivisor(t *testing.T) {
		tests := []struct {
			name    string
			aNumber int
			want    int
			wantErr bool
		}{
			{"less than 1", 0, 0, true},
			{"even number", 4, 2, false},
			{"odd number", 9, 3, false},
			{"prime number", 7, 1, false},
			{"large number", 100, 50, false},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				got, err := largestProperDivisor(tt.aNumber)
				if (err != nil) != tt.wantErr {
					t.Errorf("largestProperDivisor() error = %v, wantErr %v", err, tt.wantErr)
					return
				}
				if got != tt.want {
					t.Errorf("largestProperDivisor() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 16:18:59 $ go mod tidy
2024/06/06 16:18:59 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestLargestProperDivisor
=== RUN   TestLargestProperDivisor/less_than_1
=== RUN   TestLargestProperDivisor/even_number
=== RUN   TestLargestProperDivisor/odd_number
=== RUN   TestLargestProperDivisor/prime_number
=== RUN   TestLargestProperDivisor/large_number
--- PASS: TestLargestProperDivisor (0.00s)
    --- PASS: TestLargestProperDivisor/less_than_1 (0.00s)
    --- PASS: TestLargestProperDivisor/even_number (0.00s)
    --- PASS: TestLargestProperDivisor/odd_number (0.00s)
    --- PASS: TestLargestProperDivisor/prime_number (0.00s)
    --- PASS: TestLargestProperDivisor/large_number (0.00s)
PASS
coverage: 3.8% of statements
ok  	light	0.003s	coverage: 3.8% of statements

DONE 6 tests in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 16:19:00 Executes tests with 4 coverage objects
2024/06/06 16:19:00 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "magicSquareOdd.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func magicSquareOdd(base int) ([][]int, error) {
		if base%2 == 0 || base < 3 {
			return nil, errors.New("base must be odd and > 2")
		}

		grid := make([][]int, base)
		for i := range grid {
			grid[i] = make([]int, base)
		}
		r, number := 0, 0
		size := base * base

		c := base / 2
		for number < size {
			number++
			grid[r][c] = number
			if r == 0 {
				if c == base-1 {
					r++
				} else {
					r = base - 1
					c++
				}
			} else {
				if c == base-1 {
					r--
					c = 0
				} else {
					if grid[r-1][c+1] == 0 {
						r--
						c++
					} else {
						r++
					}
				}
			}
		}

		return grid, nil
	}
	```
2024/06/06 16:19:08 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (8091 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestMagicSquareOdd(t *testing.T) {
		_, err := magicSquareOdd(2)
		if err == nil {
			t.Errorf("Expected error for even base, but got nil")
		}

		_, err = magicSquareOdd(1)
		if err == nil {
			t.Errorf("Expected error for base < 3, but got nil")
		}

		grid, err := magicSquareOdd(3)
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
		}
		if len(grid) != 3 || len(grid[0]) != 3 {
			t.Errorf("Expected 3x3 grid, but got %dx%d", len(grid), len(grid[0]))
		}
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				if grid[i][j] < 1 || grid[i][j] > 9 {
					t.Errorf("Expected number in range 1-9, but got %d at (%d, %d)", grid[i][j], i, j)
				}
			}
		}

		grid, err = magicSquareOdd(5)
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
		}
		if len(grid) != 5 || len(grid[0]) != 5 {
			t.Errorf("Expected 5x5 grid, but got %dx%d", len(grid), len(grid[0]))
		}
		for i := 0; i < 5; i++ {
			for j := 0; j < 5; j++ {
				if grid[i][j] < 1 || grid[i][j] > 25 {
					t.Errorf("Expected number in range 1-25, but got %d at (%d, %d)", grid[i][j], i, j)
				}
			}
		}
	}
	```
2024/06/06 16:19:08 $ go mod tidy
2024/06/06 16:19:08 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestMagicSquareOdd
--- PASS: TestMagicSquareOdd (0.00s)
PASS
coverage: 11.4% of statements
ok  	light	0.004s	coverage: 11.4% of statements

DONE 1 tests in 0.337s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 16:19:08 Executes tests with 8 coverage objects
2024/06/06 16:19:08 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "matchBytes.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func matchBytes(s1 []byte, s2 []byte) bool {
		for i := 0; i < len(s1); i++ {
			c1 := s1[i]
			c2 := s2[i]

			if c1 != c2 {
				c1 |= 'a' - 'A'
				c2 |= 'a' - 'A'

				if c1 != c2 || c1 < 'a' || c1 > 'z' {
					return false
				}
			}
		}

		return true
	}
	```
2024/06/06 16:19:17 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (9086 ms) with:
	```golang
	package light

	import "testing"

	func TestMatchBytes(t *testing.T) {
		tests := []struct {
			s1 []byte
			s2 []byte
			want bool
		}{
			{[]byte("Hello"), []byte("Hello"), true},
			{[]byte("Hello"), []byte("hello"), true},
			{[]byte("Hello"), []byte("hello "), true},
			{[]byte("Hello"), []byte("hello\t"), true},
			{[]byte("Hello"), []byte("hello\n"), true},
			{[]byte("Hello"), []byte("hello\r"), true},
			{[]byte("Hello"), []byte("hello\f"), true},
			{[]byte("Hello"), []byte("hello\v"), true},
			{[]byte("Hello"), []byte("hello "), false},
			{[]byte("Hello"), []byte("helllo"), false},
			{[]byte("Hello"), []byte("helloo"), false},
			{[]byte("Hello"), []byte("helo"), false},
			{[]byte("Hello"), []byte(""), false},
			{[]byte(""), []byte("Hello"), false},
			{[]byte(""), []byte(""), true},
		}

		for _, tt := range tests {
			if got := matchBytes(tt.s1, tt.s2); got != tt.want {
				t.Errorf("matchBytes(%q, %q) = %v, want %v", tt.s1, tt.s2, got, tt.want)
			}
		}
	}
	```
2024/06/06 16:19:17 $ go mod tidy
2024/06/06 16:19:17 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestMatchBytes
    matchBytes_test.go:30: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:30: matchBytes("Hello", "helloo") = true, want false
--- FAIL: TestMatchBytes (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56c1e0, 0xc000018030})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c1e0?, 0xc000018030?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.matchBytes(...)
	/tmp/eval-dev-quality744030985/light/matchBytes.go:6
light.TestMatchBytes(0xc000007860)
	/tmp/eval-dev-quality744030985/light/matchBytes_test.go:29 +0xa10
testing.tRunner(0xc000007860, 0x588040)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.004s

=== Failed
=== FAIL: . TestMatchBytes (0.00s)
    matchBytes_test.go:30: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:30: matchBytes("Hello", "helloo") = true, want false
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56c1e0, 0xc000018030})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c1e0?, 0xc000018030?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.matchBytes(...)
	/tmp/eval-dev-quality744030985/light/matchBytes.go:6
light.TestMatchBytes(0xc000007860)
	/tmp/eval-dev-quality744030985/light/matchBytes_test.go:29 +0xa10
testing.tRunner(0xc000007860, 0x588040)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

DONE 1 tests, 1 failure in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:19:18 Executes tests with 0 coverage objects
2024/06/06 16:19:18 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "pascalsTriangle.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func pascalsTriangle(rows int) ([][]int, error) {
		if rows < 0 {
			return nil, errors.New("Rows can't be negative!")
		}

		triangle := make([][]int, rows)

		for i := 0; i < rows; i++ {
			triangle[i] = make([]int, i+1)
			triangle[i][0] = 1
			for j := 1; j < i; j++ {
				triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j]
			}
			triangle[i][i] = 1
		}
		return triangle, nil
	}
	```
2024/06/06 16:19:26 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (7880 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestPascalsTriangle(t *testing.T) {
		tests := []struct {
			name    string
			rows    int
			want    [][]int
			wantErr bool
		}{
			{"Positive Rows", 5, [][]int{{1}, {1, 1}, {1, 2, 1}, {1, 3, 3, 1}, {1, 4, 6, 4, 1}}, false},
			{"Zero Rows", 0, [][]int{}, false},
			{"Negative Rows", -5, nil, true},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				got, err := pascalsTriangle(tt.rows)
				if (err != nil) != tt.wantErr {
					t.Errorf("pascalsTriangle() error = %v, wantErr %v", err, tt.wantErr)
					return
				}
				if !isEqual(got, tt.want) {
					t.Errorf("pascalsTriangle() = %v, want %v", got, tt.want)
				}
			})
		}
	}

	func isEqual(a, b [][]int) bool {
		if len(a) != len(b) {
			return false
		}
		for i := range a {
			if len(a[i]) != len(b[i]) {
				return false
			}
			for j := range a[i] {
				if a[i][j] != b[i][j] {
					return false
				}
			}
		}
		return true
	}
	```
2024/06/06 16:19:26 $ go mod tidy
2024/06/06 16:19:26 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestPascalsTriangle
=== RUN   TestPascalsTriangle/Positive_Rows
=== RUN   TestPascalsTriangle/Zero_Rows
=== RUN   TestPascalsTriangle/Negative_Rows
--- PASS: TestPascalsTriangle (0.00s)
    --- PASS: TestPascalsTriangle/Positive_Rows (0.00s)
    --- PASS: TestPascalsTriangle/Zero_Rows (0.00s)
    --- PASS: TestPascalsTriangle/Negative_Rows (0.00s)
PASS
coverage: 4.7% of statements
ok  	light	0.004s	coverage: 4.7% of statements

DONE 4 tests in 0.325s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 16:19:27 Executes tests with 4 coverage objects
2024/06/06 16:19:27 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "phoneNumber.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	import "errors"

	func extractDigits(dirtyNumber string) (cleanNumber string, err error) {
		for _, c := range dirtyNumber {
			if c == ' ' || c == '.' || c == '(' || c == ')' || c == '-' || c == '+' {
				// Remove spaces, dots, parentheses, hyphens and pluses.
				continue
			}
			if c == '-' || c == '@' || c == ':' || c == '!' {
				return "", errors.New("punctuations not permitted")
			}
			if c < '0' || c > '9' {
				return "", errors.New("letters not permitted")
			}
			cleanNumber += string(c)
		}

		return cleanNumber, nil
	}
	```
2024/06/06 16:19:35 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (8369 ms) with:
	```go
	package light

	import (
		"testing"
	)

	func TestExtractDigits(t *testing.T) {
		tests := []struct {
			dirtyNumber string
			want         string
			wantErr      bool
		}{
			{"1234567890", "1234567890", false},
			{"123 456 7890", "1234567890", false},
			{"(123) 456-7890", "1234567890", false},
			{"123.456.7890", "1234567890", false},
			{"+1 (123) 456-7890", "1234567890", false},
			{"123-456-7890", "1234567890", false},
			{"123@456:7890", "", true},
			{"123abc456", "", true},
			{"123456", "", true},
			{"", "", false},
		}

		for _, tt := range tests {
			got, err := extractDigits(tt.dirtyNumber)
			if (err != nil) != tt.wantErr {
				t.Errorf("extractDigits(%q) error = %v, wantErr %v", tt.dirtyNumber, err, tt.wantErr)
				continue
			}
			if got != tt.want {
				t.Errorf("extractDigits(%q) = %q, want %q", tt.dirtyNumber, got, tt.want)
			}
		}
	}
	```
2024/06/06 16:19:35 $ go mod tidy
2024/06/06 16:19:35 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestExtractDigits
    phoneNumber_test.go:32: extractDigits("+1 (123) 456-7890") = "11234567890", want "1234567890"
    phoneNumber_test.go:28: extractDigits("123456") error = <nil>, wantErr true
--- FAIL: TestExtractDigits (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestExtractDigits (0.00s)
    phoneNumber_test.go:32: extractDigits("+1 (123) 456-7890") = "11234567890", want "1234567890"
    phoneNumber_test.go:28: extractDigits("123456") error = <nil>, wantErr true

DONE 1 tests, 1 failure in 0.311s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:19:36 Executes tests with 5 coverage objects
2024/06/06 16:19:36 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "simpleIfElse.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func simpleIfElse(i int) int {
		if i == 1 {
			return 0
		} else {
			return 1
		}
	}
	```
2024/06/06 16:19:39 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (3634 ms) with:
	```go
	package light

	import "testing"

	func TestSimpleIfElse(t *testing.T) {
		if got, want := simpleIfElse(1), 0; got != want {
			t.Errorf("simpleIfElse(1) = %d, want %d", got, want)
		}
		if got, want := simpleIfElse(0), 1; got != want {
			t.Errorf("simpleIfElse(0) = %d, want %d", got, want)
		}
		if got, want := simpleIfElse(2), 1; got != want {
			t.Errorf("simpleIfElse(2) = %d, want %d", got, want)
		}
	}
	```
2024/06/06 16:19:39 $ go mod tidy
2024/06/06 16:19:39 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestSimpleIfElse
--- PASS: TestSimpleIfElse (0.00s)
PASS
coverage: 1.4% of statements
ok  	light	0.002s	coverage: 1.4% of statements

DONE 1 tests in 0.348s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 16:19:40 Executes tests with 2 coverage objects
2024/06/06 16:19:40 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "simpleSwitchWithReturn.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func simpleSwitchWithReturn(i int) int {
		switch i {
		case 1:
			return 0
		default:
			return 1
		}
	}
	```
2024/06/06 16:19:43 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (3539 ms) with:
	```golang
	package light

	import "testing"

	func TestSimpleSwitchWithReturn(t *testing.T) {
		if got, want := simpleSwitchWithReturn(1), 0; got != want {
			t.Errorf("simpleSwitchWithReturn(1) = %d, want %d", got, want)
		}
		if got, want := simpleSwitchWithReturn(2), 1; got != want {
			t.Errorf("simpleSwitchWithReturn(2) = %d, want %d", got, want)
		}
		if got, want := simpleSwitchWithReturn(0), 1; got != want {
			t.Errorf("simpleSwitchWithReturn(0) = %d, want %d", got, want)
		}
	}
	```
2024/06/06 16:19:43 $ go mod tidy
2024/06/06 16:19:43 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestSimpleSwitchWithReturn
--- PASS: TestSimpleSwitchWithReturn (0.00s)
PASS
coverage: 1.4% of statements
ok  	light	0.002s	coverage: 1.4% of statements

DONE 1 tests in 0.325s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 16:19:44 Executes tests with 3 coverage objects
2024/06/06 16:19:44 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "sort.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func isSorted(a []int) bool {
		i := 0
		for i < len(a)-1 && a[i] <= a[i+1] {
			i++
		}

		return i == len(a)-1
	}
	```
2024/06/06 16:19:51 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (7038 ms) with:
	```golang
	package light

	import "testing"

	func TestIsSorted(t *testing.T) {
		tests := []struct {
			name string
			a    []int
			want bool
		}{
			{"empty slice", []int{}, true},
			{"single element", []int{1}, true},
			{"already sorted", []int{1, 2, 3, 4, 5}, true},
			{"not sorted", []int{5, 4, 3, 2, 1}, false},
			{"partially sorted", []int{1, 2, 3, 5, 4}, false},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := isSorted(tt.a); got != tt.want {
					t.Errorf("isSorted() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 16:19:51 $ go mod tidy
2024/06/06 16:19:51 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestIsSorted
=== RUN   TestIsSorted/empty_slice
    sort_test.go:21: isSorted() = false, want true
=== RUN   TestIsSorted/single_element
=== RUN   TestIsSorted/already_sorted
=== RUN   TestIsSorted/not_sorted
=== RUN   TestIsSorted/partially_sorted
--- FAIL: TestIsSorted (0.00s)
    --- FAIL: TestIsSorted/empty_slice (0.00s)
    --- PASS: TestIsSorted/single_element (0.00s)
    --- PASS: TestIsSorted/already_sorted (0.00s)
    --- PASS: TestIsSorted/not_sorted (0.00s)
    --- PASS: TestIsSorted/partially_sorted (0.00s)
FAIL
coverage: 1.9% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestIsSorted/empty_slice (0.00s)
    sort_test.go:21: isSorted() = false, want true
    --- FAIL: TestIsSorted/empty_slice (0.00s)

=== FAIL: . TestIsSorted (0.00s)

DONE 6 tests, 2 failures in 0.331s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:19:51 Executes tests with 2 coverage objects
2024/06/06 16:19:51 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "typeArrayAccess.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func typeArrayAccess(x []int) int {
		if x[0] == 123 {
			return x[0]
		}

		return 3
	}
	```
2024/06/06 16:19:56 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (4767 ms) with:
	```go
	package light

	import "testing"

	func TestTypeArrayAccess(t *testing.T) {
		tests := []struct {
			name string
			x    []int
			want int
		}{
			{"x[0] equals 123", []int{123}, 123},
			{"x[0] does not equal 123", []int{124}, 3},
			{"x is nil", nil, 3},
			{"x is empty", []int{}, 3},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := typeArrayAccess(tt.x); got != tt.want {
					t.Errorf("typeArrayAccess() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 16:19:56 $ go mod tidy
2024/06/06 16:19:56 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestTypeArrayAccess
=== RUN   TestTypeArrayAccess/x[0]_equals_123
=== RUN   TestTypeArrayAccess/x[0]_does_not_equal_123
=== RUN   TestTypeArrayAccess/x_is_nil
--- FAIL: TestTypeArrayAccess (0.00s)
    --- PASS: TestTypeArrayAccess/x[0]_equals_123 (0.00s)
    --- PASS: TestTypeArrayAccess/x[0]_does_not_equal_123 (0.00s)
    --- FAIL: TestTypeArrayAccess/x_is_nil (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 9 [running]:
testing.tRunner.func1.2({0x56b340, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b340?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc0001ae000?)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:19 +0xfa
testing.tRunner(0xc0001ae1a0, 0xc000024350)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayAccess/x_is_nil (0.00s)
    --- FAIL: TestTypeArrayAccess/x_is_nil (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 9 [running]:
testing.tRunner.func1.2({0x56b340, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b340?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc0001ae000?)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:19 +0xfa
testing.tRunner(0xc0001ae1a0, 0xc000024350)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayAccess (0.00s)

DONE 4 tests, 2 failures in 0.323s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:19:57 Executes tests with 0 coverage objects
2024/06/06 16:19:57 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "typeArrayConsecutiveAccess.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func typeArrayConsecutiveAccess(input []int) int {
		cnt := 0
		if input[0] == 0 {
			cnt++
		}
		if input[1] == 8 {
			cnt++
		}
		return cnt
	}
	```
2024/06/06 16:20:03 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (6200 ms) with:
	```go
	package light

	import "testing"

	func TestTypeArrayConsecutiveAccess(t *testing.T) {
		type args struct {
			input []int
		}
		tests := []struct {
			name string
			args args
			want int
		}{
			{"both_match", args{[]int{0, 8, 9}}, 2},
			{"first_match", args{[]int{0, 7, 9}}, 1},
			{"second_match", args{[]int{1, 8, 9}}, 1},
			{"none_match", args{[]int{1, 7, 9}}, 0},
			{"empty_array", args{[]int{}}, 0},
			{"single_element_array", args{[]int{0}}, 1},
			{"single_element_array_second_match", args{[]int{8}}, 1},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := typeArrayConsecutiveAccess(tt.args.input); got != tt.want {
					t.Errorf("typeArrayConsecutiveAccess() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 16:20:03 $ go mod tidy
2024/06/06 16:20:03 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestTypeArrayConsecutiveAccess
=== RUN   TestTypeArrayConsecutiveAccess/both_match
=== RUN   TestTypeArrayConsecutiveAccess/first_match
=== RUN   TestTypeArrayConsecutiveAccess/second_match
=== RUN   TestTypeArrayConsecutiveAccess/none_match
=== RUN   TestTypeArrayConsecutiveAccess/empty_array
--- FAIL: TestTypeArrayConsecutiveAccess (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/both_match (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/first_match (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/second_match (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/none_match (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 11 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018090})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018090?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001ae340?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:24 +0x138
testing.tRunner(0xc0001ae4e0, 0xc000026470)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.004s

=== Failed
=== FAIL: . TestTypeArrayConsecutiveAccess/empty_array (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 11 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018090})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018090?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001ae340?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:24 +0x138
testing.tRunner(0xc0001ae4e0, 0xc000026470)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayConsecutiveAccess (0.00s)

DONE 6 tests, 2 failures in 0.341s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:20:03 Executes tests with 0 coverage objects
2024/06/06 16:20:03 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "typeArrayMultidimensionalArrayLength.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func typeArrayMultidimensionalArrayLength(x [][]int) int {
		if len(x) == 2 {
			if len(x[0]) == 2 {
				return 2
			}

			return 1
		}

		return 0
	}
	```
2024/06/06 16:20:09 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (5622 ms) with:
	```golang
	package light

	import "testing"

	func TestTypeArrayMultidimensionalArrayLength(t *testing.T) {
		tests := []struct {
			name string
			x    [][]int
			want int
		}{
			{"len(x) == 2, len(x[0]) == 2", [][]int{{1, 2}, {3, 4}}, 2},
			{"len(x) == 2, len(x[0]) != 2", [][]int{{1, 2, 3}, {3, 4}}, 1},
			{"len(x) != 2", [][]int{{1, 2}, {3, 4}, {5, 6}}, 0},
			{"empty", [][]int{}, 0},
			{"nil", nil, 0},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				if got := typeArrayMultidimensionalArrayLength(tt.x); got != tt.want {
					t.Errorf("typeArrayMultidimensionalArrayLength() = %v, want %v", got, tt.want)
				}
			})
		}
	}
	```
2024/06/06 16:20:09 $ go mod tidy
2024/06/06 16:20:09 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestTypeArrayMultidimensionalArrayLength
=== RUN   TestTypeArrayMultidimensionalArrayLength/len(x)_==_2,_len(x[0])_==_2
=== RUN   TestTypeArrayMultidimensionalArrayLength/len(x)_==_2,_len(x[0])_!=_2
=== RUN   TestTypeArrayMultidimensionalArrayLength/len(x)_!=_2
=== RUN   TestTypeArrayMultidimensionalArrayLength/empty
=== RUN   TestTypeArrayMultidimensionalArrayLength/nil
--- PASS: TestTypeArrayMultidimensionalArrayLength (0.00s)
    --- PASS: TestTypeArrayMultidimensionalArrayLength/len(x)_==_2,_len(x[0])_==_2 (0.00s)
    --- PASS: TestTypeArrayMultidimensionalArrayLength/len(x)_==_2,_len(x[0])_!=_2 (0.00s)
    --- PASS: TestTypeArrayMultidimensionalArrayLength/len(x)_!=_2 (0.00s)
    --- PASS: TestTypeArrayMultidimensionalArrayLength/empty (0.00s)
    --- PASS: TestTypeArrayMultidimensionalArrayLength/nil (0.00s)
PASS
coverage: 2.4% of statements
ok  	light	0.005s	coverage: 2.4% of statements

DONE 6 tests in 0.324s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
2024/06/06 16:20:09 Executes tests with 3 coverage objects
2024/06/06 16:20:09 Querying model "openrouter/perplexity/llama-3-sonar-large-32k-chat" with:
	Given the following Go code file "validateDate.go" with package "light", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package light

	func validDate(day int, month int, year int) bool {
		monthDays := []int{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}

		if year < 1583 {
			return false
		}
		if month < 1 || month > 12 {
			return false
		}
		if day < 1 {
			return false
		}
		if month == 2 {
			if (year%400) != 0 && (year%4) == 0 {
				if day > 29 {
					return false
				}
			} else {
				if day > 28 {
					return false
				}
			}
		} else {
			if day > monthDays[month-1] {
				return false
			}
		}

		return true
	}
	```
2024/06/06 16:20:15 Model "openrouter/perplexity/llama-3-sonar-large-32k-chat" responded (6304 ms) with:
	```go
	package light

	import "testing"

	func TestValidDate(t *testing.T) {
		tests := []struct {
			day   int
			month int
			year  int
			want  bool
		}{
			{1, 1, 1583, true},
			{31, 12, 2022, true},
			{29, 2, 2020, true},
			{29, 2, 2019, false},
			{30, 2, 2020, false},
			{31, 4, 2022, true},
			{32, 1, 2022, false},
			{1, 0, 2022, false},
			{1, 13, 2022, false},
			{1, 1, 1582, false},
		}

		for _, tt := range tests {
			if got := validDate(tt.day, tt.month, tt.year); got != tt.want {
				t.Errorf("validDate(%d, %d, %d) = %v, want %v", tt.day, tt.month, tt.year, got, tt.want)
			}
		}
	}
	```
2024/06/06 16:20:15 $ go mod tidy
2024/06/06 16:20:15 $ symflower test --language golang --workspace /tmp/eval-dev-quality744030985/light --coverage-file /tmp/eval-dev-quality744030985/light/coverage.json
=== RUN   TestValidDate
    validateDate_test.go:26: validDate(31, 4, 2022) = false, want true
--- FAIL: TestValidDate (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestValidDate (0.00s)
    validateDate_test.go:26: validDate(31, 4, 2022) = false, want true

DONE 1 tests, 1 failure in 0.344s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/06/06 16:20:16 Executes tests with 7 coverage objects
2024/06/06 16:20:16 Evaluated model "openrouter/perplexity/llama-3-sonar-large-32k-chat" using language "golang" and repository "golang/light": encountered 13 problems: [exit status 1
=== RUN   TestHasBalancedBrackets
=== RUN   TestHasBalancedBrackets/empty
=== RUN   TestHasBalancedBrackets/single_open
=== RUN   TestHasBalancedBrackets/single_close
=== RUN   TestHasBalancedBrackets/balanced
=== RUN   TestHasBalancedBrackets/unbalanced
    balancedBrackets_test.go:25: hasBalancedBrackets("[[]]") = true, want false
=== RUN   TestHasBalancedBrackets/unbalanced2
    balancedBrackets_test.go:25: hasBalancedBrackets("][") = true, want false
=== RUN   TestHasBalancedBrackets/unbalanced3
=== RUN   TestHasBalancedBrackets/unbalanced4
    balancedBrackets_test.go:25: hasBalancedBrackets("[][]]") = false, want true
=== RUN   TestHasBalancedBrackets/non_bracket
--- FAIL: TestHasBalancedBrackets (0.00s)
    --- PASS: TestHasBalancedBrackets/empty (0.00s)
    --- PASS: TestHasBalancedBrackets/single_open (0.00s)
    --- PASS: TestHasBalancedBrackets/single_close (0.00s)
    --- PASS: TestHasBalancedBrackets/balanced (0.00s)
    --- FAIL: TestHasBalancedBrackets/unbalanced (0.00s)
    --- FAIL: TestHasBalancedBrackets/unbalanced2 (0.00s)
    --- PASS: TestHasBalancedBrackets/unbalanced3 (0.00s)
    --- FAIL: TestHasBalancedBrackets/unbalanced4 (0.00s)
    --- PASS: TestHasBalancedBrackets/non_bracket (0.00s)
FAIL
coverage: 4.7% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestHasBalancedBrackets/unbalanced (0.00s)
    balancedBrackets_test.go:25: hasBalancedBrackets("[[]]") = true, want false
    --- FAIL: TestHasBalancedBrackets/unbalanced (0.00s)

=== FAIL: . TestHasBalancedBrackets/unbalanced2 (0.00s)
    balancedBrackets_test.go:25: hasBalancedBrackets("][") = true, want false
    --- FAIL: TestHasBalancedBrackets/unbalanced2 (0.00s)

=== FAIL: . TestHasBalancedBrackets/unbalanced4 (0.00s)
    balancedBrackets_test.go:25: hasBalancedBrackets("[][]]") = false, want true
    --- FAIL: TestHasBalancedBrackets/unbalanced4 (0.00s)

=== FAIL: . TestHasBalancedBrackets (0.00s)

DONE 10 tests, 4 failures in 0.336s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestHasBalancedBrackets
=== RUN   TestHasBalancedBrackets/empty
=== RUN   TestHasBalancedBrackets/single_open
=== RUN   TestHasBalancedBrackets/single_close
=== RUN   TestHasBalancedBrackets/balanced
=== RUN   TestHasBalancedBrackets/unbalanced
    balancedBrackets_test.go:25: hasBalancedBrackets("[[]]") = true, want false
=== RUN   TestHasBalancedBrackets/unbalanced2
    balancedBrackets_test.go:25: hasBalancedBrackets("][") = true, want false
=== RUN   TestHasBalancedBrackets/unbalanced3
=== RUN   TestHasBalancedBrackets/unbalanced4
    balancedBrackets_test.go:25: hasBalancedBrackets("[][]]") = false, want true
=== RUN   TestHasBalancedBrackets/non_bracket
--- FAIL: TestHasBalancedBrackets (0.00s)
    --- PASS: TestHasBalancedBrackets/empty (0.00s)
    --- PASS: TestHasBalancedBrackets/single_open (0.00s)
    --- PASS: TestHasBalancedBrackets/single_close (0.00s)
    --- PASS: TestHasBalancedBrackets/balanced (0.00s)
    --- FAIL: TestHasBalancedBrackets/unbalanced (0.00s)
    --- FAIL: TestHasBalancedBrackets/unbalanced2 (0.00s)
    --- PASS: TestHasBalancedBrackets/unbalanced3 (0.00s)
    --- FAIL: TestHasBalancedBrackets/unbalanced4 (0.00s)
    --- PASS: TestHasBalancedBrackets/non_bracket (0.00s)
FAIL
coverage: 4.7% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestHasBalancedBrackets/unbalanced (0.00s)
    balancedBrackets_test.go:25: hasBalancedBrackets("[[]]") = true, want false
    --- FAIL: TestHasBalancedBrackets/unbalanced (0.00s)

=== FAIL: . TestHasBalancedBrackets/unbalanced2 (0.00s)
    balancedBrackets_test.go:25: hasBalancedBrackets("][") = true, want false
    --- FAIL: TestHasBalancedBrackets/unbalanced2 (0.00s)

=== FAIL: . TestHasBalancedBrackets/unbalanced4 (0.00s)
    balancedBrackets_test.go:25: hasBalancedBrackets("[][]]") = false, want true
    --- FAIL: TestHasBalancedBrackets/unbalanced4 (0.00s)

=== FAIL: . TestHasBalancedBrackets (0.00s)

DONE 10 tests, 4 failures in 0.336s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestCallLoopConditionsOftenEnough
    callLoopConditionsOftenEnough_test.go:7: callLoopConditionsOftenEnough(5, 30) = 0, want 16
    callLoopConditionsOftenEnough_test.go:10: callLoopConditionsOftenEnough(25, 30) = 0, want 12
--- FAIL: TestCallLoopConditionsOftenEnough (0.00s)
FAIL
coverage: 2.8% of statements
FAIL	light	0.003s

=== Failed
=== FAIL: . TestCallLoopConditionsOftenEnough (0.00s)
    callLoopConditionsOftenEnough_test.go:7: callLoopConditionsOftenEnough(5, 30) = 0, want 16
    callLoopConditionsOftenEnough_test.go:10: callLoopConditionsOftenEnough(25, 30) = 0, want 12

DONE 1 tests, 1 failure in 0.314s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestCallLoopConditionsOftenEnough
    callLoopConditionsOftenEnough_test.go:7: callLoopConditionsOftenEnough(5, 30) = 0, want 16
    callLoopConditionsOftenEnough_test.go:10: callLoopConditionsOftenEnough(25, 30) = 0, want 12
--- FAIL: TestCallLoopConditionsOftenEnough (0.00s)
FAIL
coverage: 2.8% of statements
FAIL	light	0.003s

=== Failed
=== FAIL: . TestCallLoopConditionsOftenEnough (0.00s)
    callLoopConditionsOftenEnough_test.go:7: callLoopConditionsOftenEnough(5, 30) = 0, want 16
    callLoopConditionsOftenEnough_test.go:10: callLoopConditionsOftenEnough(25, 30) = 0, want 12

DONE 1 tests, 1 failure in 0.314s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
# light [light.test]
./collatzCalculator_test.go:23:11: undefined: errors
./collatzCalculator_test.go:24:10: undefined: errors
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./collatzCalculator_test.go:23:11: undefined: errors
./collatzCalculator_test.go:24:10: undefined: errors

DONE 0 tests, 2 errors in 0.133s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:116
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
# light [light.test]
./collatzCalculator_test.go:23:11: undefined: errors
./collatzCalculator_test.go:24:10: undefined: errors
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./collatzCalculator_test.go:23:11: undefined: errors
./collatzCalculator_test.go:24:10: undefined: errors

DONE 0 tests, 2 errors in 0.133s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

collatzCalculator.go exit status 1
=== RUN   TestEquilibriumIndices
=== RUN   TestEquilibriumIndices/empty_sequence
=== RUN   TestEquilibriumIndices/single_element
=== RUN   TestEquilibriumIndices/no_equilibrium
=== RUN   TestEquilibriumIndices/one_equilibrium
    equilibriumIndices_test.go:24: equilibriumIndices() = 3;6;, want 3;
=== RUN   TestEquilibriumIndices/multiple_equilibriums
    equilibriumIndices_test.go:24: equilibriumIndices() = , want 1;3;
=== RUN   TestEquilibriumIndices/all_equilibriums
--- FAIL: TestEquilibriumIndices (0.00s)
    --- PASS: TestEquilibriumIndices/empty_sequence (0.00s)
    --- PASS: TestEquilibriumIndices/single_element (0.00s)
    --- PASS: TestEquilibriumIndices/no_equilibrium (0.00s)
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)
    --- FAIL: TestEquilibriumIndices/multiple_equilibriums (0.00s)
    --- PASS: TestEquilibriumIndices/all_equilibriums (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestEquilibriumIndices/one_equilibrium (0.00s)
    equilibriumIndices_test.go:24: equilibriumIndices() = 3;6;, want 3;
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)

=== FAIL: . TestEquilibriumIndices/multiple_equilibriums (0.00s)
    equilibriumIndices_test.go:24: equilibriumIndices() = , want 1;3;
    --- FAIL: TestEquilibriumIndices/multiple_equilibriums (0.00s)

=== FAIL: . TestEquilibriumIndices (0.00s)

DONE 7 tests, 3 failures in 0.328s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestEquilibriumIndices
=== RUN   TestEquilibriumIndices/empty_sequence
=== RUN   TestEquilibriumIndices/single_element
=== RUN   TestEquilibriumIndices/no_equilibrium
=== RUN   TestEquilibriumIndices/one_equilibrium
    equilibriumIndices_test.go:24: equilibriumIndices() = 3;6;, want 3;
=== RUN   TestEquilibriumIndices/multiple_equilibriums
    equilibriumIndices_test.go:24: equilibriumIndices() = , want 1;3;
=== RUN   TestEquilibriumIndices/all_equilibriums
--- FAIL: TestEquilibriumIndices (0.00s)
    --- PASS: TestEquilibriumIndices/empty_sequence (0.00s)
    --- PASS: TestEquilibriumIndices/single_element (0.00s)
    --- PASS: TestEquilibriumIndices/no_equilibrium (0.00s)
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)
    --- FAIL: TestEquilibriumIndices/multiple_equilibriums (0.00s)
    --- PASS: TestEquilibriumIndices/all_equilibriums (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestEquilibriumIndices/one_equilibrium (0.00s)
    equilibriumIndices_test.go:24: equilibriumIndices() = 3;6;, want 3;
    --- FAIL: TestEquilibriumIndices/one_equilibrium (0.00s)

=== FAIL: . TestEquilibriumIndices/multiple_equilibriums (0.00s)
    equilibriumIndices_test.go:24: equilibriumIndices() = , want 1;3;
    --- FAIL: TestEquilibriumIndices/multiple_equilibriums (0.00s)

=== FAIL: . TestEquilibriumIndices (0.00s)

DONE 7 tests, 3 failures in 0.328s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
# light [light.test]
./jacobiSymbol_test.go:22:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
./jacobiSymbol_test.go:22:14: undefined: fmt
./jacobiSymbol_test.go:23:13: undefined: fmt
./jacobiSymbol_test.go:24:13: undefined: fmt
./jacobiSymbol_test.go:25:13: undefined: fmt
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./jacobiSymbol_test.go:22:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
./jacobiSymbol_test.go:22:14: undefined: fmt
./jacobiSymbol_test.go:23:13: undefined: fmt
./jacobiSymbol_test.go:24:13: undefined: fmt
./jacobiSymbol_test.go:25:13: undefined: fmt

DONE 0 tests, 5 errors in 0.160s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:116
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
# light [light.test]
./jacobiSymbol_test.go:22:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
./jacobiSymbol_test.go:22:14: undefined: fmt
./jacobiSymbol_test.go:23:13: undefined: fmt
./jacobiSymbol_test.go:24:13: undefined: fmt
./jacobiSymbol_test.go:25:13: undefined: fmt
WARN invalid TestEvent: FAIL	light [build failed]
bad output from test2json: FAIL	light [build failed]

=== Errors
./jacobiSymbol_test.go:22:4: cannot use -1 (untyped int constant) as uint64 value in struct literal (overflows)
./jacobiSymbol_test.go:22:14: undefined: fmt
./jacobiSymbol_test.go:23:13: undefined: fmt
./jacobiSymbol_test.go:24:13: undefined: fmt
./jacobiSymbol_test.go:25:13: undefined: fmt

DONE 0 tests, 5 errors in 0.160s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

jacobiSymbol.go exit status 1
=== RUN   TestInitialiseKlarnerRadoSequence
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(2)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[10] = 21, want 10
--- FAIL: TestInitialiseKlarnerRadoSequence (0.00s)
FAIL
coverage: 6.2% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestInitialiseKlarnerRadoSequence (0.00s)
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(2)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[10] = 21, want 10

DONE 1 tests, 1 failure in 0.344s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestInitialiseKlarnerRadoSequence
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(2)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[10] = 21, want 10
--- FAIL: TestInitialiseKlarnerRadoSequence (0.00s)
FAIL
coverage: 6.2% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestInitialiseKlarnerRadoSequence (0.00s)
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(2)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(3)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(4)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(5)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(6)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(7)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(8)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(9)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[2] = 3, want 2
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[3] = 4, want 3
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[4] = 7, want 4
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[5] = 9, want 5
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[6] = 10, want 6
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[7] = 13, want 7
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[8] = 15, want 8
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[9] = 19, want 9
    klarnerRadoSequence_test.go:32: initialiseKlarnerRadoSequence(10)[10] = 21, want 10

DONE 1 tests, 1 failure in 0.344s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestMaximumValue
    knapsack_test.go:23: maximumValue(5, [{2 3} {3 4} {4 8} {5 8}]) = 8, want 7
    knapsack_test.go:23: maximumValue(3, [{1 1} {2 6} {3 18}]) = 18, want 8
--- FAIL: TestMaximumValue (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestMaximumValue (0.00s)
    knapsack_test.go:23: maximumValue(5, [{2 3} {3 4} {4 8} {5 8}]) = 8, want 7
    knapsack_test.go:23: maximumValue(3, [{1 1} {2 6} {3 18}]) = 18, want 8

DONE 1 tests, 1 failure in 0.334s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestMaximumValue
    knapsack_test.go:23: maximumValue(5, [{2 3} {3 4} {4 8} {5 8}]) = 8, want 7
    knapsack_test.go:23: maximumValue(3, [{1 1} {2 6} {3 18}]) = 18, want 8
--- FAIL: TestMaximumValue (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestMaximumValue (0.00s)
    knapsack_test.go:23: maximumValue(5, [{2 3} {3 4} {4 8} {5 8}]) = 8, want 7
    knapsack_test.go:23: maximumValue(3, [{1 1} {2 6} {3 18}]) = 18, want 8

DONE 1 tests, 1 failure in 0.334s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestMatchBytes
    matchBytes_test.go:30: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:30: matchBytes("Hello", "helloo") = true, want false
--- FAIL: TestMatchBytes (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56c1e0, 0xc000018030})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c1e0?, 0xc000018030?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.matchBytes(...)
	/tmp/eval-dev-quality744030985/light/matchBytes.go:6
light.TestMatchBytes(0xc000007860)
	/tmp/eval-dev-quality744030985/light/matchBytes_test.go:29 +0xa10
testing.tRunner(0xc000007860, 0x588040)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.004s

=== Failed
=== FAIL: . TestMatchBytes (0.00s)
    matchBytes_test.go:30: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:30: matchBytes("Hello", "helloo") = true, want false
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56c1e0, 0xc000018030})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c1e0?, 0xc000018030?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.matchBytes(...)
	/tmp/eval-dev-quality744030985/light/matchBytes.go:6
light.TestMatchBytes(0xc000007860)
	/tmp/eval-dev-quality744030985/light/matchBytes_test.go:29 +0xa10
testing.tRunner(0xc000007860, 0x588040)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

DONE 1 tests, 1 failure in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestMatchBytes
    matchBytes_test.go:30: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:30: matchBytes("Hello", "helloo") = true, want false
--- FAIL: TestMatchBytes (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56c1e0, 0xc000018030})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c1e0?, 0xc000018030?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.matchBytes(...)
	/tmp/eval-dev-quality744030985/light/matchBytes.go:6
light.TestMatchBytes(0xc000007860)
	/tmp/eval-dev-quality744030985/light/matchBytes_test.go:29 +0xa10
testing.tRunner(0xc000007860, 0x588040)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.004s

=== Failed
=== FAIL: . TestMatchBytes (0.00s)
    matchBytes_test.go:30: matchBytes("Hello", "hello ") = true, want false
    matchBytes_test.go:30: matchBytes("Hello", "helloo") = true, want false
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 6 [running]:
testing.tRunner.func1.2({0x56c1e0, 0xc000018030})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c1e0?, 0xc000018030?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.matchBytes(...)
	/tmp/eval-dev-quality744030985/light/matchBytes.go:6
light.TestMatchBytes(0xc000007860)
	/tmp/eval-dev-quality744030985/light/matchBytes_test.go:29 +0xa10
testing.tRunner(0xc000007860, 0x588040)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

DONE 1 tests, 1 failure in 0.329s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestExtractDigits
    phoneNumber_test.go:32: extractDigits("+1 (123) 456-7890") = "11234567890", want "1234567890"
    phoneNumber_test.go:28: extractDigits("123456") error = <nil>, wantErr true
--- FAIL: TestExtractDigits (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestExtractDigits (0.00s)
    phoneNumber_test.go:32: extractDigits("+1 (123) 456-7890") = "11234567890", want "1234567890"
    phoneNumber_test.go:28: extractDigits("123456") error = <nil>, wantErr true

DONE 1 tests, 1 failure in 0.311s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestExtractDigits
    phoneNumber_test.go:32: extractDigits("+1 (123) 456-7890") = "11234567890", want "1234567890"
    phoneNumber_test.go:28: extractDigits("123456") error = <nil>, wantErr true
--- FAIL: TestExtractDigits (0.00s)
FAIL
coverage: 4.3% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestExtractDigits (0.00s)
    phoneNumber_test.go:32: extractDigits("+1 (123) 456-7890") = "11234567890", want "1234567890"
    phoneNumber_test.go:28: extractDigits("123456") error = <nil>, wantErr true

DONE 1 tests, 1 failure in 0.311s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestIsSorted
=== RUN   TestIsSorted/empty_slice
    sort_test.go:21: isSorted() = false, want true
=== RUN   TestIsSorted/single_element
=== RUN   TestIsSorted/already_sorted
=== RUN   TestIsSorted/not_sorted
=== RUN   TestIsSorted/partially_sorted
--- FAIL: TestIsSorted (0.00s)
    --- FAIL: TestIsSorted/empty_slice (0.00s)
    --- PASS: TestIsSorted/single_element (0.00s)
    --- PASS: TestIsSorted/already_sorted (0.00s)
    --- PASS: TestIsSorted/not_sorted (0.00s)
    --- PASS: TestIsSorted/partially_sorted (0.00s)
FAIL
coverage: 1.9% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestIsSorted/empty_slice (0.00s)
    sort_test.go:21: isSorted() = false, want true
    --- FAIL: TestIsSorted/empty_slice (0.00s)

=== FAIL: . TestIsSorted (0.00s)

DONE 6 tests, 2 failures in 0.331s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestIsSorted
=== RUN   TestIsSorted/empty_slice
    sort_test.go:21: isSorted() = false, want true
=== RUN   TestIsSorted/single_element
=== RUN   TestIsSorted/already_sorted
=== RUN   TestIsSorted/not_sorted
=== RUN   TestIsSorted/partially_sorted
--- FAIL: TestIsSorted (0.00s)
    --- FAIL: TestIsSorted/empty_slice (0.00s)
    --- PASS: TestIsSorted/single_element (0.00s)
    --- PASS: TestIsSorted/already_sorted (0.00s)
    --- PASS: TestIsSorted/not_sorted (0.00s)
    --- PASS: TestIsSorted/partially_sorted (0.00s)
FAIL
coverage: 1.9% of statements
FAIL	light	0.005s

=== Failed
=== FAIL: . TestIsSorted/empty_slice (0.00s)
    sort_test.go:21: isSorted() = false, want true
    --- FAIL: TestIsSorted/empty_slice (0.00s)

=== FAIL: . TestIsSorted (0.00s)

DONE 6 tests, 2 failures in 0.331s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestTypeArrayAccess
=== RUN   TestTypeArrayAccess/x[0]_equals_123
=== RUN   TestTypeArrayAccess/x[0]_does_not_equal_123
=== RUN   TestTypeArrayAccess/x_is_nil
--- FAIL: TestTypeArrayAccess (0.00s)
    --- PASS: TestTypeArrayAccess/x[0]_equals_123 (0.00s)
    --- PASS: TestTypeArrayAccess/x[0]_does_not_equal_123 (0.00s)
    --- FAIL: TestTypeArrayAccess/x_is_nil (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 9 [running]:
testing.tRunner.func1.2({0x56b340, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b340?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc0001ae000?)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:19 +0xfa
testing.tRunner(0xc0001ae1a0, 0xc000024350)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayAccess/x_is_nil (0.00s)
    --- FAIL: TestTypeArrayAccess/x_is_nil (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 9 [running]:
testing.tRunner.func1.2({0x56b340, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b340?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc0001ae000?)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:19 +0xfa
testing.tRunner(0xc0001ae1a0, 0xc000024350)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayAccess (0.00s)

DONE 4 tests, 2 failures in 0.323s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestTypeArrayAccess
=== RUN   TestTypeArrayAccess/x[0]_equals_123
=== RUN   TestTypeArrayAccess/x[0]_does_not_equal_123
=== RUN   TestTypeArrayAccess/x_is_nil
--- FAIL: TestTypeArrayAccess (0.00s)
    --- PASS: TestTypeArrayAccess/x[0]_equals_123 (0.00s)
    --- PASS: TestTypeArrayAccess/x[0]_does_not_equal_123 (0.00s)
    --- FAIL: TestTypeArrayAccess/x_is_nil (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 9 [running]:
testing.tRunner.func1.2({0x56b340, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b340?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc0001ae000?)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:19 +0xfa
testing.tRunner(0xc0001ae1a0, 0xc000024350)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.005s

=== Failed
=== FAIL: . TestTypeArrayAccess/x_is_nil (0.00s)
    --- FAIL: TestTypeArrayAccess/x_is_nil (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 9 [running]:
testing.tRunner.func1.2({0x56b340, 0xc000018048})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56b340?, 0xc000018048?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess.go:4
light.TestTypeArrayAccess.func1(0xc0001ae000?)
	/tmp/eval-dev-quality744030985/light/typeArrayAccess_test.go:19 +0xfa
testing.tRunner(0xc0001ae1a0, 0xc000024350)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayAccess (0.00s)

DONE 4 tests, 2 failures in 0.323s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestTypeArrayConsecutiveAccess
=== RUN   TestTypeArrayConsecutiveAccess/both_match
=== RUN   TestTypeArrayConsecutiveAccess/first_match
=== RUN   TestTypeArrayConsecutiveAccess/second_match
=== RUN   TestTypeArrayConsecutiveAccess/none_match
=== RUN   TestTypeArrayConsecutiveAccess/empty_array
--- FAIL: TestTypeArrayConsecutiveAccess (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/both_match (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/first_match (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/second_match (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/none_match (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 11 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018090})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018090?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001ae340?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:24 +0x138
testing.tRunner(0xc0001ae4e0, 0xc000026470)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.004s

=== Failed
=== FAIL: . TestTypeArrayConsecutiveAccess/empty_array (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 11 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018090})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018090?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001ae340?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:24 +0x138
testing.tRunner(0xc0001ae4e0, 0xc000026470)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayConsecutiveAccess (0.00s)

DONE 6 tests, 2 failures in 0.341s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestTypeArrayConsecutiveAccess
=== RUN   TestTypeArrayConsecutiveAccess/both_match
=== RUN   TestTypeArrayConsecutiveAccess/first_match
=== RUN   TestTypeArrayConsecutiveAccess/second_match
=== RUN   TestTypeArrayConsecutiveAccess/none_match
=== RUN   TestTypeArrayConsecutiveAccess/empty_array
--- FAIL: TestTypeArrayConsecutiveAccess (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/both_match (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/first_match (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/second_match (0.00s)
    --- PASS: TestTypeArrayConsecutiveAccess/none_match (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 11 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018090})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018090?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001ae340?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:24 +0x138
testing.tRunner(0xc0001ae4e0, 0xc000026470)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad
FAIL	light	0.004s

=== Failed
=== FAIL: . TestTypeArrayConsecutiveAccess/empty_array (0.00s)
    --- FAIL: TestTypeArrayConsecutiveAccess/empty_array (0.00s)
panic: runtime error: index out of range [0] with length 0 [recovered]
	panic: runtime error: index out of range [0] with length 0

goroutine 11 [running]:
testing.tRunner.func1.2({0x56c480, 0xc000018090})
	/home/eval/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
	/home/eval/go/src/testing/testing.go:1548 +0x397
panic({0x56c480?, 0xc000018090?})
	/home/eval/go/src/runtime/panic.go:914 +0x21f
light.typeArrayConsecutiveAccess(...)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess.go:5
light.TestTypeArrayConsecutiveAccess.func1(0xc0001ae340?)
	/tmp/eval-dev-quality744030985/light/typeArrayConsecutiveAccess_test.go:24 +0x138
testing.tRunner(0xc0001ae4e0, 0xc000026470)
	/home/eval/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 6
	/home/eval/go/src/testing/testing.go:1648 +0x3ad

=== FAIL: . TestTypeArrayConsecutiveAccess (0.00s)

DONE 6 tests, 2 failures in 0.341s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
 exit status 1
=== RUN   TestValidDate
    validateDate_test.go:26: validDate(31, 4, 2022) = false, want true
--- FAIL: TestValidDate (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestValidDate (0.00s)
    validateDate_test.go:26: validDate(31, 4, 2022) = false, want true

DONE 1 tests, 1 failure in 0.344s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1

github.com/symflower/eval-dev-quality/util.CommandWithResult
	/home/eval/eval-dev-quality/util/exec.go:52
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:96
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	/home/eval/eval-dev-quality/language/golang/language.go:113
github.com/symflower/eval-dev-quality/evaluate.Repository
	/home/eval/eval-dev-quality/evaluate/repository.go:57
github.com/symflower/eval-dev-quality/evaluate.Evaluate.func2
	/home/eval/eval-dev-quality/evaluate/evaluate.go:209
github.com/symflower/eval-dev-quality/evaluate.withLoadedModel
	/home/eval/eval-dev-quality/evaluate/evaluate.go:253
github.com/symflower/eval-dev-quality/evaluate.Evaluate
	/home/eval/eval-dev-quality/evaluate/evaluate.go:199
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:284
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	/home/eval/go/pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	/home/eval/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	/home/eval/go/src/runtime/proc.go:267
runtime.goexit
	/home/eval/go/src/runtime/asm_amd64.s:1650
=== RUN   TestValidDate
    validateDate_test.go:26: validDate(31, 4, 2022) = false, want true
--- FAIL: TestValidDate (0.00s)
FAIL
coverage: 7.1% of statements
FAIL	light	0.004s

=== Failed
=== FAIL: . TestValidDate (0.00s)
    validateDate_test.go:26: validDate(31, 4, 2022) = false, want true

DONE 1 tests, 1 failure in 0.344s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
]
